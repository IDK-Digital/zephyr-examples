
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20000d38 	.word	0x20000d38

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, u32_t *, data, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   4:	00001e61 	.word	0x00001e61
   8:	00004669 	.word	0x00004669
		if (fdtable[fd].obj == NULL) {
   c:	00001cf1 	.word	0x00001cf1
  10:	00001cf1 	.word	0x00001cf1
  14:	00001cf1 	.word	0x00001cf1
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	00001cf1 	.word	0x00001cf1

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE0(K_SYSCALL_Z_ERRNO, z_errno, int *)
  1c:	00001cf1 	.word	0x00001cf1
	errno = ENFILE;
  20:	00001cf1 	.word	0x00001cf1
	return -1;
  24:	00001cf1 	.word	0x00001cf1

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
  28:	00001cf1 	.word	0x00001cf1
  2c:	00001955 	.word	0x00001955
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	00001cf1 	.word	0x00001cf1
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	00001cf1 	.word	0x00001cf1
  38:	000018fd 	.word	0x000018fd
  3c:	00004651 	.word	0x00004651

00000040 <_irq_vector_table>:
  40:	00001e21 00001e21 00001e21 00001e21     !...!...!...!...
  50:	00001e21 00001e21 00001e21 00001e21     !...!...!...!...
  60:	00001e21 00001e21 00001e21 00001e21     !...!...!...!...
  70:	00001e21 00001e21 00001e21 00001e21     !...!...!...!...
  80:	00001e21 00001e21 00001e21 00001e21     !...!...!...!...
  90:	00001e21 00001e21 00001e21 00001e21     !...!...!...!...
  a0:	00001e21 00001e21 00001e21 00001e21     !...!...!...!...
  b0:	00001e21 00001e21 00001e21 00001e21     !...!...!...!...
  c0:	00001e21 00001e21 00001e21 00001e21     !...!...!...!...
  d0:	00001e21 00001e21 00001e21              !...!...!...

Disassembly of section _TEXT_SECTION_NAME_2:

000000dc <__aeabi_ldivmod>:
      dc:	b97b      	cbnz	r3, fe <__aeabi_ldivmod+0x22>
      de:	b972      	cbnz	r2, fe <__aeabi_ldivmod+0x22>
      e0:	2900      	cmp	r1, #0
      e2:	bfbe      	ittt	lt
      e4:	2000      	movlt	r0, #0
      e6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
      ea:	e006      	blt.n	fa <__aeabi_ldivmod+0x1e>
      ec:	bf08      	it	eq
      ee:	2800      	cmpeq	r0, #0
      f0:	bf1c      	itt	ne
      f2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
      f6:	f04f 30ff 	movne.w	r0, #4294967295
      fa:	f000 b9bd 	b.w	478 <__aeabi_idiv0>
      fe:	f1ad 0c08 	sub.w	ip, sp, #8
     102:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     106:	2900      	cmp	r1, #0
     108:	db09      	blt.n	11e <CONFIG_KOBJECT_TEXT_AREA+0x1e>
     10a:	2b00      	cmp	r3, #0
     10c:	db1a      	blt.n	144 <CONFIG_IDLE_STACK_SIZE+0x4>
     10e:	f000 f84d 	bl	1ac <__udivmoddi4>
     112:	f8dd e004 	ldr.w	lr, [sp, #4]
     116:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     11a:	b004      	add	sp, #16
     11c:	4770      	bx	lr
     11e:	4240      	negs	r0, r0
     120:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     124:	2b00      	cmp	r3, #0
     126:	db1b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     128:	f000 f840 	bl	1ac <__udivmoddi4>
     12c:	f8dd e004 	ldr.w	lr, [sp, #4]
     130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     134:	b004      	add	sp, #16
     136:	4240      	negs	r0, r0
     138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     13c:	4252      	negs	r2, r2
     13e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     142:	4770      	bx	lr
     144:	4252      	negs	r2, r2
     146:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     14a:	f000 f82f 	bl	1ac <__udivmoddi4>
     14e:	f8dd e004 	ldr.w	lr, [sp, #4]
     152:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     156:	b004      	add	sp, #16
     158:	4240      	negs	r0, r0
     15a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     15e:	4770      	bx	lr
     160:	4252      	negs	r2, r2
     162:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     166:	f000 f821 	bl	1ac <__udivmoddi4>
     16a:	f8dd e004 	ldr.w	lr, [sp, #4]
     16e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     172:	b004      	add	sp, #16
     174:	4252      	negs	r2, r2
     176:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     17a:	4770      	bx	lr

0000017c <__aeabi_uldivmod>:
     17c:	b953      	cbnz	r3, 194 <__aeabi_uldivmod+0x18>
     17e:	b94a      	cbnz	r2, 194 <__aeabi_uldivmod+0x18>
     180:	2900      	cmp	r1, #0
     182:	bf08      	it	eq
     184:	2800      	cmpeq	r0, #0
     186:	bf1c      	itt	ne
     188:	f04f 31ff 	movne.w	r1, #4294967295
     18c:	f04f 30ff 	movne.w	r0, #4294967295
     190:	f000 b972 	b.w	478 <__aeabi_idiv0>
     194:	f1ad 0c08 	sub.w	ip, sp, #8
     198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     19c:	f000 f806 	bl	1ac <__udivmoddi4>
     1a0:	f8dd e004 	ldr.w	lr, [sp, #4]
     1a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1a8:	b004      	add	sp, #16
     1aa:	4770      	bx	lr

000001ac <__udivmoddi4>:
     1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     1b0:	9e08      	ldr	r6, [sp, #32]
     1b2:	4604      	mov	r4, r0
     1b4:	4688      	mov	r8, r1
     1b6:	2b00      	cmp	r3, #0
     1b8:	d14b      	bne.n	252 <CONFIG_FLASH_SIZE+0x52>
     1ba:	428a      	cmp	r2, r1
     1bc:	4615      	mov	r5, r2
     1be:	d967      	bls.n	290 <CONFIG_FLASH_SIZE+0x90>
     1c0:	fab2 f282 	clz	r2, r2
     1c4:	b14a      	cbz	r2, 1da <__udivmoddi4+0x2e>
     1c6:	f1c2 0720 	rsb	r7, r2, #32
     1ca:	fa01 f302 	lsl.w	r3, r1, r2
     1ce:	fa20 f707 	lsr.w	r7, r0, r7
     1d2:	4095      	lsls	r5, r2
     1d4:	ea47 0803 	orr.w	r8, r7, r3
     1d8:	4094      	lsls	r4, r2
     1da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1de:	0c23      	lsrs	r3, r4, #16
     1e0:	fbb8 f7fe 	udiv	r7, r8, lr
     1e4:	fa1f fc85 	uxth.w	ip, r5
     1e8:	fb0e 8817 	mls	r8, lr, r7, r8
     1ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
     1f0:	fb07 f10c 	mul.w	r1, r7, ip
     1f4:	4299      	cmp	r1, r3
     1f6:	d909      	bls.n	20c <CONFIG_FLASH_SIZE+0xc>
     1f8:	18eb      	adds	r3, r5, r3
     1fa:	f107 30ff 	add.w	r0, r7, #4294967295
     1fe:	f080 811b 	bcs.w	438 <CONFIG_MAIN_STACK_SIZE+0x38>
     202:	4299      	cmp	r1, r3
     204:	f240 8118 	bls.w	438 <CONFIG_MAIN_STACK_SIZE+0x38>
     208:	3f02      	subs	r7, #2
     20a:	442b      	add	r3, r5
     20c:	1a5b      	subs	r3, r3, r1
     20e:	b2a4      	uxth	r4, r4
     210:	fbb3 f0fe 	udiv	r0, r3, lr
     214:	fb0e 3310 	mls	r3, lr, r0, r3
     218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     21c:	fb00 fc0c 	mul.w	ip, r0, ip
     220:	45a4      	cmp	ip, r4
     222:	d909      	bls.n	238 <CONFIG_FLASH_SIZE+0x38>
     224:	192c      	adds	r4, r5, r4
     226:	f100 33ff 	add.w	r3, r0, #4294967295
     22a:	f080 8107 	bcs.w	43c <CONFIG_MAIN_STACK_SIZE+0x3c>
     22e:	45a4      	cmp	ip, r4
     230:	f240 8104 	bls.w	43c <CONFIG_MAIN_STACK_SIZE+0x3c>
     234:	3802      	subs	r0, #2
     236:	442c      	add	r4, r5
     238:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
     23c:	eba4 040c 	sub.w	r4, r4, ip
     240:	2700      	movs	r7, #0
     242:	b11e      	cbz	r6, 24c <CONFIG_FLASH_SIZE+0x4c>
     244:	40d4      	lsrs	r4, r2
     246:	2300      	movs	r3, #0
     248:	e9c6 4300 	strd	r4, r3, [r6]
     24c:	4639      	mov	r1, r7
     24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     252:	428b      	cmp	r3, r1
     254:	d909      	bls.n	26a <CONFIG_FLASH_SIZE+0x6a>
     256:	2e00      	cmp	r6, #0
     258:	f000 80eb 	beq.w	432 <CONFIG_MAIN_STACK_SIZE+0x32>
     25c:	2700      	movs	r7, #0
     25e:	e9c6 0100 	strd	r0, r1, [r6]
     262:	4638      	mov	r0, r7
     264:	4639      	mov	r1, r7
     266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     26a:	fab3 f783 	clz	r7, r3
     26e:	2f00      	cmp	r7, #0
     270:	d147      	bne.n	302 <CONFIG_FLASH_SIZE+0x102>
     272:	428b      	cmp	r3, r1
     274:	d302      	bcc.n	27c <CONFIG_FLASH_SIZE+0x7c>
     276:	4282      	cmp	r2, r0
     278:	f200 80fa 	bhi.w	470 <CONFIG_MAIN_STACK_SIZE+0x70>
     27c:	1a84      	subs	r4, r0, r2
     27e:	eb61 0303 	sbc.w	r3, r1, r3
     282:	2001      	movs	r0, #1
     284:	4698      	mov	r8, r3
     286:	2e00      	cmp	r6, #0
     288:	d0e0      	beq.n	24c <CONFIG_FLASH_SIZE+0x4c>
     28a:	e9c6 4800 	strd	r4, r8, [r6]
     28e:	e7dd      	b.n	24c <CONFIG_FLASH_SIZE+0x4c>
     290:	b902      	cbnz	r2, 294 <CONFIG_FLASH_SIZE+0x94>
     292:	deff      	udf	#255	; 0xff
     294:	fab2 f282 	clz	r2, r2
     298:	2a00      	cmp	r2, #0
     29a:	f040 808f 	bne.w	3bc <CONFIG_FLASH_SIZE+0x1bc>
     29e:	1b49      	subs	r1, r1, r5
     2a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2a4:	fa1f f885 	uxth.w	r8, r5
     2a8:	2701      	movs	r7, #1
     2aa:	fbb1 fcfe 	udiv	ip, r1, lr
     2ae:	0c23      	lsrs	r3, r4, #16
     2b0:	fb0e 111c 	mls	r1, lr, ip, r1
     2b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2b8:	fb08 f10c 	mul.w	r1, r8, ip
     2bc:	4299      	cmp	r1, r3
     2be:	d907      	bls.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     2c0:	18eb      	adds	r3, r5, r3
     2c2:	f10c 30ff 	add.w	r0, ip, #4294967295
     2c6:	d202      	bcs.n	2ce <CONFIG_FLASH_SIZE+0xce>
     2c8:	4299      	cmp	r1, r3
     2ca:	f200 80cd 	bhi.w	468 <CONFIG_MAIN_STACK_SIZE+0x68>
     2ce:	4684      	mov	ip, r0
     2d0:	1a59      	subs	r1, r3, r1
     2d2:	b2a3      	uxth	r3, r4
     2d4:	fbb1 f0fe 	udiv	r0, r1, lr
     2d8:	fb0e 1410 	mls	r4, lr, r0, r1
     2dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
     2e0:	fb08 f800 	mul.w	r8, r8, r0
     2e4:	45a0      	cmp	r8, r4
     2e6:	d907      	bls.n	2f8 <CONFIG_FLASH_SIZE+0xf8>
     2e8:	192c      	adds	r4, r5, r4
     2ea:	f100 33ff 	add.w	r3, r0, #4294967295
     2ee:	d202      	bcs.n	2f6 <CONFIG_FLASH_SIZE+0xf6>
     2f0:	45a0      	cmp	r8, r4
     2f2:	f200 80b6 	bhi.w	462 <CONFIG_MAIN_STACK_SIZE+0x62>
     2f6:	4618      	mov	r0, r3
     2f8:	eba4 0408 	sub.w	r4, r4, r8
     2fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     300:	e79f      	b.n	242 <CONFIG_FLASH_SIZE+0x42>
     302:	f1c7 0c20 	rsb	ip, r7, #32
     306:	40bb      	lsls	r3, r7
     308:	fa22 fe0c 	lsr.w	lr, r2, ip
     30c:	ea4e 0e03 	orr.w	lr, lr, r3
     310:	fa01 f407 	lsl.w	r4, r1, r7
     314:	fa20 f50c 	lsr.w	r5, r0, ip
     318:	fa21 f30c 	lsr.w	r3, r1, ip
     31c:	ea4f 481e 	mov.w	r8, lr, lsr #16
     320:	4325      	orrs	r5, r4
     322:	fbb3 f9f8 	udiv	r9, r3, r8
     326:	0c2c      	lsrs	r4, r5, #16
     328:	fb08 3319 	mls	r3, r8, r9, r3
     32c:	fa1f fa8e 	uxth.w	sl, lr
     330:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
     334:	fb09 f40a 	mul.w	r4, r9, sl
     338:	429c      	cmp	r4, r3
     33a:	fa02 f207 	lsl.w	r2, r2, r7
     33e:	fa00 f107 	lsl.w	r1, r0, r7
     342:	d90b      	bls.n	35c <CONFIG_FLASH_SIZE+0x15c>
     344:	eb1e 0303 	adds.w	r3, lr, r3
     348:	f109 30ff 	add.w	r0, r9, #4294967295
     34c:	f080 8087 	bcs.w	45e <CONFIG_MAIN_STACK_SIZE+0x5e>
     350:	429c      	cmp	r4, r3
     352:	f240 8084 	bls.w	45e <CONFIG_MAIN_STACK_SIZE+0x5e>
     356:	f1a9 0902 	sub.w	r9, r9, #2
     35a:	4473      	add	r3, lr
     35c:	1b1b      	subs	r3, r3, r4
     35e:	b2ad      	uxth	r5, r5
     360:	fbb3 f0f8 	udiv	r0, r3, r8
     364:	fb08 3310 	mls	r3, r8, r0, r3
     368:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
     36c:	fb00 fa0a 	mul.w	sl, r0, sl
     370:	45a2      	cmp	sl, r4
     372:	d908      	bls.n	386 <CONFIG_FLASH_SIZE+0x186>
     374:	eb1e 0404 	adds.w	r4, lr, r4
     378:	f100 33ff 	add.w	r3, r0, #4294967295
     37c:	d26b      	bcs.n	456 <CONFIG_MAIN_STACK_SIZE+0x56>
     37e:	45a2      	cmp	sl, r4
     380:	d969      	bls.n	456 <CONFIG_MAIN_STACK_SIZE+0x56>
     382:	3802      	subs	r0, #2
     384:	4474      	add	r4, lr
     386:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     38a:	fba0 8902 	umull	r8, r9, r0, r2
     38e:	eba4 040a 	sub.w	r4, r4, sl
     392:	454c      	cmp	r4, r9
     394:	46c2      	mov	sl, r8
     396:	464b      	mov	r3, r9
     398:	d354      	bcc.n	444 <CONFIG_MAIN_STACK_SIZE+0x44>
     39a:	d051      	beq.n	440 <CONFIG_MAIN_STACK_SIZE+0x40>
     39c:	2e00      	cmp	r6, #0
     39e:	d069      	beq.n	474 <CONFIG_MAIN_STACK_SIZE+0x74>
     3a0:	ebb1 050a 	subs.w	r5, r1, sl
     3a4:	eb64 0403 	sbc.w	r4, r4, r3
     3a8:	fa04 fc0c 	lsl.w	ip, r4, ip
     3ac:	40fd      	lsrs	r5, r7
     3ae:	40fc      	lsrs	r4, r7
     3b0:	ea4c 0505 	orr.w	r5, ip, r5
     3b4:	e9c6 5400 	strd	r5, r4, [r6]
     3b8:	2700      	movs	r7, #0
     3ba:	e747      	b.n	24c <CONFIG_FLASH_SIZE+0x4c>
     3bc:	f1c2 0320 	rsb	r3, r2, #32
     3c0:	fa20 f703 	lsr.w	r7, r0, r3
     3c4:	4095      	lsls	r5, r2
     3c6:	fa01 f002 	lsl.w	r0, r1, r2
     3ca:	fa21 f303 	lsr.w	r3, r1, r3
     3ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     3d2:	4338      	orrs	r0, r7
     3d4:	0c01      	lsrs	r1, r0, #16
     3d6:	fbb3 f7fe 	udiv	r7, r3, lr
     3da:	fa1f f885 	uxth.w	r8, r5
     3de:	fb0e 3317 	mls	r3, lr, r7, r3
     3e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3e6:	fb07 f308 	mul.w	r3, r7, r8
     3ea:	428b      	cmp	r3, r1
     3ec:	fa04 f402 	lsl.w	r4, r4, r2
     3f0:	d907      	bls.n	402 <CONFIG_MAIN_STACK_SIZE+0x2>
     3f2:	1869      	adds	r1, r5, r1
     3f4:	f107 3cff 	add.w	ip, r7, #4294967295
     3f8:	d22f      	bcs.n	45a <CONFIG_MAIN_STACK_SIZE+0x5a>
     3fa:	428b      	cmp	r3, r1
     3fc:	d92d      	bls.n	45a <CONFIG_MAIN_STACK_SIZE+0x5a>
     3fe:	3f02      	subs	r7, #2
     400:	4429      	add	r1, r5
     402:	1acb      	subs	r3, r1, r3
     404:	b281      	uxth	r1, r0
     406:	fbb3 f0fe 	udiv	r0, r3, lr
     40a:	fb0e 3310 	mls	r3, lr, r0, r3
     40e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     412:	fb00 f308 	mul.w	r3, r0, r8
     416:	428b      	cmp	r3, r1
     418:	d907      	bls.n	42a <CONFIG_MAIN_STACK_SIZE+0x2a>
     41a:	1869      	adds	r1, r5, r1
     41c:	f100 3cff 	add.w	ip, r0, #4294967295
     420:	d217      	bcs.n	452 <CONFIG_MAIN_STACK_SIZE+0x52>
     422:	428b      	cmp	r3, r1
     424:	d915      	bls.n	452 <CONFIG_MAIN_STACK_SIZE+0x52>
     426:	3802      	subs	r0, #2
     428:	4429      	add	r1, r5
     42a:	1ac9      	subs	r1, r1, r3
     42c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
     430:	e73b      	b.n	2aa <CONFIG_FLASH_SIZE+0xaa>
     432:	4637      	mov	r7, r6
     434:	4630      	mov	r0, r6
     436:	e709      	b.n	24c <CONFIG_FLASH_SIZE+0x4c>
     438:	4607      	mov	r7, r0
     43a:	e6e7      	b.n	20c <CONFIG_FLASH_SIZE+0xc>
     43c:	4618      	mov	r0, r3
     43e:	e6fb      	b.n	238 <CONFIG_FLASH_SIZE+0x38>
     440:	4541      	cmp	r1, r8
     442:	d2ab      	bcs.n	39c <CONFIG_FLASH_SIZE+0x19c>
     444:	ebb8 0a02 	subs.w	sl, r8, r2
     448:	eb69 020e 	sbc.w	r2, r9, lr
     44c:	3801      	subs	r0, #1
     44e:	4613      	mov	r3, r2
     450:	e7a4      	b.n	39c <CONFIG_FLASH_SIZE+0x19c>
     452:	4660      	mov	r0, ip
     454:	e7e9      	b.n	42a <CONFIG_MAIN_STACK_SIZE+0x2a>
     456:	4618      	mov	r0, r3
     458:	e795      	b.n	386 <CONFIG_FLASH_SIZE+0x186>
     45a:	4667      	mov	r7, ip
     45c:	e7d1      	b.n	402 <CONFIG_MAIN_STACK_SIZE+0x2>
     45e:	4681      	mov	r9, r0
     460:	e77c      	b.n	35c <CONFIG_FLASH_SIZE+0x15c>
     462:	3802      	subs	r0, #2
     464:	442c      	add	r4, r5
     466:	e747      	b.n	2f8 <CONFIG_FLASH_SIZE+0xf8>
     468:	f1ac 0c02 	sub.w	ip, ip, #2
     46c:	442b      	add	r3, r5
     46e:	e72f      	b.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     470:	4638      	mov	r0, r7
     472:	e708      	b.n	286 <CONFIG_FLASH_SIZE+0x86>
     474:	4637      	mov	r7, r6
     476:	e6e9      	b.n	24c <CONFIG_FLASH_SIZE+0x4c>

00000478 <__aeabi_idiv0>:
     478:	4770      	bx	lr
     47a:	bf00      	nop

0000047c <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
     47c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    /* Display application name on console. */
    printk(APP_NAME);
     47e:	4828      	ldr	r0, [pc, #160]	; (520 <dw_main+0xa4>)
     480:	f004 f871 	bl	4566 <printk>
	
	/* String to display on console string */
	char console_str[16] = {0};
     484:	2210      	movs	r2, #16
     486:	2100      	movs	r1, #0
     488:	4668      	mov	r0, sp
     48a:	f004 f965 	bl	4758 <memset>


    /* Configure DW1000 SPI */
    openspi();
     48e:	f000 faa7 	bl	9e0 <openspi>

    /* Reset and initialise DW1000. See NOTE 2 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
     492:	f003 fe3c 	bl	410e <reset_DW1000>
    port_set_dw1000_slowrate();
     496:	f003 fe56 	bl	4146 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
     49a:	2000      	movs	r0, #0
     49c:	f000 f9dc 	bl	858 <dwt_initialise>
     4a0:	3001      	adds	r0, #1
     4a2:	d103      	bne.n	4ac <dw_main+0x30>
    {
        printk("INIT FAILED");
     4a4:	481f      	ldr	r0, [pc, #124]	; (524 <dw_main+0xa8>)
     4a6:	f004 f85e 	bl	4566 <printk>
     4aa:	e7fe      	b.n	4aa <dw_main+0x2e>
        while (1)
        { };
    }
    port_set_dw1000_fastrate();
     4ac:	f003 fe51 	bl	4152 <port_set_dw1000_fastrate>

    /* Configure DW1000. */
    dwt_configure(&config);
     4b0:	481d      	ldr	r0, [pc, #116]	; (528 <dw_main+0xac>)
         * the RX buffer.
         * This is a good place to put a breakpoint. Here (after first time through the loop) the local status register will be set for last event
         * and if a good receive has happened the data buffer will have the data in it, and frame_len will be set to the length of the RX frame. */
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
        {
            rx_buffer[i] = 0;
     4b2:	4c1e      	ldr	r4, [pc, #120]	; (52c <dw_main+0xb0>)
        dwt_rxenable(DWT_START_RX_IMMEDIATE);

        /* Poll until a frame is properly received or an error/timeout occurs. See NOTE 4 below.
         * STATUS register is 5 bytes long but, as the event we are looking at is in the first byte of the register, we can use this simplest API
         * function to access it. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
     4b4:	4e1e      	ldr	r6, [pc, #120]	; (530 <dw_main+0xb4>)
    dwt_configure(&config);
     4b6:	f000 f841 	bl	53c <dwt_configure>
    dwt_setleds(1);
     4ba:	2001      	movs	r0, #1
     4bc:	f000 f940 	bl	740 <dwt_setleds>
            rx_buffer[i] = 0;
     4c0:	2500      	movs	r5, #0
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
     4c2:	2300      	movs	r3, #0
            rx_buffer[i] = 0;
     4c4:	551d      	strb	r5, [r3, r4]
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
     4c6:	3301      	adds	r3, #1
     4c8:	2b7f      	cmp	r3, #127	; 0x7f
     4ca:	d1fb      	bne.n	4c4 <dw_main+0x48>
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
     4cc:	2000      	movs	r0, #0
     4ce:	f003 fdba 	bl	4046 <dwt_rxenable>
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
     4d2:	2100      	movs	r1, #0
     4d4:	200f      	movs	r0, #15
     4d6:	f003 fc82 	bl	3dde <dwt_read32bitoffsetreg>
     4da:	4230      	tst	r0, r6
     4dc:	d0f9      	beq.n	4d2 <dw_main+0x56>
        { };

        if (status_reg & SYS_STATUS_RXFCG)
     4de:	f410 4180 	ands.w	r1, r0, #16384	; 0x4000
     4e2:	d01a      	beq.n	51a <dw_main+0x9e>
        {
            /* A frame has been received, copy it to our local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
     4e4:	2100      	movs	r1, #0
     4e6:	2010      	movs	r0, #16
     4e8:	f003 fc79 	bl	3dde <dwt_read32bitoffsetreg>
     4ec:	f3c0 0109 	ubfx	r1, r0, #0, #10
            if (frame_len <= FRAME_LEN_MAX)
     4f0:	297f      	cmp	r1, #127	; 0x7f
     4f2:	d803      	bhi.n	4fc <dw_main+0x80>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
     4f4:	2200      	movs	r2, #0
     4f6:	4620      	mov	r0, r4
     4f8:	f003 fc68 	bl	3dcc <dwt_readrxdata>
            }

			sprintf(console_str, "Data Received %s\n", rx_buffer);
     4fc:	4622      	mov	r2, r4
     4fe:	490d      	ldr	r1, [pc, #52]	; (534 <dw_main+0xb8>)
     500:	4668      	mov	r0, sp
     502:	f002 f995 	bl	2830 <sprintf>
			printk(console_str);
     506:	4668      	mov	r0, sp
     508:	f004 f82d 	bl	4566 <printk>

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
     50c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     510:	2100      	movs	r1, #0
        }
        else
        {
            /* Clear RX error events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
     512:	200f      	movs	r0, #15
     514:	f003 fcb2 	bl	3e7c <dwt_write32bitoffsetreg>
     518:	e7d3      	b.n	4c2 <dw_main+0x46>
     51a:	4a07      	ldr	r2, [pc, #28]	; (538 <dw_main+0xbc>)
     51c:	e7f9      	b.n	512 <dw_main+0x96>
     51e:	bf00      	nop
     520:	000051f2 	.word	0x000051f2
     524:	00005201 	.word	0x00005201
     528:	200016e8 	.word	0x200016e8
     52c:	200002a4 	.word	0x200002a4
     530:	2405d000 	.word	0x2405d000
     534:	0000520d 	.word	0x0000520d
     538:	24059000 	.word	0x24059000

0000053c <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
     53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8 nsSfd_result  = 0;
    uint8 useDWnsSFD = 0;
    uint8 chan = config->chan ;
     540:	7806      	ldrb	r6, [r0, #0]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
    uint8 prfIndex = config->prf - DWT_PRF_16M;
     542:	7847      	ldrb	r7, [r0, #1]
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
     544:	7942      	ldrb	r2, [r0, #5]
     546:	4b72      	ldr	r3, [pc, #456]	; (710 <dwt_configure+0x1d4>)
    uint8 prfIndex = config->prf - DWT_PRF_16M;
     548:	3f01      	subs	r7, #1
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
     54a:	2e04      	cmp	r6, #4
{
     54c:	4604      	mov	r4, r0
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
     54e:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
     552:	b2ff      	uxtb	r7, r7
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
     554:	f000 80be 	beq.w	6d4 <dwt_configure+0x198>
     558:	1ff3      	subs	r3, r6, #7
     55a:	f1d3 0900 	rsbs	r9, r3, #0
     55e:	eb49 0903 	adc.w	r9, r9, r3
     562:	4d6c      	ldr	r5, [pc, #432]	; (714 <dwt_configure+0x1d8>)
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
     564:	79e1      	ldrb	r1, [r4, #7]
     566:	682b      	ldr	r3, [r5, #0]
     568:	691a      	ldr	r2, [r3, #16]
     56a:	2900      	cmp	r1, #0
     56c:	f040 80b5 	bne.w	6da <dwt_configure+0x19e>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
     570:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
     574:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
     576:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
    }

    pdw1000local->longFrames = config->phrMode ;
     57a:	7a21      	ldrb	r1, [r4, #8]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
     57c:	691a      	ldr	r2, [r3, #16]
    pdw1000local->longFrames = config->phrMode ;
     57e:	7299      	strb	r1, [r3, #10]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
     580:	0409      	lsls	r1, r1, #16
     582:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
     586:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
     58a:	430a      	orrs	r2, r1
     58c:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
     58e:	2100      	movs	r1, #0
     590:	2004      	movs	r0, #4
     592:	f003 fc73 	bl	3e7c <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
     596:	4642      	mov	r2, r8
     598:	f642 0104 	movw	r1, #10244	; 0x2804
     59c:	202e      	movs	r0, #46	; 0x2e
     59e:	f003 fc5e 	bl	3e5e <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
     5a2:	4638      	mov	r0, r7
     5a4:	f003 fca2 	bl	3eec <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
     5a8:	4b5b      	ldr	r3, [pc, #364]	; (718 <dwt_configure+0x1dc>)
     5aa:	f813 8006 	ldrb.w	r8, [r3, r6]
     5ae:	4b5b      	ldr	r3, [pc, #364]	; (71c <dwt_configure+0x1e0>)
     5b0:	2107      	movs	r1, #7
     5b2:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
     5b6:	202b      	movs	r0, #43	; 0x2b
     5b8:	f003 fc60 	bl	3e7c <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
     5bc:	4b58      	ldr	r3, [pc, #352]	; (720 <dwt_configure+0x1e4>)
     5be:	210b      	movs	r1, #11
     5c0:	f813 2008 	ldrb.w	r2, [r3, r8]
     5c4:	202b      	movs	r0, #43	; 0x2b
     5c6:	f003 fc3e 	bl	3e46 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
     5ca:	4b56      	ldr	r3, [pc, #344]	; (724 <dwt_configure+0x1e8>)
     5cc:	210b      	movs	r1, #11
     5ce:	f813 2009 	ldrb.w	r2, [r3, r9]
     5d2:	2028      	movs	r0, #40	; 0x28
     5d4:	f003 fc37 	bl	3e46 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
     5d8:	4b53      	ldr	r3, [pc, #332]	; (728 <dwt_configure+0x1ec>)
     5da:	210c      	movs	r1, #12
     5dc:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
     5e0:	2028      	movs	r0, #40	; 0x28
     5e2:	f003 fc4b 	bl	3e7c <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
     5e6:	79e2      	ldrb	r2, [r4, #7]
     5e8:	79a3      	ldrb	r3, [r4, #6]
     5ea:	eb03 0342 	add.w	r3, r3, r2, lsl #1
     5ee:	4a4f      	ldr	r2, [pc, #316]	; (72c <dwt_configure+0x1f0>)
     5f0:	2102      	movs	r1, #2
     5f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
     5f6:	2027      	movs	r0, #39	; 0x27
     5f8:	f003 fc31 	bl	3e5e <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
     5fc:	4b4c      	ldr	r3, [pc, #304]	; (730 <dwt_configure+0x1f4>)
     5fe:	2104      	movs	r1, #4
     600:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
     604:	2027      	movs	r0, #39	; 0x27
     606:	f003 fc2a 	bl	3e5e <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
     60a:	79e3      	ldrb	r3, [r4, #7]
     60c:	2b00      	cmp	r3, #0
     60e:	d168      	bne.n	6e2 <dwt_configure+0x1a6>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
     610:	2264      	movs	r2, #100	; 0x64
     612:	2106      	movs	r1, #6
     614:	2027      	movs	r0, #39	; 0x27
     616:	f003 fc22 	bl	3e5e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
     61a:	78e3      	ldrb	r3, [r4, #3]
     61c:	4a45      	ldr	r2, [pc, #276]	; (734 <dwt_configure+0x1f8>)
     61e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
     622:	2108      	movs	r1, #8
     624:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     628:	2027      	movs	r0, #39	; 0x27
     62a:	f003 fc27 	bl	3e7c <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
     62e:	8963      	ldrh	r3, [r4, #10]
     630:	b913      	cbnz	r3, 638 <dwt_configure+0xfc>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
     632:	f241 0341 	movw	r3, #4161	; 0x1041
     636:	8163      	strh	r3, [r4, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
     638:	f8df 8100 	ldr.w	r8, [pc, #256]	; 73c <dwt_configure+0x200>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
     63c:	8962      	ldrh	r2, [r4, #10]
     63e:	2120      	movs	r1, #32
     640:	2027      	movs	r0, #39	; 0x27
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
     642:	eb08 0747 	add.w	r7, r8, r7, lsl #1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
     646:	f003 fc0a 	bl	3e5e <dwt_write16bitoffsetreg>
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
     64a:	f8d8 2000 	ldr.w	r2, [r8]
     64e:	210c      	movs	r1, #12
     650:	2023      	movs	r0, #35	; 0x23
     652:	f003 fc13 	bl	3e7c <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
     656:	2023      	movs	r0, #35	; 0x23
     658:	88ba      	ldrh	r2, [r7, #4]
     65a:	2104      	movs	r1, #4
     65c:	f003 fbff 	bl	3e5e <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
     660:	79a0      	ldrb	r0, [r4, #6]
     662:	2800      	cmp	r0, #0
     664:	d052      	beq.n	70c <dwt_configure+0x1d0>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
     666:	79e3      	ldrb	r3, [r4, #7]
     668:	4a33      	ldr	r2, [pc, #204]	; (738 <dwt_configure+0x1fc>)
     66a:	2021      	movs	r0, #33	; 0x21
     66c:	5cd2      	ldrb	r2, [r2, r3]
     66e:	2100      	movs	r1, #0
     670:	f003 fbe9 	bl	3e46 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
        useDWnsSFD = 1 ;
     674:	2201      	movs	r2, #1
        nsSfd_result = 3 ;
     676:	2003      	movs	r0, #3
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
     678:	7961      	ldrb	r1, [r4, #5]
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
     67a:	f006 030f 	and.w	r3, r6, #15
     67e:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
     682:	7861      	ldrb	r1, [r4, #1]
     684:	0489      	lsls	r1, r1, #18
     686:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
     68a:	430b      	orrs	r3, r1
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
     68c:	7921      	ldrb	r1, [r4, #4]
     68e:	0589      	lsls	r1, r1, #22
     690:	f001 61f8 	and.w	r1, r1, #130023424	; 0x7c00000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
     694:	0136      	lsls	r6, r6, #4
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
     696:	430b      	orrs	r3, r1
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
     698:	b2f6      	uxtb	r6, r6
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
     69a:	4333      	orrs	r3, r6
     69c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
     6a0:	ea43 4242 	orr.w	r2, r3, r2, lsl #17
     6a4:	2100      	movs	r1, #0
     6a6:	201f      	movs	r0, #31
     6a8:	f003 fbe8 	bl	3e7c <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
     6ac:	78a2      	ldrb	r2, [r4, #2]
     6ae:	7863      	ldrb	r3, [r4, #1]
     6b0:	4313      	orrs	r3, r2
     6b2:	79e2      	ldrb	r2, [r4, #7]
     6b4:	0352      	lsls	r2, r2, #13
     6b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
     6ba:	682b      	ldr	r3, [r5, #0]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
     6bc:	2100      	movs	r1, #0
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
     6be:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
     6c0:	2008      	movs	r0, #8
     6c2:	f003 fbdb 	bl	3e7c <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
     6c6:	2242      	movs	r2, #66	; 0x42
     6c8:	2100      	movs	r1, #0
     6ca:	200d      	movs	r0, #13
} // end dwt_configure()
     6cc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
     6d0:	f003 bbb9 	b.w	3e46 <dwt_write8bitoffsetreg>
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
     6d4:	f04f 0901 	mov.w	r9, #1
     6d8:	e743      	b.n	562 <dwt_configure+0x26>
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
     6da:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
     6de:	611a      	str	r2, [r3, #16]
     6e0:	e74b      	b.n	57a <dwt_configure+0x3e>
        if(config->txPreambLength == DWT_PLEN_64)
     6e2:	78a3      	ldrb	r3, [r4, #2]
     6e4:	2b04      	cmp	r3, #4
     6e6:	d10a      	bne.n	6fe <dwt_configure+0x1c2>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
     6e8:	2210      	movs	r2, #16
     6ea:	2106      	movs	r1, #6
     6ec:	2027      	movs	r0, #39	; 0x27
     6ee:	f003 fbb6 	bl	3e5e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
     6f2:	2210      	movs	r2, #16
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
     6f4:	2126      	movs	r1, #38	; 0x26
     6f6:	2027      	movs	r0, #39	; 0x27
     6f8:	f003 fba5 	bl	3e46 <dwt_write8bitoffsetreg>
     6fc:	e78d      	b.n	61a <dwt_configure+0xde>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
     6fe:	2220      	movs	r2, #32
     700:	2106      	movs	r1, #6
     702:	2027      	movs	r0, #39	; 0x27
     704:	f003 fbab 	bl	3e5e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
     708:	2228      	movs	r2, #40	; 0x28
     70a:	e7f3      	b.n	6f4 <dwt_configure+0x1b8>
    uint8 useDWnsSFD = 0;
     70c:	4602      	mov	r2, r0
     70e:	e7b3      	b.n	678 <dwt_configure+0x13c>
     710:	000051b4 	.word	0x000051b4
     714:	20001678 	.word	0x20001678
     718:	0000521f 	.word	0x0000521f
     71c:	000050e0 	.word	0x000050e0
     720:	0000522a 	.word	0x0000522a
     724:	00005230 	.word	0x00005230
     728:	000050f8 	.word	0x000050f8
     72c:	000051e6 	.word	0x000051e6
     730:	000051b0 	.word	0x000051b0
     734:	000050c0 	.word	0x000050c0
     738:	00005227 	.word	0x00005227
     73c:	000050b8 	.word	0x000050b8

00000740 <dwt_setleds>:
 * output parameters none
 *
 * no return value
 */
void dwt_setleds(uint8 mode)
{
     740:	b538      	push	{r3, r4, r5, lr}
    uint32 reg;

    if (mode & DWT_LEDS_ENABLE)
     742:	f010 0501 	ands.w	r5, r0, #1
{
     746:	4604      	mov	r4, r0
    if (mode & DWT_LEDS_ENABLE)
     748:	d029      	beq.n	79e <dwt_setleds+0x5e>
    {
        // Set up MFIO for LED output.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
     74a:	2100      	movs	r1, #0
     74c:	2026      	movs	r0, #38	; 0x26
     74e:	f003 fb46 	bl	3dde <dwt_read32bitoffsetreg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
     752:	f420 5270 	bic.w	r2, r0, #15360	; 0x3c00
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
     756:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
     75a:	2100      	movs	r1, #0
     75c:	2026      	movs	r0, #38	; 0x26
     75e:	f003 fb8d 	bl	3e7c <dwt_write32bitoffsetreg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET);
     762:	2100      	movs	r1, #0
     764:	2036      	movs	r0, #54	; 0x36
     766:	f003 fb3a 	bl	3dde <dwt_read32bitoffsetreg>
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, reg);
     76a:	2100      	movs	r1, #0
     76c:	f440 0204 	orr.w	r2, r0, #8650752	; 0x840000
     770:	2036      	movs	r0, #54	; 0x36
     772:	f003 fb83 	bl	3e7c <dwt_write32bitoffsetreg>

        // Enable LEDs to blink and set default blink time.
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
        // Make LEDs blink once if requested.
        if (mode & DWT_LEDS_INIT_BLINK)
     776:	f014 0402 	ands.w	r4, r4, #2
        {
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
        }
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
     77a:	4a0e      	ldr	r2, [pc, #56]	; (7b4 <dwt_setleds+0x74>)
     77c:	f04f 0128 	mov.w	r1, #40	; 0x28
     780:	bf08      	it	eq
     782:	f44f 7288 	moveq.w	r2, #272	; 0x110
     786:	2036      	movs	r0, #54	; 0x36
     788:	f003 fb78 	bl	3e7c <dwt_write32bitoffsetreg>
        // Clear force blink bits if needed.
        if(mode & DWT_LEDS_INIT_BLINK)
     78c:	b184      	cbz	r4, 7b0 <dwt_setleds+0x70>
        {
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
            dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
     78e:	f44f 7288 	mov.w	r2, #272	; 0x110
     792:	2128      	movs	r1, #40	; 0x28
     794:	2036      	movs	r0, #54	; 0x36
        // Clear the GPIO bits that are used for LED control.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
    }
}
     796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
     79a:	f003 bb6f 	b.w	3e7c <dwt_write32bitoffsetreg>
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
     79e:	4629      	mov	r1, r5
     7a0:	2026      	movs	r0, #38	; 0x26
     7a2:	f003 fb1c 	bl	3dde <dwt_read32bitoffsetreg>
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
     7a6:	4629      	mov	r1, r5
     7a8:	f420 5270 	bic.w	r2, r0, #15360	; 0x3c00
     7ac:	2026      	movs	r0, #38	; 0x26
     7ae:	e7f2      	b.n	796 <dwt_setleds+0x56>
}
     7b0:	bd38      	pop	{r3, r4, r5, pc}
     7b2:	bf00      	nop
     7b4:	000f0110 	.word	0x000f0110

000007b8 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
     7b8:	b538      	push	{r3, r4, r5, lr}
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
     7ba:	2100      	movs	r1, #0
     7bc:	200e      	movs	r0, #14
     7be:	f003 fb0e 	bl	3dde <dwt_read32bitoffsetreg>
     7c2:	4605      	mov	r5, r0

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
     7c4:	f003 fcdc 	bl	4180 <decamutexon>

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
     7c8:	2200      	movs	r2, #0
     7ca:	4611      	mov	r1, r2
    stat = decamutexon() ;
     7cc:	4604      	mov	r4, r0
    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
     7ce:	200e      	movs	r0, #14
     7d0:	f003 fb54 	bl	3e7c <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
     7d4:	2240      	movs	r2, #64	; 0x40
     7d6:	2100      	movs	r1, #0
     7d8:	200d      	movs	r0, #13
     7da:	f003 fb34 	bl	3e46 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
     7de:	4a0a      	ldr	r2, [pc, #40]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     7e0:	2100      	movs	r1, #0
     7e2:	200f      	movs	r0, #15
     7e4:	f003 fb4a 	bl	3e7c <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
     7e8:	f003 fc1c 	bl	4024 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
     7ec:	462a      	mov	r2, r5
     7ee:	2100      	movs	r1, #0
     7f0:	200e      	movs	r0, #14
     7f2:	f003 fb43 	bl	3e7c <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
     7f6:	4620      	mov	r0, r4
     7f8:	f003 fccb 	bl	4192 <decamutexoff>
    pdw1000local->wait4resp = 0;
     7fc:	4b03      	ldr	r3, [pc, #12]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     7fe:	681b      	ldr	r3, [r3, #0]
     800:	2200      	movs	r2, #0
     802:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
     804:	bd38      	pop	{r3, r4, r5, pc}
     806:	bf00      	nop
     808:	2427fff8 	.word	0x2427fff8
     80c:	20001678 	.word	0x20001678

00000810 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
     810:	b508      	push	{r3, lr}
    _dwt_disablesequencing();
     812:	f003 fbfc 	bl	400e <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
     816:	2200      	movs	r2, #0
     818:	4611      	mov	r1, r2
     81a:	202c      	movs	r0, #44	; 0x2c
     81c:	f003 fb1f 	bl	3e5e <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
     820:	2200      	movs	r2, #0
     822:	2106      	movs	r1, #6
     824:	202c      	movs	r0, #44	; 0x2c
     826:	f003 fb0e 	bl	3e46 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
     82a:	f003 fb52 	bl	3ed2 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
     82e:	2200      	movs	r2, #0
     830:	2103      	movs	r1, #3
     832:	2036      	movs	r0, #54	; 0x36
     834:	f003 fb07 	bl	3e46 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
     838:	2001      	movs	r0, #1
     83a:	f003 fcae 	bl	419a <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
     83e:	22f0      	movs	r2, #240	; 0xf0
     840:	2103      	movs	r1, #3
     842:	2036      	movs	r0, #54	; 0x36
     844:	f003 faff 	bl	3e46 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
     848:	4b02      	ldr	r3, [pc, #8]	; (854 <dwt_softreset+0x44>)
     84a:	681b      	ldr	r3, [r3, #0]
     84c:	2200      	movs	r2, #0
     84e:	755a      	strb	r2, [r3, #21]
}
     850:	bd08      	pop	{r3, pc}
     852:	bf00      	nop
     854:	20001678 	.word	0x20001678

00000858 <dwt_initialise>:
{
     858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
     85a:	4c5f      	ldr	r4, [pc, #380]	; (9d8 <dwt_initialise+0x180>)
     85c:	6823      	ldr	r3, [r4, #0]
     85e:	2200      	movs	r2, #0
     860:	615a      	str	r2, [r3, #20]
    pdw1000local->cbRxOk = NULL;
     862:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    pdw1000local->cbRxErr = NULL;
     866:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
{
     86a:	4605      	mov	r5, r0
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
     86c:	f003 fac9 	bl	3e02 <dwt_readdevid>
     870:	4b5a      	ldr	r3, [pc, #360]	; (9dc <dwt_initialise+0x184>)
     872:	4298      	cmp	r0, r3
     874:	f040 80a8 	bne.w	9c8 <dwt_initialise+0x170>
    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
     878:	f015 0602 	ands.w	r6, r5, #2
     87c:	f040 80a7 	bne.w	9ce <dwt_initialise+0x176>
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
     880:	f7ff ffc6 	bl	810 <dwt_softreset>
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
     884:	2000      	movs	r0, #0
     886:	f003 fb46 	bl	3f16 <_dwt_enableclocks>
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
     88a:	2204      	movs	r2, #4
     88c:	2100      	movs	r1, #0
     88e:	2024      	movs	r0, #36	; 0x24
     890:	f003 fad9 	bl	3e46 <dwt_write8bitoffsetreg>
    if(!(DWT_DW_WAKE_UP & config))
     894:	b9fe      	cbnz	r6, 8d6 <dwt_initialise+0x7e>
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
     896:	2004      	movs	r0, #4
     898:	f003 fb05 	bl	3ea6 <_dwt_otpread>
        if((ldo_tune & 0xFF) != 0)
     89c:	f010 0fff 	tst.w	r0, #255	; 0xff
     8a0:	d009      	beq.n	8b6 <dwt_initialise+0x5e>
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
     8a2:	2202      	movs	r2, #2
     8a4:	2112      	movs	r1, #18
     8a6:	202d      	movs	r0, #45	; 0x2d
     8a8:	f003 facd 	bl	3e46 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
     8ac:	6822      	ldr	r2, [r4, #0]
     8ae:	8ad3      	ldrh	r3, [r2, #22]
     8b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     8b4:	82d3      	strh	r3, [r2, #22]
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
     8b6:	201e      	movs	r0, #30
     8b8:	f003 faf5 	bl	3ea6 <_dwt_otpread>
     8bc:	b280      	uxth	r0, r0
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
     8be:	f010 0f1f 	tst.w	r0, #31
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
     8c2:	6823      	ldr	r3, [r4, #0]
     8c4:	ea4f 2210 	mov.w	r2, r0, lsr #8
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
     8c8:	bf08      	it	eq
     8ca:	2010      	moveq	r0, #16
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
     8cc:	72da      	strb	r2, [r3, #11]
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
     8ce:	b2c0      	uxtb	r0, r0
     8d0:	f003 fbe0 	bl	4094 <dwt_setxtaltrim>
     8d4:	e01a      	b.n	90c <dwt_initialise+0xb4>
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
     8d6:	2130      	movs	r1, #48	; 0x30
     8d8:	2028      	movs	r0, #40	; 0x28
     8da:	f003 fa80 	bl	3dde <dwt_read32bitoffsetreg>
     8de:	f1b0 3f88 	cmp.w	r0, #2290649224	; 0x88888888
     8e2:	d004      	beq.n	8ee <dwt_initialise+0x96>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
     8e4:	6822      	ldr	r2, [r4, #0]
     8e6:	8ad3      	ldrh	r3, [r2, #22]
     8e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     8ec:	82d3      	strh	r3, [r2, #22]
    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
     8ee:	f005 030a 	and.w	r3, r5, #10
     8f2:	2b0a      	cmp	r3, #10
     8f4:	d107      	bne.n	906 <dwt_initialise+0xae>
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
     8f6:	201e      	movs	r0, #30
     8f8:	f003 fad5 	bl	3ea6 <_dwt_otpread>
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
     8fc:	6823      	ldr	r3, [r4, #0]
     8fe:	f3c0 2007 	ubfx	r0, r0, #8, #8
     902:	72d8      	strb	r0, [r3, #11]
     904:	e002      	b.n	90c <dwt_initialise+0xb4>
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
     906:	6823      	ldr	r3, [r4, #0]
     908:	2200      	movs	r2, #0
     90a:	72da      	strb	r2, [r3, #11]
    if(DWT_READ_OTP_PID & config)
     90c:	f015 0310 	ands.w	r3, r5, #16
     910:	6827      	ldr	r7, [r4, #0]
     912:	d027      	beq.n	964 <dwt_initialise+0x10c>
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
     914:	2006      	movs	r0, #6
     916:	f003 fac6 	bl	3ea6 <_dwt_otpread>
     91a:	6038      	str	r0, [r7, #0]
    if(DWT_READ_OTP_LID & config)
     91c:	f015 0320 	ands.w	r3, r5, #32
     920:	6827      	ldr	r7, [r4, #0]
     922:	d021      	beq.n	968 <dwt_initialise+0x110>
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
     924:	2007      	movs	r0, #7
     926:	f003 fabe 	bl	3ea6 <_dwt_otpread>
     92a:	6078      	str	r0, [r7, #4]
    if(DWT_READ_OTP_BAT & config)
     92c:	f015 0240 	ands.w	r2, r5, #64	; 0x40
     930:	d01c      	beq.n	96c <dwt_initialise+0x114>
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
     932:	2008      	movs	r0, #8
     934:	f003 fab7 	bl	3ea6 <_dwt_otpread>
     938:	6823      	ldr	r3, [r4, #0]
     93a:	7218      	strb	r0, [r3, #8]
    if(DWT_READ_OTP_TMP & config)
     93c:	f015 0280 	ands.w	r2, r5, #128	; 0x80
     940:	d017      	beq.n	972 <dwt_initialise+0x11a>
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
     942:	2009      	movs	r0, #9
     944:	f003 faaf 	bl	3ea6 <_dwt_otpread>
     948:	6823      	ldr	r3, [r4, #0]
     94a:	7258      	strb	r0, [r3, #9]
    if(!(DWT_DW_WAKE_UP & config))
     94c:	2e00      	cmp	r6, #0
     94e:	d138      	bne.n	9c2 <dwt_initialise+0x16a>
        if(DWT_LOADUCODE & config)
     950:	07ea      	lsls	r2, r5, #31
     952:	d511      	bpl.n	978 <dwt_initialise+0x120>
            _dwt_loaducodefromrom();
     954:	f003 fb49 	bl	3fea <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
     958:	6822      	ldr	r2, [r4, #0]
     95a:	8ad3      	ldrh	r3, [r2, #22]
     95c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     960:	82d3      	strh	r3, [r2, #22]
     962:	e014      	b.n	98e <dwt_initialise+0x136>
        pdw1000local->partID = 0;
     964:	603b      	str	r3, [r7, #0]
     966:	e7d9      	b.n	91c <dwt_initialise+0xc4>
        pdw1000local->lotID = 0;
     968:	607b      	str	r3, [r7, #4]
     96a:	e7df      	b.n	92c <dwt_initialise+0xd4>
        pdw1000local->vBatP = 0;
     96c:	6823      	ldr	r3, [r4, #0]
     96e:	721a      	strb	r2, [r3, #8]
     970:	e7e4      	b.n	93c <dwt_initialise+0xe4>
        pdw1000local->tempP = 0;
     972:	6823      	ldr	r3, [r4, #0]
     974:	725a      	strb	r2, [r3, #9]
     976:	e7e9      	b.n	94c <dwt_initialise+0xf4>
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
     978:	2105      	movs	r1, #5
     97a:	2036      	movs	r0, #54	; 0x36
     97c:	f003 fa45 	bl	3e0a <dwt_read16bitoffsetreg>
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
     980:	f64f 52ff 	movw	r2, #65023	; 0xfdff
     984:	4002      	ands	r2, r0
     986:	2105      	movs	r1, #5
     988:	2036      	movs	r0, #54	; 0x36
     98a:	f003 fa68 	bl	3e5e <dwt_write16bitoffsetreg>
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
     98e:	2001      	movs	r0, #1
     990:	f003 fac1 	bl	3f16 <_dwt_enableclocks>
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
     994:	2200      	movs	r2, #0
     996:	210a      	movs	r1, #10
     998:	202c      	movs	r0, #44	; 0x2c
     99a:	f003 fa54 	bl	3e46 <dwt_write8bitoffsetreg>
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
     99e:	2100      	movs	r1, #0
     9a0:	2004      	movs	r0, #4
     9a2:	6825      	ldr	r5, [r4, #0]
     9a4:	f003 fa1b 	bl	3dde <dwt_read32bitoffsetreg>
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
     9a8:	6824      	ldr	r4, [r4, #0]
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
     9aa:	6128      	str	r0, [r5, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
     9ac:	8a63      	ldrh	r3, [r4, #18]
     9ae:	f003 0303 	and.w	r3, r3, #3
     9b2:	72a3      	strb	r3, [r4, #10]
    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
     9b4:	2100      	movs	r1, #0
     9b6:	2008      	movs	r0, #8
     9b8:	f003 fa11 	bl	3dde <dwt_read32bitoffsetreg>
     9bc:	60e0      	str	r0, [r4, #12]
    return DWT_SUCCESS ;
     9be:	2000      	movs	r0, #0
} // end dwt_initialise()
     9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
     9c2:	076b      	lsls	r3, r5, #29
     9c4:	d4e3      	bmi.n	98e <dwt_initialise+0x136>
     9c6:	e7c7      	b.n	958 <dwt_initialise+0x100>
        return DWT_ERROR ;
     9c8:	f04f 30ff 	mov.w	r0, #4294967295
     9cc:	e7f8      	b.n	9c0 <dwt_initialise+0x168>
    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
     9ce:	f015 0ff8 	tst.w	r5, #248	; 0xf8
     9d2:	f43f af57 	beq.w	884 <dwt_initialise+0x2c>
     9d6:	e758      	b.n	88a <dwt_initialise+0x32>
     9d8:	20001678 	.word	0x20001678
     9dc:	deca0130 	.word	0xdeca0130

000009e0 <openspi>:
 *
 * Low level abstract function to open and initialise access to the SPI device.
 * returns 0 for success, or -1 for error
 */
int openspi()
{
     9e0:	b538      	push	{r3, r4, r5, lr}
    spi_cfg = &spi_cfgs[0];
     9e2:	4c17      	ldr	r4, [pc, #92]	; (a40 <openspi+0x60>)
     9e4:	4b17      	ldr	r3, [pc, #92]	; (a44 <openspi+0x64>)

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
     9e6:	4818      	ldr	r0, [pc, #96]	; (a48 <openspi+0x68>)
     9e8:	6023      	str	r3, [r4, #0]
     9ea:	f002 fb01 	bl	2ff0 <z_impl_device_get_binding>

	spi = device_get_binding(DT_SPI_1_NAME);
     9ee:	4b17      	ldr	r3, [pc, #92]	; (a4c <openspi+0x6c>)
     9f0:	6018      	str	r0, [r3, #0]
	if (!spi) {
     9f2:	b928      	cbnz	r0, a00 <openspi+0x20>
		printk("Could not find SPI driver\n");
     9f4:	4816      	ldr	r0, [pc, #88]	; (a50 <openspi+0x70>)
     9f6:	f003 fdb6 	bl	4566 <printk>
		return -1;
     9fa:	f04f 30ff 	mov.w	r0, #4294967295
	tx.buffers = &bufs[0];
	rx.buffers = &bufs[1];
	tx.count = 1;
	rx.count = 1;
    return 0;
} // end openspi()
     9fe:	bd38      	pop	{r3, r4, r5, pc}
	spi_cfg->operation = SPI_WORD_SET(8);
     a00:	6823      	ldr	r3, [r4, #0]
	memset(&tx_buf[0], 0, 255);
     a02:	4d14      	ldr	r5, [pc, #80]	; (a54 <openspi+0x74>)
	memset(&rx_buf[0], 0, 255);
     a04:	4c14      	ldr	r4, [pc, #80]	; (a58 <openspi+0x78>)
	spi_cfg->operation = SPI_WORD_SET(8);
     a06:	f44f 7280 	mov.w	r2, #256	; 0x100
     a0a:	809a      	strh	r2, [r3, #4]
	spi_cfg->frequency = 2000000;
     a0c:	4a13      	ldr	r2, [pc, #76]	; (a5c <openspi+0x7c>)
     a0e:	601a      	str	r2, [r3, #0]
	memset(&tx_buf[0], 0, 255);
     a10:	2100      	movs	r1, #0
     a12:	22ff      	movs	r2, #255	; 0xff
     a14:	4628      	mov	r0, r5
     a16:	f003 fe9f 	bl	4758 <memset>
	memset(&rx_buf[0], 0, 255);
     a1a:	22ff      	movs	r2, #255	; 0xff
     a1c:	2100      	movs	r1, #0
     a1e:	4620      	mov	r0, r4
     a20:	f003 fe9a 	bl	4758 <memset>
	bufs[0].buf = &tx_buf[0];
     a24:	4b0e      	ldr	r3, [pc, #56]	; (a60 <openspi+0x80>)
	tx.buffers = &bufs[0];
     a26:	490f      	ldr	r1, [pc, #60]	; (a64 <openspi+0x84>)
	rx.buffers = &bufs[1];
     a28:	4a0f      	ldr	r2, [pc, #60]	; (a68 <openspi+0x88>)
	bufs[0].buf = &tx_buf[0];
     a2a:	601d      	str	r5, [r3, #0]
	bufs[1].buf = &rx_buf[0];	
     a2c:	609c      	str	r4, [r3, #8]
	tx.buffers = &bufs[0];
     a2e:	600b      	str	r3, [r1, #0]
	rx.buffers = &bufs[1];
     a30:	3308      	adds	r3, #8
     a32:	6013      	str	r3, [r2, #0]
	tx.count = 1;
     a34:	2301      	movs	r3, #1
     a36:	604b      	str	r3, [r1, #4]
	rx.count = 1;
     a38:	6053      	str	r3, [r2, #4]
    return 0;
     a3a:	2000      	movs	r0, #0
     a3c:	e7df      	b.n	9fe <openspi+0x1e>
     a3e:	bf00      	nop
     a40:	2000005c 	.word	0x2000005c
     a44:	20000060 	.word	0x20000060
     a48:	00005232 	.word	0x00005232
     a4c:	20000058 	.word	0x20000058
     a50:	00005238 	.word	0x00005238
     a54:	20000422 	.word	0x20000422
     a58:	20000323 	.word	0x20000323
     a5c:	001e8480 	.word	0x001e8480
     a60:	20000040 	.word	0x20000040
     a64:	20000090 	.word	0x20000090
     a68:	20000050 	.word	0x20000050

00000a6c <set_spi_speed_slow>:

int set_spi_speed_slow()
{
     a6c:	b508      	push	{r3, lr}
	spi_cfg = &spi_cfgs[0];
     a6e:	4a0a      	ldr	r2, [pc, #40]	; (a98 <set_spi_speed_slow+0x2c>)
     a70:	4b0a      	ldr	r3, [pc, #40]	; (a9c <set_spi_speed_slow+0x30>)
     a72:	6013      	str	r3, [r2, #0]
	spi_cfg->operation = SPI_WORD_SET(8);
     a74:	f44f 7280 	mov.w	r2, #256	; 0x100
     a78:	809a      	strh	r2, [r3, #4]
	spi_cfg->frequency = 2000000;
     a7a:	4a09      	ldr	r2, [pc, #36]	; (aa0 <set_spi_speed_slow+0x34>)
     a7c:	601a      	str	r2, [r3, #0]

	memset(&tx_buf[0], 0, 255);
     a7e:	2100      	movs	r1, #0
     a80:	22ff      	movs	r2, #255	; 0xff
     a82:	4808      	ldr	r0, [pc, #32]	; (aa4 <set_spi_speed_slow+0x38>)
     a84:	f003 fe68 	bl	4758 <memset>
	memset(&rx_buf[0], 0, 255);
     a88:	22ff      	movs	r2, #255	; 0xff
     a8a:	2100      	movs	r1, #0
     a8c:	4806      	ldr	r0, [pc, #24]	; (aa8 <set_spi_speed_slow+0x3c>)
}
     a8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&rx_buf[0], 0, 255);
     a92:	f003 be61 	b.w	4758 <memset>
     a96:	bf00      	nop
     a98:	2000005c 	.word	0x2000005c
     a9c:	20000060 	.word	0x20000060
     aa0:	001e8480 	.word	0x001e8480
     aa4:	20000422 	.word	0x20000422
     aa8:	20000323 	.word	0x20000323

00000aac <set_spi_speed_fast>:

int set_spi_speed_fast()
{
     aac:	b508      	push	{r3, lr}
	spi_cfg = &spi_cfgs[1];
     aae:	4b0b      	ldr	r3, [pc, #44]	; (adc <set_spi_speed_fast+0x30>)
     ab0:	4a0b      	ldr	r2, [pc, #44]	; (ae0 <set_spi_speed_fast+0x34>)
	spi_cfg->operation = SPI_WORD_SET(8);
	spi_cfg->frequency = 8000000;

	memset(&tx_buf[0], 0, 255);
     ab2:	480c      	ldr	r0, [pc, #48]	; (ae4 <set_spi_speed_fast+0x38>)
	spi_cfg = &spi_cfgs[1];
     ab4:	f103 010c 	add.w	r1, r3, #12
     ab8:	6011      	str	r1, [r2, #0]
	spi_cfg->operation = SPI_WORD_SET(8);
     aba:	f44f 7280 	mov.w	r2, #256	; 0x100
     abe:	821a      	strh	r2, [r3, #16]
	spi_cfg->frequency = 8000000;
     ac0:	4a09      	ldr	r2, [pc, #36]	; (ae8 <set_spi_speed_fast+0x3c>)
     ac2:	60da      	str	r2, [r3, #12]
	memset(&tx_buf[0], 0, 255);
     ac4:	2100      	movs	r1, #0
     ac6:	22ff      	movs	r2, #255	; 0xff
     ac8:	f003 fe46 	bl	4758 <memset>
	memset(&rx_buf[0], 0, 255);
     acc:	22ff      	movs	r2, #255	; 0xff
     ace:	2100      	movs	r1, #0
     ad0:	4806      	ldr	r0, [pc, #24]	; (aec <set_spi_speed_fast+0x40>)
}
     ad2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&rx_buf[0], 0, 255);
     ad6:	f003 be3f 	b.w	4758 <memset>
     ada:	bf00      	nop
     adc:	20000060 	.word	0x20000060
     ae0:	2000005c 	.word	0x2000005c
     ae4:	20000422 	.word	0x20000422
     ae8:	007a1200 	.word	0x007a1200
     aec:	20000323 	.word	0x20000323

00000af0 <writetospi>:
 */
int writetospi(uint16 headerLength,
               const    uint8 *headerBuffer,
               uint32 bodyLength,
               const    uint8 *bodyBuffer)
{
     af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     af4:	4698      	mov	r8, r3
     af6:	4615      	mov	r5, r2
     af8:	4604      	mov	r4, r0
     afa:	4689      	mov	r9, r1
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
     afc:	f003 fb40 	bl	4180 <decamutexon>

	memcpy(&tx_buf[0], headerBuffer, headerLength);
     b00:	4e0f      	ldr	r6, [pc, #60]	; (b40 <writetospi+0x50>)
    stat = decamutexon() ;
     b02:	4607      	mov	r7, r0
	memcpy(&tx_buf[0], headerBuffer, headerLength);
     b04:	4622      	mov	r2, r4
     b06:	4649      	mov	r1, r9
     b08:	4630      	mov	r0, r6
     b0a:	f003 fdf8 	bl	46fe <memcpy>
	memcpy(&tx_buf[headerLength], bodyBuffer, bodyLength);
     b0e:	462a      	mov	r2, r5
     b10:	4641      	mov	r1, r8
     b12:	1930      	adds	r0, r6, r4
     b14:	f003 fdf3 	bl	46fe <memcpy>

    bufs[0].len = headerLength+bodyLength;
     b18:	4b0a      	ldr	r3, [pc, #40]	; (b44 <writetospi+0x54>)
				       const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->driver_api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
     b1a:	490b      	ldr	r1, [pc, #44]	; (b48 <writetospi+0x58>)
     b1c:	4a0b      	ldr	r2, [pc, #44]	; (b4c <writetospi+0x5c>)
     b1e:	6809      	ldr	r1, [r1, #0]
     b20:	442c      	add	r4, r5
     b22:	605c      	str	r4, [r3, #4]
    bufs[1].len = headerLength+bodyLength;
     b24:	60dc      	str	r4, [r3, #12]

    spi_transceive(spi, spi_cfg, &tx, &rx);
     b26:	4b0a      	ldr	r3, [pc, #40]	; (b50 <writetospi+0x60>)
     b28:	6818      	ldr	r0, [r3, #0]
     b2a:	6843      	ldr	r3, [r0, #4]
     b2c:	681c      	ldr	r4, [r3, #0]
     b2e:	4b09      	ldr	r3, [pc, #36]	; (b54 <writetospi+0x64>)
     b30:	47a0      	blx	r4
    decamutexoff(stat);
     b32:	4638      	mov	r0, r7
     b34:	f003 fb2d 	bl	4192 <decamutexoff>

    return 0;
} // end writetospi()
     b38:	2000      	movs	r0, #0
     b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     b3e:	bf00      	nop
     b40:	20000422 	.word	0x20000422
     b44:	20000040 	.word	0x20000040
     b48:	2000005c 	.word	0x2000005c
     b4c:	20000090 	.word	0x20000090
     b50:	20000058 	.word	0x20000058
     b54:	20000050 	.word	0x20000050

00000b58 <readfromspi>:
 */
int readfromspi(uint16 headerLength,
                const uint8 *headerBuffer,
                uint32 readlength,
                uint8 *readBuffer)
{
     b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     b5c:	4699      	mov	r9, r3
     b5e:	4604      	mov	r4, r0
     b60:	4616      	mov	r6, r2
     b62:	468a      	mov	sl, r1
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
     b64:	f003 fb0c 	bl	4180 <decamutexon>

	memset(&tx_buf[0], 0, headerLength+readlength);
     b68:	4f12      	ldr	r7, [pc, #72]	; (bb4 <readfromspi+0x5c>)
     b6a:	19a5      	adds	r5, r4, r6
    stat = decamutexon() ;
     b6c:	4680      	mov	r8, r0
	memset(&tx_buf[0], 0, headerLength+readlength);
     b6e:	462a      	mov	r2, r5
     b70:	2100      	movs	r1, #0
     b72:	4638      	mov	r0, r7
     b74:	f003 fdf0 	bl	4758 <memset>
	memcpy(&tx_buf[0], headerBuffer, headerLength);
     b78:	4622      	mov	r2, r4
     b7a:	4651      	mov	r1, sl
     b7c:	4638      	mov	r0, r7
     b7e:	f003 fdbe 	bl	46fe <memcpy>

    bufs[0].len = headerLength+readlength;
     b82:	4b0d      	ldr	r3, [pc, #52]	; (bb8 <readfromspi+0x60>)
     b84:	490d      	ldr	r1, [pc, #52]	; (bbc <readfromspi+0x64>)
     b86:	605d      	str	r5, [r3, #4]
    bufs[1].len = headerLength+readlength;
     b88:	60dd      	str	r5, [r3, #12]
    spi_transceive(spi, spi_cfg, &tx, &rx);
     b8a:	4b0d      	ldr	r3, [pc, #52]	; (bc0 <readfromspi+0x68>)
     b8c:	4a0d      	ldr	r2, [pc, #52]	; (bc4 <readfromspi+0x6c>)
     b8e:	6818      	ldr	r0, [r3, #0]
     b90:	6809      	ldr	r1, [r1, #0]
     b92:	6843      	ldr	r3, [r0, #4]
     b94:	681d      	ldr	r5, [r3, #0]
     b96:	4b0c      	ldr	r3, [pc, #48]	; (bc8 <readfromspi+0x70>)
     b98:	47a8      	blx	r5

	memcpy(readBuffer, rx_buf+headerLength, readlength);
     b9a:	490c      	ldr	r1, [pc, #48]	; (bcc <readfromspi+0x74>)
     b9c:	4632      	mov	r2, r6
     b9e:	4421      	add	r1, r4
     ba0:	4648      	mov	r0, r9
     ba2:	f003 fdac 	bl	46fe <memcpy>

    decamutexoff(stat);
     ba6:	4640      	mov	r0, r8
     ba8:	f003 faf3 	bl	4192 <decamutexoff>

    return 0;
} // end readfromspi()
     bac:	2000      	movs	r0, #0
     bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     bb2:	bf00      	nop
     bb4:	20000422 	.word	0x20000422
     bb8:	20000040 	.word	0x20000040
     bbc:	2000005c 	.word	0x2000005c
     bc0:	20000058 	.word	0x20000058
     bc4:	20000090 	.word	0x20000090
     bc8:	20000050 	.word	0x20000050
     bcc:	20000323 	.word	0x20000323

00000bd0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     bd0:	680b      	ldr	r3, [r1, #0]
     bd2:	3301      	adds	r3, #1
     bd4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     bd6:	4b01      	ldr	r3, [pc, #4]	; (bdc <char_out+0xc>)
     bd8:	681b      	ldr	r3, [r3, #0]
     bda:	4718      	bx	r3
     bdc:	2000167c 	.word	0x2000167c

00000be0 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     be4:	b085      	sub	sp, #20
     be6:	469b      	mov	fp, r3
     be8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     bea:	f8df a090 	ldr.w	sl, [pc, #144]	; c7c <_printk_dec_ulong+0x9c>
     bee:	2c01      	cmp	r4, #1
     bf0:	bfb8      	it	lt
     bf2:	2401      	movlt	r4, #1
     bf4:	2b01      	cmp	r3, #1
     bf6:	bf0c      	ite	eq
     bf8:	2330      	moveq	r3, #48	; 0x30
     bfa:	2320      	movne	r3, #32
     bfc:	4615      	mov	r5, r2
     bfe:	4680      	mov	r8, r0
     c00:	4689      	mov	r9, r1
     c02:	9401      	str	r4, [sp, #4]
     c04:	9302      	str	r3, [sp, #8]
     c06:	2601      	movs	r6, #1
     c08:	270a      	movs	r7, #10
     c0a:	2200      	movs	r2, #0
     c0c:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit != 0 || remainder > pos) {
     c10:	b90a      	cbnz	r2, c16 <_printk_dec_ulong+0x36>
     c12:	45aa      	cmp	sl, r5
     c14:	d21f      	bcs.n	c56 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     c16:	fbb5 f0f4 	udiv	r0, r5, r4
     c1a:	4649      	mov	r1, r9
     c1c:	3030      	adds	r0, #48	; 0x30
     c1e:	47c0      	blx	r8
			digits++;
     c20:	3601      	adds	r6, #1
			found_largest_digit = 1;
     c22:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     c24:	3f01      	subs	r7, #1
	while (pos >= 9) {
     c26:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     c28:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     c2c:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     c30:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     c34:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     c38:	d1e8      	bne.n	c0c <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c3a:	4649      	mov	r1, r9
     c3c:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c40:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     c42:	f1bb 0f03 	cmp.w	fp, #3
     c46:	d103      	bne.n	c50 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     c48:	9b01      	ldr	r3, [sp, #4]
     c4a:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     c4c:	2c00      	cmp	r4, #0
     c4e:	dc0f      	bgt.n	c70 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     c50:	b005      	add	sp, #20
     c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     c56:	9b01      	ldr	r3, [sp, #4]
     c58:	42bb      	cmp	r3, r7
     c5a:	dbe3      	blt.n	c24 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     c5c:	f1bb 0f02 	cmp.w	fp, #2
     c60:	d8e0      	bhi.n	c24 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     c62:	4649      	mov	r1, r9
     c64:	9802      	ldr	r0, [sp, #8]
     c66:	9203      	str	r2, [sp, #12]
			digits++;
     c68:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     c6a:	47c0      	blx	r8
			digits++;
     c6c:	9a03      	ldr	r2, [sp, #12]
     c6e:	e7d9      	b.n	c24 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     c70:	4649      	mov	r1, r9
     c72:	2020      	movs	r0, #32
     c74:	47c0      	blx	r8
     c76:	3c01      	subs	r4, #1
     c78:	e7e8      	b.n	c4c <_printk_dec_ulong+0x6c>
     c7a:	bf00      	nop
     c7c:	3b9ac9ff 	.word	0x3b9ac9ff

00000c80 <__printk_hook_install>:
	_char_out = fn;
     c80:	4b01      	ldr	r3, [pc, #4]	; (c88 <__printk_hook_install+0x8>)
     c82:	6018      	str	r0, [r3, #0]
}
     c84:	4770      	bx	lr
     c86:	bf00      	nop
     c88:	2000167c 	.word	0x2000167c

00000c8c <vprintk>:
{
     c8c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     c8e:	ac02      	add	r4, sp, #8
     c90:	2300      	movs	r3, #0
     c92:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     c96:	4602      	mov	r2, r0
     c98:	460b      	mov	r3, r1
     c9a:	4803      	ldr	r0, [pc, #12]	; (ca8 <vprintk+0x1c>)
     c9c:	4621      	mov	r1, r4
     c9e:	f003 fb06 	bl	42ae <_vprintk>
}
     ca2:	b002      	add	sp, #8
     ca4:	bd10      	pop	{r4, pc}
     ca6:	bf00      	nop
     ca8:	00000bd1 	.word	0x00000bd1

00000cac <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set((uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     cac:	b510      	push	{r4, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     cae:	f04f 0320 	mov.w	r3, #32
     cb2:	f3ef 8411 	mrs	r4, BASEPRI
     cb6:	f383 8811 	msr	BASEPRI, r3
     cba:	f3bf 8f6f 	isb	sy

	ARG_UNUSED(arg);

	key = irq_lock();

	SystemInit();
     cbe:	f000 f85b 	bl	d78 <SystemInit>

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     cc2:	4a09      	ldr	r2, [pc, #36]	; (ce8 <nordicsemi_nrf52_init+0x3c>)
     cc4:	2301      	movs	r3, #1
     cc6:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
     cca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     cce:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     cd2:	4b06      	ldr	r3, [pc, #24]	; (cec <nordicsemi_nrf52_init+0x40>)
     cd4:	f04f 32ff 	mov.w	r2, #4294967295
     cd8:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     cda:	62da      	str	r2, [r3, #44]	; 0x2c
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     cdc:	f384 8811 	msr	BASEPRI, r4
     ce0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     ce4:	2000      	movs	r0, #0
     ce6:	bd10      	pop	{r4, pc}
     ce8:	4001e000 	.word	0x4001e000
     cec:	e000ed00 	.word	0xe000ed00

00000cf0 <z_arch_busy_wait>:
#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)


__STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     cf0:	b120      	cbz	r0, cfc <z_arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     cf2:	4b03      	ldr	r3, [pc, #12]	; (d00 <z_arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
     cf4:	0180      	lsls	r0, r0, #6
     cf6:	f043 0301 	orr.w	r3, r3, #1
     cfa:	4718      	bx	r3

void z_arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     cfc:	4770      	bx	lr
     cfe:	bf00      	nop
     d00:	000050b0 	.word	0x000050b0

00000d04 <errata_108>:
}


static bool errata_12(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     d04:	4b0c      	ldr	r3, [pc, #48]	; (d38 <errata_108+0x34>)
     d06:	781b      	ldrb	r3, [r3, #0]
     d08:	2b06      	cmp	r3, #6
     d0a:	d110      	bne.n	d2e <errata_108+0x2a>
     d0c:	4b0b      	ldr	r3, [pc, #44]	; (d3c <errata_108+0x38>)
     d0e:	681b      	ldr	r3, [r3, #0]
     d10:	071a      	lsls	r2, r3, #28
     d12:	d10c      	bne.n	d2e <errata_108+0x2a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     d14:	4b0a      	ldr	r3, [pc, #40]	; (d40 <errata_108+0x3c>)
     d16:	6818      	ldr	r0, [r3, #0]
     d18:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
     d1c:	2b30      	cmp	r3, #48	; 0x30
     d1e:	d008      	beq.n	d32 <errata_108+0x2e>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     d20:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
     d24:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
     d28:	4258      	negs	r0, r3
     d2a:	4158      	adcs	r0, r3
     d2c:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     d2e:	2000      	movs	r0, #0
     d30:	4770      	bx	lr
            return true;
     d32:	2001      	movs	r0, #1
}
     d34:	4770      	bx	lr
     d36:	bf00      	nop
     d38:	f0000fe0 	.word	0xf0000fe0
     d3c:	f0000fe4 	.word	0xf0000fe4
     d40:	f0000fe8 	.word	0xf0000fe8

00000d44 <errata_16>:

static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     d44:	4b09      	ldr	r3, [pc, #36]	; (d6c <errata_16+0x28>)
     d46:	781b      	ldrb	r3, [r3, #0]
     d48:	2b06      	cmp	r3, #6
     d4a:	d10c      	bne.n	d66 <errata_16+0x22>
     d4c:	4b08      	ldr	r3, [pc, #32]	; (d70 <errata_16+0x2c>)
     d4e:	681b      	ldr	r3, [r3, #0]
     d50:	071a      	lsls	r2, r3, #28
     d52:	d108      	bne.n	d66 <errata_16+0x22>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     d54:	4b07      	ldr	r3, [pc, #28]	; (d74 <errata_16+0x30>)
     d56:	6818      	ldr	r0, [r3, #0]
     d58:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
     d5c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     d60:	4258      	negs	r0, r3
     d62:	4158      	adcs	r0, r3
     d64:	4770      	bx	lr
            return true;
        }
    }

    return false;
     d66:	2000      	movs	r0, #0
}
     d68:	4770      	bx	lr
     d6a:	bf00      	nop
     d6c:	f0000fe0 	.word	0xf0000fe0
     d70:	f0000fe4 	.word	0xf0000fe4
     d74:	f0000fe8 	.word	0xf0000fe8

00000d78 <SystemInit>:
{
     d78:	b508      	push	{r3, lr}
    if (errata_12()){
     d7a:	f7ff ffc3 	bl	d04 <errata_108>
     d7e:	b128      	cbz	r0, d8c <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
     d80:	4b78      	ldr	r3, [pc, #480]	; (f64 <SystemInit+0x1ec>)
     d82:	4a79      	ldr	r2, [pc, #484]	; (f68 <SystemInit+0x1f0>)
     d84:	681b      	ldr	r3, [r3, #0]
     d86:	f3c3 2304 	ubfx	r3, r3, #8, #5
     d8a:	6013      	str	r3, [r2, #0]
    if (errata_16()){
     d8c:	f7ff ffda 	bl	d44 <errata_16>
     d90:	b110      	cbz	r0, d98 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
     d92:	4b76      	ldr	r3, [pc, #472]	; (f6c <SystemInit+0x1f4>)
     d94:	4a76      	ldr	r2, [pc, #472]	; (f70 <SystemInit+0x1f8>)
     d96:	601a      	str	r2, [r3, #0]
    if (errata_31()){
     d98:	f7ff ffb4 	bl	d04 <errata_108>
     d9c:	b128      	cbz	r0, daa <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
     d9e:	4b75      	ldr	r3, [pc, #468]	; (f74 <SystemInit+0x1fc>)
     da0:	4a75      	ldr	r2, [pc, #468]	; (f78 <SystemInit+0x200>)
     da2:	681b      	ldr	r3, [r3, #0]
     da4:	f3c3 3342 	ubfx	r3, r3, #13, #3
     da8:	6013      	str	r3, [r2, #0]
    if (errata_32()){
     daa:	f7ff ffcb 	bl	d44 <errata_16>
     dae:	b120      	cbz	r0, dba <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     db0:	4a72      	ldr	r2, [pc, #456]	; (f7c <SystemInit+0x204>)
     db2:	68d3      	ldr	r3, [r2, #12]
     db4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     db8:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
     dba:	f7ff ffa3 	bl	d04 <errata_108>
     dbe:	b140      	cbz	r0, dd2 <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
     dc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     dc4:	2200      	movs	r2, #0
     dc6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
     dca:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
     dce:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
     dd2:	f7ff ffb7 	bl	d44 <errata_16>
     dd6:	b110      	cbz	r0, dde <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
     dd8:	4b69      	ldr	r3, [pc, #420]	; (f80 <SystemInit+0x208>)
     dda:	2203      	movs	r2, #3
     ddc:	601a      	str	r2, [r3, #0]
    if (errata_57()){
     dde:	f7ff ffb1 	bl	d44 <errata_16>
     de2:	b140      	cbz	r0, df6 <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
     de4:	4b67      	ldr	r3, [pc, #412]	; (f84 <SystemInit+0x20c>)
     de6:	2205      	movs	r2, #5
     de8:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
     dea:	2201      	movs	r2, #1
     dec:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
     dee:	2200      	movs	r2, #0
     df0:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
     df2:	223f      	movs	r2, #63	; 0x3f
     df4:	605a      	str	r2, [r3, #4]
    return false;
}

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     df6:	4b64      	ldr	r3, [pc, #400]	; (f88 <SystemInit+0x210>)
     df8:	781b      	ldrb	r3, [r3, #0]
     dfa:	2b06      	cmp	r3, #6
     dfc:	d150      	bne.n	ea0 <SystemInit+0x128>
     dfe:	4b63      	ldr	r3, [pc, #396]	; (f8c <SystemInit+0x214>)
     e00:	681b      	ldr	r3, [r3, #0]
     e02:	0719      	lsls	r1, r3, #28
     e04:	d14c      	bne.n	ea0 <SystemInit+0x128>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     e06:	4b62      	ldr	r3, [pc, #392]	; (f90 <SystemInit+0x218>)
     e08:	681b      	ldr	r3, [r3, #0]
     e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     e0e:	2b50      	cmp	r3, #80	; 0x50
     e10:	d146      	bne.n	ea0 <SystemInit+0x128>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
     e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     e16:	4b5f      	ldr	r3, [pc, #380]	; (f94 <SystemInit+0x21c>)
     e18:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
     e1c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
     e20:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
     e24:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
     e28:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
     e2c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
     e30:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
     e34:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
     e38:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
     e3c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
     e40:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
     e44:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
     e48:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
     e4c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
     e50:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
     e54:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
     e58:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
     e5c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
     e60:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
     e64:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
     e68:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
     e6c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
     e70:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
     e74:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
     e78:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
     e7c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
     e80:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
     e84:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
     e88:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
     e8c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
     e90:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
     e94:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
     e98:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
     e9c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
     ea0:	f7ff ff30 	bl	d04 <errata_108>
     ea4:	b128      	cbz	r0, eb2 <SystemInit+0x13a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
     ea6:	4b3c      	ldr	r3, [pc, #240]	; (f98 <SystemInit+0x220>)
     ea8:	4a3c      	ldr	r2, [pc, #240]	; (f9c <SystemInit+0x224>)
     eaa:	681b      	ldr	r3, [r3, #0]
     eac:	f003 034f 	and.w	r3, r3, #79	; 0x4f
     eb0:	6013      	str	r3, [r2, #0]
    if (errata_136()){
     eb2:	f7ff ff27 	bl	d04 <errata_108>
     eb6:	b148      	cbz	r0, ecc <SystemInit+0x154>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
     eb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     ebc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     ec0:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
     ec2:	bf44      	itt	mi
     ec4:	f06f 0201 	mvnmi.w	r2, #1
     ec8:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
}


static bool errata_182(void)
{
    if (*(uint32_t *)0x10000130ul == 0x6ul){
     ecc:	4b34      	ldr	r3, [pc, #208]	; (fa0 <SystemInit+0x228>)
     ece:	681b      	ldr	r3, [r3, #0]
     ed0:	2b06      	cmp	r3, #6
     ed2:	d108      	bne.n	ee6 <SystemInit+0x16e>
        if (*(uint32_t *)0x10000134ul == 0x6ul){
     ed4:	4b33      	ldr	r3, [pc, #204]	; (fa4 <SystemInit+0x22c>)
     ed6:	681b      	ldr	r3, [r3, #0]
     ed8:	2b06      	cmp	r3, #6
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
     eda:	bf01      	itttt	eq
     edc:	4a32      	ldreq	r2, [pc, #200]	; (fa8 <SystemInit+0x230>)
     ede:	6813      	ldreq	r3, [r2, #0]
     ee0:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
     ee4:	6013      	streq	r3, [r2, #0]
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     ee6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     eea:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     eee:	2a00      	cmp	r2, #0
     ef0:	db03      	blt.n	efa <SystemInit+0x182>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
     ef2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     ef6:	2b00      	cmp	r3, #0
     ef8:	da2f      	bge.n	f5a <SystemInit+0x1e2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     efa:	4b2c      	ldr	r3, [pc, #176]	; (fac <SystemInit+0x234>)
     efc:	2201      	movs	r2, #1
     efe:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     f02:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     f06:	2a00      	cmp	r2, #0
     f08:	d0fb      	beq.n	f02 <SystemInit+0x18a>
            NRF_UICR->PSELRESET[0] = 21;
     f0a:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     f0e:	2115      	movs	r1, #21
     f10:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     f14:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     f18:	2a00      	cmp	r2, #0
     f1a:	d0fb      	beq.n	f14 <SystemInit+0x19c>
            NRF_UICR->PSELRESET[1] = 21;
     f1c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     f20:	2215      	movs	r2, #21
     f22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     f26:	4b21      	ldr	r3, [pc, #132]	; (fac <SystemInit+0x234>)
     f28:	461a      	mov	r2, r3
     f2a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     f2e:	2900      	cmp	r1, #0
     f30:	d0fb      	beq.n	f2a <SystemInit+0x1b2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     f32:	2100      	movs	r1, #0
     f34:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     f38:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     f3c:	2b00      	cmp	r3, #0
     f3e:	d0fb      	beq.n	f38 <SystemInit+0x1c0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     f40:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     f44:	491a      	ldr	r1, [pc, #104]	; (fb0 <SystemInit+0x238>)
     f46:	4b1b      	ldr	r3, [pc, #108]	; (fb4 <SystemInit+0x23c>)
     f48:	68ca      	ldr	r2, [r1, #12]
     f4a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     f4e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     f50:	60cb      	str	r3, [r1, #12]
     f52:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     f56:	bf00      	nop
     f58:	e7fd      	b.n	f56 <SystemInit+0x1de>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
     f5a:	4b17      	ldr	r3, [pc, #92]	; (fb8 <SystemInit+0x240>)
     f5c:	4a17      	ldr	r2, [pc, #92]	; (fbc <SystemInit+0x244>)
     f5e:	601a      	str	r2, [r3, #0]
}
     f60:	bd08      	pop	{r3, pc}
     f62:	bf00      	nop
     f64:	10000324 	.word	0x10000324
     f68:	40013540 	.word	0x40013540
     f6c:	4007c074 	.word	0x4007c074
     f70:	baadf00d 	.word	0xbaadf00d
     f74:	10000244 	.word	0x10000244
     f78:	4000053c 	.word	0x4000053c
     f7c:	e000edf0 	.word	0xe000edf0
     f80:	400005a0 	.word	0x400005a0
     f84:	40005610 	.word	0x40005610
     f88:	f0000fe0 	.word	0xf0000fe0
     f8c:	f0000fe4 	.word	0xf0000fe4
     f90:	f0000fe8 	.word	0xf0000fe8
     f94:	4000c000 	.word	0x4000c000
     f98:	10000258 	.word	0x10000258
     f9c:	40000ee4 	.word	0x40000ee4
     fa0:	10000130 	.word	0x10000130
     fa4:	10000134 	.word	0x10000134
     fa8:	4000173c 	.word	0x4000173c
     fac:	4001e000 	.word	0x4001e000
     fb0:	e000ed00 	.word	0xe000ed00
     fb4:	05fa0004 	.word	0x05fa0004
     fb8:	20001680 	.word	0x20001680
     fbc:	03d09000 	.word	0x03d09000

00000fc0 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t  const * const p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void                     * p_context)
{
     fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
     fc4:	7904      	ldrb	r4, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
     fc6:	4d4f      	ldr	r5, [pc, #316]	; (1104 <nrfx_spim_init+0x144>)
{
     fc8:	4694      	mov	ip, r2
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
     fca:	2224      	movs	r2, #36	; 0x24
     fcc:	4362      	muls	r2, r4
     fce:	18ae      	adds	r6, r5, r2
     fd0:	7f37      	ldrb	r7, [r6, #28]
     fd2:	2f00      	cmp	r7, #0
     fd4:	f040 8093 	bne.w	10fe <nrfx_spim_init+0x13e>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif

    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
     fd8:	6800      	ldr	r0, [r0, #0]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
     fda:	f845 c002 	str.w	ip, [r5, r2]
    p_cb->p_context = p_context;
     fde:	6073      	str	r3, [r6, #4]
     fe0:	f891 e000 	ldrb.w	lr, [r1]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPIM_MODE_1)
     fe4:	7b0f      	ldrb	r7, [r1, #12]
     fe6:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
     fea:	2301      	movs	r3, #1
     fec:	fa03 f30e 	lsl.w	r3, r3, lr
     ff0:	2f01      	cmp	r7, #1
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
     ff2:	bf94      	ite	ls
     ff4:	f8c6 350c 	strls.w	r3, [r6, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
     ff8:	f8c6 3508 	strhi.w	r3, [r6, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
     ffc:	f50e 73e0 	add.w	r3, lr, #448	; 0x1c0
    1000:	2201      	movs	r2, #1
    1002:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    1006:	784b      	ldrb	r3, [r1, #1]
    1008:	2bff      	cmp	r3, #255	; 0xff
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    100a:	bf1f      	itttt	ne
    100c:	409a      	lslne	r2, r3
    p_reg->OUTCLR = clr_mask;
    100e:	f8c6 250c 	strne.w	r2, [r6, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1012:	f503 72e0 	addne.w	r2, r3, #448	; 0x1c0
    1016:	f04f 0803 	movne.w	r8, #3
    101a:	bf18      	it	ne
    101c:	f846 8022 	strne.w	r8, [r6, r2, lsl #2]
    else
    {
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    1020:	788e      	ldrb	r6, [r1, #2]
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    1022:	bf08      	it	eq
    1024:	f04f 33ff 	moveq.w	r3, #4294967295
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    1028:	2eff      	cmp	r6, #255	; 0xff
    102a:	bf1f      	itttt	ne
    102c:	f506 72e0 	addne.w	r2, r6, #448	; 0x1c0
    1030:	f04f 49a0 	movne.w	r9, #1342177280	; 0x50000000
    1034:	f04f 0a04 	movne.w	sl, #4
    1038:	f849 a022 	strne.w	sl, [r9, r2, lsl #2]
    }
    else
    {
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    p_cb->miso_pin = p_config->miso_pin;
    103c:	f04f 0224 	mov.w	r2, #36	; 0x24
    1040:	fb02 5204 	mla	r2, r2, r4, r5
        miso_pin = p_config->miso_pin;
    1044:	bf18      	it	ne
    1046:	46b0      	movne	r8, r6
    p_cb->miso_pin = p_config->miso_pin;
    1048:	f882 6020 	strb.w	r6, [r2, #32]
    // - Slave Select (optional) - output with initial value 1 (inactive).

    // 'p_cb->ss_pin' variable is used during transfers to check if SS pin should be toggled,
    // so this field needs to be initialized even if the pin is not used.
    p_cb->ss_pin = p_config->ss_pin;
    104c:	78ce      	ldrb	r6, [r1, #3]
    104e:	77d6      	strb	r6, [r2, #31]
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    1050:	bf08      	it	eq
    1052:	f04f 38ff 	moveq.w	r8, #4294967295

    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    1056:	2eff      	cmp	r6, #255	; 0xff
    1058:	d014      	beq.n	1084 <nrfx_spim_init+0xc4>
    {
        if (p_config->ss_active_high)
    105a:	f891 9004 	ldrb.w	r9, [r1, #4]
    105e:	2201      	movs	r2, #1
    1060:	40b2      	lsls	r2, r6
    1062:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
    1066:	f1b9 0f00 	cmp.w	r9, #0
    106a:	d03f      	beq.n	10ec <nrfx_spim_init+0x12c>
    p_reg->OUTCLR = clr_mask;
    106c:	f8ca 250c 	str.w	r2, [sl, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1070:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    1074:	2203      	movs	r2, #3
    1076:	f84a 2026 	str.w	r2, [sl, r6, lsl #2]
                                   (p_config->ss_active_high == true ?
                                        NRF_SPIM_CSN_POL_HIGH : NRF_SPIM_CSN_POL_LOW),
                                   p_config->ss_duration);
        }
#endif
        p_cb->ss_active_high = p_config->ss_active_high;
    107a:	2224      	movs	r2, #36	; 0x24
    107c:	fb02 5204 	mla	r2, r2, r4, r5
    1080:	f882 901e 	strb.w	r9, [r2, #30]
__STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                       uint32_t sck_pin,
                                       uint32_t mosi_pin,
                                       uint32_t miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
    1084:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
    1088:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
#endif // defined(SPIM_STALLSTAT_TX_Msk)

__STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type * p_reg,
                                            nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    108c:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.MISO = miso_pin;
    108e:	f8c0 8510 	str.w	r8, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = frequency;
    1092:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
__STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type * p_reg,
                                        nrf_spim_mode_t spi_mode,
                                        nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    1096:	7b4b      	ldrb	r3, [r1, #13]
    1098:	3300      	adds	r3, #0
    109a:	bf18      	it	ne
    109c:	2301      	movne	r3, #1
    switch (spi_mode)
    109e:	2f02      	cmp	r7, #2
    10a0:	d027      	beq.n	10f2 <nrfx_spim_init+0x132>
    10a2:	2f03      	cmp	r7, #3
    10a4:	d028      	beq.n	10f8 <nrfx_spim_init+0x138>
    10a6:	2f01      	cmp	r7, #1
    10a8:	d101      	bne.n	10ae <nrfx_spim_init+0xee>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    10aa:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    10ae:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554
}

__STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                      uint8_t orc)
{
    p_reg->ORC = orc;
    10b2:	798b      	ldrb	r3, [r1, #6]
    10b4:	f8c0 35c0 	str.w	r3, [r0, #1472]	; 0x5c0
    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);

    nrf_spim_orc_set(p_spim, p_config->orc);

    if (p_cb->handler)
    10b8:	f1bc 0f00 	cmp.w	ip, #0
    10bc:	d002      	beq.n	10c4 <nrfx_spim_init+0x104>
    p_reg->INTENSET = spim_int_mask;
    10be:	2340      	movs	r3, #64	; 0x40
    10c0:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    10c4:	2307      	movs	r3, #7
    10c6:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
        nrf_spim_int_enable(p_spim, NRF_SPIM_INT_END_MASK);
    }

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    10ca:	f1bc 0f00 	cmp.w	ip, #0
    10ce:	d003      	beq.n	10d8 <nrfx_spim_init+0x118>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    10d0:	f340 3007 	sbfx	r0, r0, #12, #8
    10d4:	f000 fd9a 	bl	1c0c <z_arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    10d8:	2324      	movs	r3, #36	; 0x24
    10da:	fb03 5404 	mla	r4, r3, r4, r5
    10de:	2300      	movs	r3, #0
    10e0:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    10e2:	4809      	ldr	r0, [pc, #36]	; (1108 <nrfx_spim_init+0x148>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    10e4:	2301      	movs	r3, #1
    10e6:	7723      	strb	r3, [r4, #28]
}
    10e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_reg->OUTSET = set_mask;
    10ec:	f8ca 2508 	str.w	r2, [sl, #1288]	; 0x508
    10f0:	e7be      	b.n	1070 <nrfx_spim_init+0xb0>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    10f2:	f043 0304 	orr.w	r3, r3, #4
    10f6:	e7da      	b.n	10ae <nrfx_spim_init+0xee>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    10f8:	f043 0306 	orr.w	r3, r3, #6
    10fc:	e7d7      	b.n	10ae <nrfx_spim_init+0xee>
        return err_code;
    10fe:	4803      	ldr	r0, [pc, #12]	; (110c <nrfx_spim_init+0x14c>)
    1100:	e7f2      	b.n	10e8 <nrfx_spim_init+0x128>
    1102:	bf00      	nop
    1104:	20000098 	.word	0x20000098
    1108:	0bad0000 	.word	0x0bad0000
    110c:	0bad0005 	.word	0x0bad0005

00001110 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t     const * const p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    1110:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    1114:	7904      	ldrb	r4, [r0, #4]
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    1116:	4d46      	ldr	r5, [pc, #280]	; (1230 <nrfx_spim_xfer+0x120>)
    1118:	2324      	movs	r3, #36	; 0x24
    111a:	4363      	muls	r3, r4
{
    111c:	4617      	mov	r7, r2
    if (p_cb->transfer_in_progress)
    111e:	18ea      	adds	r2, r5, r3
{
    1120:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
    1122:	7f51      	ldrb	r1, [r2, #29]
{
    1124:	4680      	mov	r8, r0
    if (p_cb->transfer_in_progress)
    1126:	2900      	cmp	r1, #0
    1128:	d17f      	bne.n	122a <nrfx_spim_xfer+0x11a>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    112a:	58eb      	ldr	r3, [r5, r3]
    112c:	b123      	cbz	r3, 1138 <nrfx_spim_xfer+0x28>
    112e:	f017 0f14 	tst.w	r7, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    1132:	bf04      	itt	eq
    1134:	2301      	moveq	r3, #1
    1136:	7753      	strbeq	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    1138:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    113c:	f04f 0c24 	mov.w	ip, #36	; 0x24
    1140:	fb0c 5c04 	mla	ip, ip, r4, r5
    1144:	f10c 0e0c 	add.w	lr, ip, #12
    1148:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    114c:	f89c 201f 	ldrb.w	r2, [ip, #31]
    1150:	2aff      	cmp	r2, #255	; 0xff
    1152:	d008      	beq.n	1166 <nrfx_spim_xfer+0x56>
    {
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (!p_cb->use_hw_ss)
#endif
        {
            if (p_cb->ss_active_high)
    1154:	f89c 101e 	ldrb.w	r1, [ip, #30]
    1158:	2301      	movs	r3, #1
    115a:	4093      	lsls	r3, r2
    115c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    1160:	b1c1      	cbz	r1, 1194 <nrfx_spim_xfer+0x84>
    1162:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    1166:	6831      	ldr	r1, [r6, #0]
    1168:	b121      	cbz	r1, 1174 <nrfx_spim_xfer+0x64>

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    116a:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
    116e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    1172:	d106      	bne.n	1182 <nrfx_spim_xfer+0x72>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    1174:	68b2      	ldr	r2, [r6, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    1176:	b182      	cbz	r2, 119a <nrfx_spim_xfer+0x8a>
    1178:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    117c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    1180:	d00b      	beq.n	119a <nrfx_spim_xfer+0x8a>
        p_cb->transfer_in_progress = false;
    1182:	2324      	movs	r3, #36	; 0x24
    1184:	fb03 5404 	mla	r4, r3, r4, r5
        return err_code;
    1188:	482a      	ldr	r0, [pc, #168]	; (1234 <nrfx_spim_xfer+0x124>)
        p_cb->transfer_in_progress = false;
    118a:	2300      	movs	r3, #0
    118c:	7763      	strb	r3, [r4, #29]
            }
        }
    }

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
    118e:	b002      	add	sp, #8
    1190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_reg->OUTCLR = clr_mask;
    1194:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    1198:	e7e5      	b.n	1166 <nrfx_spim_xfer+0x56>
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    119a:	f8d8 3000 	ldr.w	r3, [r8]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    119e:	6870      	ldr	r0, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    11a0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    11a4:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
    11a8:	68f1      	ldr	r1, [r6, #12]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    11aa:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)spim_event)) = 0x0UL;
    11ae:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
    11b0:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)spim_event)) = 0x0UL;
    11b4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)spim_event));
    11b8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    11bc:	9201      	str	r2, [sp, #4]
    (void)dummy;
    11be:	9a01      	ldr	r2, [sp, #4]
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    11c0:	f017 0201 	ands.w	r2, r7, #1
}


__STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = 1;
    11c4:	bf18      	it	ne
    11c6:	2201      	movne	r2, #1
}

__STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = 0;
    11c8:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    11cc:	f017 0202 	ands.w	r2, r7, #2
}

__STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = 1;
    11d0:	bf18      	it	ne
    11d2:	2201      	movne	r2, #1
}

__STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = 0;
    11d4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    11d8:	073a      	lsls	r2, r7, #28
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)spim_task)) = 0x1UL;
    11da:	bf5c      	itt	pl
    11dc:	2201      	movpl	r2, #1
    11de:	611a      	strpl	r2, [r3, #16]
    if (!p_cb->handler)
    11e0:	2224      	movs	r2, #36	; 0x24
    11e2:	4362      	muls	r2, r4
    11e4:	58aa      	ldr	r2, [r5, r2]
    11e6:	b9b2      	cbnz	r2, 1216 <nrfx_spim_xfer+0x106>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)spim_event);
    11e8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
        while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END)){}
    11ec:	2a00      	cmp	r2, #0
    11ee:	d0fb      	beq.n	11e8 <nrfx_spim_xfer+0xd8>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    11f0:	2324      	movs	r3, #36	; 0x24
    11f2:	fb03 5404 	mla	r4, r3, r4, r5
    11f6:	7fe2      	ldrb	r2, [r4, #31]
    11f8:	2aff      	cmp	r2, #255	; 0xff
    11fa:	d007      	beq.n	120c <nrfx_spim_xfer+0xfc>
                if (p_cb->ss_active_high)
    11fc:	7fa1      	ldrb	r1, [r4, #30]
    11fe:	2301      	movs	r3, #1
    1200:	4093      	lsls	r3, r2
    1202:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    1206:	b119      	cbz	r1, 1210 <nrfx_spim_xfer+0x100>
    1208:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return err_code;
    120c:	480a      	ldr	r0, [pc, #40]	; (1238 <nrfx_spim_xfer+0x128>)
    120e:	e7be      	b.n	118e <nrfx_spim_xfer+0x7e>
    p_reg->OUTSET = set_mask;
    1210:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    1214:	e7fa      	b.n	120c <nrfx_spim_xfer+0xfc>
    if (!enable)
    1216:	f017 0f04 	tst.w	r7, #4
    121a:	f04f 0240 	mov.w	r2, #64	; 0x40
    p_reg->INTENCLR = spim_int_mask;
    121e:	bf14      	ite	ne
    1220:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = spim_int_mask;
    1224:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
    1228:	e7f0      	b.n	120c <nrfx_spim_xfer+0xfc>
        return err_code;
    122a:	4804      	ldr	r0, [pc, #16]	; (123c <nrfx_spim_xfer+0x12c>)
    122c:	e7af      	b.n	118e <nrfx_spim_xfer+0x7e>
    122e:	bf00      	nop
    1230:	20000098 	.word	0x20000098
    1234:	0bad000a 	.word	0x0bad000a
    1238:	0bad0000 	.word	0x0bad0000
    123c:	0bad000b 	.word	0x0bad000b

00001240 <nrfx_spim_1_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)spim_event);
    1240:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
}
#endif

#if NRFX_CHECK(NRFX_SPIM1_ENABLED)
void nrfx_spim_1_irq_handler(void)
{
    1244:	b082      	sub	sp, #8
    1246:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    124a:	b1e3      	cbz	r3, 1286 <nrfx_spim_1_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)spim_event)) = 0x0UL;
    124c:	4b0f      	ldr	r3, [pc, #60]	; (128c <nrfx_spim_1_irq_handler+0x4c>)
    124e:	2200      	movs	r2, #0
    1250:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)spim_event));
    1252:	681b      	ldr	r3, [r3, #0]
    1254:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1256:	9b01      	ldr	r3, [sp, #4]
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    1258:	4b0d      	ldr	r3, [pc, #52]	; (1290 <nrfx_spim_1_irq_handler+0x50>)
    125a:	7fd9      	ldrb	r1, [r3, #31]
    125c:	29ff      	cmp	r1, #255	; 0xff
    125e:	d007      	beq.n	1270 <nrfx_spim_1_irq_handler+0x30>
            if (p_cb->ss_active_high)
    1260:	7f98      	ldrb	r0, [r3, #30]
    1262:	2201      	movs	r2, #1
    1264:	408a      	lsls	r2, r1
    1266:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    126a:	b148      	cbz	r0, 1280 <nrfx_spim_1_irq_handler+0x40>
    p_reg->OUTCLR = clr_mask;
    126c:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
    p_cb->transfer_in_progress = false;
    1270:	2200      	movs	r2, #0
    1272:	775a      	strb	r2, [r3, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    1274:	721a      	strb	r2, [r3, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    1276:	e9d3 2100 	ldrd	r2, r1, [r3]
    127a:	4806      	ldr	r0, [pc, #24]	; (1294 <nrfx_spim_1_irq_handler+0x54>)
    irq_handler(NRF_SPIM1, &m_cb[NRFX_SPIM1_INST_IDX]);
}
    127c:	b002      	add	sp, #8
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    127e:	4710      	bx	r2
    p_reg->OUTSET = set_mask;
    1280:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
    1284:	e7f4      	b.n	1270 <nrfx_spim_1_irq_handler+0x30>
}
    1286:	b002      	add	sp, #8
    1288:	4770      	bx	lr
    128a:	bf00      	nop
    128c:	40004118 	.word	0x40004118
    1290:	20000098 	.word	0x20000098
    1294:	200000a0 	.word	0x200000a0

00001298 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    1298:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    129a:	4c11      	ldr	r4, [pc, #68]	; (12e0 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    129c:	4a11      	ldr	r2, [pc, #68]	; (12e4 <_DoInit+0x4c>)
    129e:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    12a0:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    12a2:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    12a6:	4b10      	ldr	r3, [pc, #64]	; (12e8 <_DoInit+0x50>)
    12a8:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    12aa:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    12ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    12b0:	4a0e      	ldr	r2, [pc, #56]	; (12ec <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    12b2:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    12b4:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    12b6:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    12b8:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    12ba:	490d      	ldr	r1, [pc, #52]	; (12f0 <_DoInit+0x58>)
  p->aUp[0].RdOff         = 0u;
    12bc:	62a3      	str	r3, [r4, #40]	; 0x28
  strcpy(&p->acID[7], "RTT");
    12be:	1de0      	adds	r0, r4, #7
  p->aUp[0].WrOff         = 0u;
    12c0:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    12c2:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    12c4:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    12c6:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    12c8:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    12ca:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    12cc:	f003 f9db 	bl	4686 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    12d0:	4908      	ldr	r1, [pc, #32]	; (12f4 <_DoInit+0x5c>)
    12d2:	4620      	mov	r0, r4
    12d4:	f003 f9d7 	bl	4686 <strcpy>
  p->acID[6] = ' ';
    12d8:	2320      	movs	r3, #32
    12da:	71a3      	strb	r3, [r4, #6]
}
    12dc:	bd10      	pop	{r4, pc}
    12de:	bf00      	nop
    12e0:	200000bc 	.word	0x200000bc
    12e4:	00005262 	.word	0x00005262
    12e8:	20000531 	.word	0x20000531
    12ec:	20000521 	.word	0x20000521
    12f0:	0000526b 	.word	0x0000526b
    12f4:	0000526f 	.word	0x0000526f

000012f8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    12f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    12fa:	4c18      	ldr	r4, [pc, #96]	; (135c <SEGGER_RTT_WriteNoLock+0x64>)
    12fc:	2318      	movs	r3, #24
    12fe:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    1302:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    1306:	4425      	add	r5, r4
  switch (pRing->Flags) {
    1308:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    130a:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    130c:	460f      	mov	r7, r1
    130e:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    1310:	d011      	beq.n	1336 <SEGGER_RTT_WriteNoLock+0x3e>
    1312:	d303      	bcc.n	131c <SEGGER_RTT_WriteNoLock+0x24>
    1314:	2c02      	cmp	r4, #2
    1316:	d01b      	beq.n	1350 <SEGGER_RTT_WriteNoLock+0x58>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    1318:	2400      	movs	r4, #0
    break;
  }
  //
  // Finish up.
  //
  return Status;
    131a:	e00a      	b.n	1332 <SEGGER_RTT_WriteNoLock+0x3a>
    Avail = _GetAvailWriteSpace(pRing);
    131c:	4628      	mov	r0, r5
    131e:	f003 f931 	bl	4584 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    1322:	4286      	cmp	r6, r0
    1324:	d805      	bhi.n	1332 <SEGGER_RTT_WriteNoLock+0x3a>
      _WriteNoCheck(pRing, pData, NumBytes);
    1326:	4632      	mov	r2, r6
    1328:	4639      	mov	r1, r7
    132a:	4628      	mov	r0, r5
    132c:	f003 f938 	bl	45a0 <_WriteNoCheck>
    1330:	4634      	mov	r4, r6
}
    1332:	4620      	mov	r0, r4
    1334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    1336:	4628      	mov	r0, r5
    1338:	f003 f924 	bl	4584 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    133c:	4286      	cmp	r6, r0
    133e:	4634      	mov	r4, r6
    1340:	bf28      	it	cs
    1342:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    1344:	4622      	mov	r2, r4
    1346:	4639      	mov	r1, r7
    1348:	4628      	mov	r0, r5
    134a:	f003 f929 	bl	45a0 <_WriteNoCheck>
    break;
    134e:	e7f0      	b.n	1332 <SEGGER_RTT_WriteNoLock+0x3a>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1350:	4628      	mov	r0, r5
}
    1352:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1356:	f003 b940 	b.w	45da <_WriteBlocking>
    135a:	bf00      	nop
    135c:	200000bc 	.word	0x200000bc

00001360 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1360:	280a      	cmp	r0, #10
{
    1362:	b538      	push	{r3, r4, r5, lr}
    1364:	4604      	mov	r4, r0
    1366:	4d07      	ldr	r5, [pc, #28]	; (1384 <console_out+0x24>)
	if ('\n' == c) {
    1368:	d104      	bne.n	1374 <console_out+0x14>
    136a:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    136c:	6843      	ldr	r3, [r0, #4]
    136e:	210d      	movs	r1, #13
    1370:	685b      	ldr	r3, [r3, #4]
    1372:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1374:	6828      	ldr	r0, [r5, #0]
    1376:	6843      	ldr	r3, [r0, #4]
    1378:	b2e1      	uxtb	r1, r4
    137a:	685b      	ldr	r3, [r3, #4]
    137c:	4798      	blx	r3

	return c;
}
    137e:	4620      	mov	r0, r4
    1380:	bd38      	pop	{r3, r4, r5, pc}
    1382:	bf00      	nop
    1384:	20000164 	.word	0x20000164

00001388 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    1388:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    138a:	4c04      	ldr	r4, [pc, #16]	; (139c <uart_console_hook_install+0x14>)
    138c:	4620      	mov	r0, r4
    138e:	f001 fa49 	bl	2824 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1392:	4620      	mov	r0, r4
}
    1394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    1398:	f7ff bc72 	b.w	c80 <__printk_hook_install>
    139c:	00001361 	.word	0x00001361

000013a0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    13a0:	b508      	push	{r3, lr}
    13a2:	4804      	ldr	r0, [pc, #16]	; (13b4 <uart_console_init+0x14>)
    13a4:	f001 fe24 	bl	2ff0 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    13a8:	4b03      	ldr	r3, [pc, #12]	; (13b8 <uart_console_init+0x18>)
    13aa:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    13ac:	f7ff ffec 	bl	1388 <uart_console_hook_install>

	return 0;
}
    13b0:	2000      	movs	r0, #0
    13b2:	bd08      	pop	{r3, pc}
    13b4:	00005276 	.word	0x00005276
    13b8:	20000164 	.word	0x20000164

000013bc <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
    13bc:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    13be:	4c04      	ldr	r4, [pc, #16]	; (13d0 <rtt_console_init+0x14>)
    13c0:	4620      	mov	r0, r4
    13c2:	f7ff fc5d 	bl	c80 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    13c6:	4620      	mov	r0, r4
    13c8:	f001 fa2c 	bl	2824 <__stdout_hook_install>

	return 0;
}
    13cc:	2000      	movs	r0, #0
    13ce:	bd10      	pop	{r4, pc}
    13d0:	000013d5 	.word	0x000013d5

000013d4 <rtt_console_out>:
{
    13d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    13d8:	4f16      	ldr	r7, [pc, #88]	; (1434 <rtt_console_out+0x60>)
    13da:	4d17      	ldr	r5, [pc, #92]	; (1438 <rtt_console_out+0x64>)
	char c = (char)character;
    13dc:	f88d 0007 	strb.w	r0, [sp, #7]
{
    13e0:	4606      	mov	r6, r0
	char c = (char)character;
    13e2:	2403      	movs	r4, #3
    13e4:	f04f 31ff 	mov.w	r1, #4294967295
    13e8:	4638      	mov	r0, r7
    13ea:	f001 ff13 	bl	3214 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    13ee:	2201      	movs	r2, #1
    13f0:	f10d 0107 	add.w	r1, sp, #7
    13f4:	2000      	movs	r0, #0
    13f6:	f7ff ff7f 	bl	12f8 <SEGGER_RTT_WriteNoLock>
    13fa:	4680      	mov	r8, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    13fc:	4638      	mov	r0, r7
    13fe:	f001 ff79 	bl	32f4 <z_impl_k_mutex_unlock>
		if (cnt) {
    1402:	f1b8 0f00 	cmp.w	r8, #0
    1406:	d005      	beq.n	1414 <rtt_console_out+0x40>
			host_present = true;
    1408:	2301      	movs	r3, #1
    140a:	702b      	strb	r3, [r5, #0]
}
    140c:	4630      	mov	r0, r6
    140e:	b002      	add	sp, #8
    1410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    1414:	782b      	ldrb	r3, [r5, #0]
    1416:	2b00      	cmp	r3, #0
    1418:	d0f8      	beq.n	140c <rtt_console_out+0x38>
			if (max_cnt) {
    141a:	3c01      	subs	r4, #1
    141c:	d007      	beq.n	142e <rtt_console_out+0x5a>
	if (k_is_in_isr()) {
    141e:	f002 fac9 	bl	39b4 <k_is_in_isr>
    1422:	2800      	cmp	r0, #0
    1424:	d1de      	bne.n	13e4 <rtt_console_out+0x10>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    1426:	2002      	movs	r0, #2
    1428:	f002 fa28 	bl	387c <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    142c:	e7da      	b.n	13e4 <rtt_console_out+0x10>
				host_present = false;
    142e:	702c      	strb	r4, [r5, #0]
    1430:	e7ec      	b.n	140c <rtt_console_out+0x38>
    1432:	bf00      	nop
    1434:	20001798 	.word	0x20001798
    1438:	20000931 	.word	0x20000931

0000143c <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    143c:	b510      	push	{r4, lr}
	__asm__ volatile(
    143e:	f04f 0320 	mov.w	r3, #32
    1442:	f3ef 8211 	mrs	r2, BASEPRI
    1446:	f383 8811 	msr	BASEPRI, r3
    144a:	f3bf 8f6f 	isb	sy
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    144e:	4c15      	ldr	r4, [pc, #84]	; (14a4 <_m16src_stop+0x68>)
    1450:	7823      	ldrb	r3, [r4, #0]
    1452:	b933      	cbnz	r3, 1462 <_m16src_stop+0x26>
	__asm__ volatile(
    1454:	f382 8811 	msr	BASEPRI, r2
    1458:	f3bf 8f6f 	isb	sy
		irq_unlock(imask);
		return -EALREADY;
    145c:	f06f 0044 	mvn.w	r0, #68	; 0x44

	/* release resource guard */
	m16src_grd = 0U;

	return 0;
}
    1460:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
    1462:	3b01      	subs	r3, #1
    1464:	b2db      	uxtb	r3, r3
    1466:	7023      	strb	r3, [r4, #0]
    1468:	b133      	cbz	r3, 1478 <_m16src_stop+0x3c>
    146a:	f382 8811 	msr	BASEPRI, r2
    146e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    1472:	f06f 000f 	mvn.w	r0, #15
    1476:	e7f3      	b.n	1460 <_m16src_stop+0x24>
	if (m16src_grd) {
    1478:	4b0b      	ldr	r3, [pc, #44]	; (14a8 <_m16src_stop+0x6c>)
    147a:	7818      	ldrb	r0, [r3, #0]
    147c:	2101      	movs	r1, #1
    147e:	b138      	cbz	r0, 1490 <_m16src_stop+0x54>
		m16src_ref++;
    1480:	7021      	strb	r1, [r4, #0]
    1482:	f382 8811 	msr	BASEPRI, r2
    1486:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    148a:	f06f 000a 	mvn.w	r0, #10
    148e:	e7e7      	b.n	1460 <_m16src_stop+0x24>
	m16src_grd = 1U;
    1490:	7019      	strb	r1, [r3, #0]
    1492:	f382 8811 	msr	BASEPRI, r2
    1496:	f3bf 8f6f 	isb	sy
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    149a:	4a04      	ldr	r2, [pc, #16]	; (14ac <_m16src_stop+0x70>)
    149c:	6011      	str	r1, [r2, #0]
	m16src_grd = 0U;
    149e:	7018      	strb	r0, [r3, #0]
	return 0;
    14a0:	e7de      	b.n	1460 <_m16src_stop+0x24>
    14a2:	bf00      	nop
    14a4:	20000934 	.word	0x20000934
    14a8:	20000933 	.word	0x20000933
    14ac:	40000004 	.word	0x40000004

000014b0 <_m16src_start>:
{
    14b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    14b2:	f04f 0220 	mov.w	r2, #32
    14b6:	f3ef 8311 	mrs	r3, BASEPRI
    14ba:	f382 8811 	msr	BASEPRI, r2
    14be:	f3bf 8f6f 	isb	sy
	if (m16src_ref++) {
    14c2:	4a29      	ldr	r2, [pc, #164]	; (1568 <_m16src_start+0xb8>)
    14c4:	7810      	ldrb	r0, [r2, #0]
    14c6:	1c44      	adds	r4, r0, #1
    14c8:	7014      	strb	r4, [r2, #0]
    14ca:	b180      	cbz	r0, 14ee <_m16src_start+0x3e>
	__asm__ volatile(
    14cc:	f383 8811 	msr	BASEPRI, r3
    14d0:	f3bf 8f6f 	isb	sy
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
    14d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    14d8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    14dc:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
    14e0:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    14e4:	bf0c      	ite	eq
    14e6:	2000      	moveq	r0, #0
    14e8:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    14ec:	e009      	b.n	1502 <_m16src_start+0x52>
	if (m16src_grd) {
    14ee:	4d1f      	ldr	r5, [pc, #124]	; (156c <_m16src_start+0xbc>)
    14f0:	782f      	ldrb	r7, [r5, #0]
    14f2:	b13f      	cbz	r7, 1504 <_m16src_start+0x54>
		m16src_ref--;
    14f4:	7010      	strb	r0, [r2, #0]
    14f6:	f383 8811 	msr	BASEPRI, r3
    14fa:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    14fe:	f06f 000a 	mvn.w	r0, #10
}
    1502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1U;
    1504:	2601      	movs	r6, #1
    1506:	702e      	strb	r6, [r5, #0]
    1508:	f383 8811 	msr	BASEPRI, r3
    150c:	f3bf 8f6f 	isb	sy
    1510:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1514:	b319      	cbz	r1, 155e <_m16src_start+0xae>
		irq_disable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    1516:	4638      	mov	r0, r7
    1518:	f000 fb88 	bl	1c2c <z_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    151c:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1520:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
    1524:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    1528:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    152a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    152e:	b192      	cbz	r2, 1556 <_m16src_start+0xa6>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1530:	2200      	movs	r2, #0
    1532:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1536:	4a0e      	ldr	r2, [pc, #56]	; (1570 <_m16src_start+0xc0>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1538:	f013 0f01 	tst.w	r3, #1
    153c:	f04f 0301 	mov.w	r3, #1
    NRF_CLOCK->INTENCLR = int_mask;
    1540:	bf08      	it	eq
    1542:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    1546:	2000      	movs	r0, #0
    1548:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    154c:	f000 fb5e 	bl	1c0c <z_arch_irq_enable>
	m16src_grd = 0U;
    1550:	2300      	movs	r3, #0
    1552:	702b      	strb	r3, [r5, #0]
    1554:	e7be      	b.n	14d4 <_m16src_start+0x24>
			__WFE();
    1556:	bf20      	wfe
			__SEV();
    1558:	bf40      	sev
			__WFE();
    155a:	bf20      	wfe
    155c:	e7e5      	b.n	152a <_m16src_start+0x7a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    155e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    1562:	6026      	str	r6, [r4, #0]
    1564:	e7f4      	b.n	1550 <_m16src_start+0xa0>
    1566:	bf00      	nop
    1568:	20000934 	.word	0x20000934
    156c:	20000933 	.word	0x20000933
    1570:	e000e100 	.word	0xe000e100

00001574 <_k32src_start>:

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    1574:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    1576:	f04f 0220 	mov.w	r2, #32
    157a:	f3ef 8311 	mrs	r3, BASEPRI
    157e:	f382 8811 	msr	BASEPRI, r2
    1582:	f3bf 8f6f 	isb	sy
	 * initialized flag.
	 */

	imask = irq_lock();

	if (k32src_initialized) {
    1586:	4d24      	ldr	r5, [pc, #144]	; (1618 <_k32src_start+0xa4>)
    1588:	782a      	ldrb	r2, [r5, #0]
    158a:	b19a      	cbz	r2, 15b4 <_k32src_start+0x40>
	__asm__ volatile(
    158c:	f383 8811 	msr	BASEPRI, r3
    1590:	f3bf 8f6f 	isb	sy
		}
	}
#endif /* NRF_CLOCK_HAS_CALIBRATION */

lf_already_started:
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    1594:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1598:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	       CLOCK_LFCLKSTAT_STATE_Msk;
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    159c:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    15a0:	f003 0303 	and.w	r3, r3, #3
    15a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    15a8:	4393      	bics	r3, r2
		return 0;
	} else {
		return -EINPROGRESS;
	}
}
    15aa:	bf14      	ite	ne
    15ac:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    15b0:	2000      	moveq	r0, #0
    15b2:	bd70      	pop	{r4, r5, r6, pc}
	k32src_initialized = 1U;
    15b4:	2401      	movs	r4, #1
    15b6:	702c      	strb	r4, [r5, #0]
    15b8:	f383 8811 	msr	BASEPRI, r3
    15bc:	f3bf 8f6f 	isb	sy
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    15c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    15c4:	4e15      	ldr	r6, [pc, #84]	; (161c <_k32src_start+0xa8>)
    15c6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    NRF_CLOCK->INTENSET = int_mask;
    15ca:	2502      	movs	r5, #2
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    15cc:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    15d0:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    15d4:	f011 0103 	ands.w	r1, r1, #3
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    15d8:	6034      	str	r4, [r6, #0]
    NRF_CLOCK->INTENCLR = int_mask;
    15da:	f04f 0618 	mov.w	r6, #24
    15de:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    15e2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    15e6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    15ea:	d1d3      	bne.n	1594 <_k32src_start+0x20>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    15ec:	2210      	movs	r2, #16
    15ee:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_CLOCK->INTENSET = int_mask;
    15f2:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
		if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) == 0) {
    15f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    15fa:	03d2      	lsls	r2, r2, #15
    15fc:	d402      	bmi.n	1604 <_k32src_start+0x90>
    15fe:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
    1602:	e7c7      	b.n	1594 <_k32src_start+0x20>
    1604:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1608:	f7ff ff52 	bl	14b0 <_m16src_start>
		if (!err) {
    160c:	2800      	cmp	r0, #0
    160e:	d1c1      	bne.n	1594 <_k32src_start+0x20>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1610:	4b03      	ldr	r3, [pc, #12]	; (1620 <_k32src_start+0xac>)
    1612:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    1616:	e7bd      	b.n	1594 <_k32src_start+0x20>
    1618:	20000932 	.word	0x20000932
    161c:	40000008 	.word	0x40000008
    1620:	e000e100 	.word	0xe000e100

00001624 <nrf_power_clock_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void nrf_power_clock_isr(void *arg)
{
    1624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
	bool usb_detected, usb_pwr_rdy, usb_removed;
#endif

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    162a:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    162c:	f8d3 c108 	ldr.w	ip, [r3, #264]	; 0x108

	hf_intenset = ((NRF_CLOCK->INTENSET &
    1630:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		       CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    1634:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100

	lf_intenset = ((NRF_CLOCK->INTENSET &
    1638:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
		       CLOCK_INTENSET_LFCLKSTARTED_Msk) != 0);
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    163c:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104

#if NRF_CLOCK_HAS_CALIBRATION
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1640:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1644:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
    1648:	3400      	adds	r4, #0
	hf_intenset = ((NRF_CLOCK->INTENSET &
    164a:	f002 0201 	and.w	r2, r2, #1
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    164e:	bf18      	it	ne
    1650:	2401      	movne	r4, #1
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
			|| usb_detected || usb_pwr_rdy || usb_removed
#endif
	);

	if (pof) {
    1652:	f1bc 0f00 	cmp.w	ip, #0
    1656:	d003      	beq.n	1660 <nrf_power_clock_isr+0x3c>
		NRF_POWER->EVENTS_POFWARN = 0;
    1658:	f04f 0c00 	mov.w	ip, #0
    165c:	f8c3 c108 	str.w	ip, [r3, #264]	; 0x108
	}

	if (hf) {
    1660:	2f00      	cmp	r7, #0
    1662:	d041      	beq.n	16e8 <nrf_power_clock_isr+0xc4>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1664:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1668:	2700      	movs	r7, #0
    166a:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	}

	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    166e:	b152      	cbz	r2, 1686 <nrf_power_clock_isr+0x62>
				   (CLOCK_HFCLKSTAT_STATE_Msk |
				    CLOCK_HFCLKSTAT_SRC_Msk)))){
		/* INTENSET is used as state flag to start calibration,
		 * hence clear it here.
		 */
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1670:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
#if defined(CONFIG_SOC_SERIES_NRF52X)
		/* NOTE: Errata [192] CLOCK: LFRC frequency offset after
		 * calibration.
		 * Calibration start, workaround.
		 */
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    1674:	4f22      	ldr	r7, [pc, #136]	; (1700 <nrf_power_clock_isr+0xdc>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1676:	2201      	movs	r2, #1
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    1678:	f04f 0c02 	mov.w	ip, #2
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    167c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    1680:	f8c7 c000 	str.w	ip, [r7]
#endif /* CONFIG_SOC_SERIES_NRF52X */

#if NRF_CLOCK_HAS_CALIBRATION
		/* Start Calibration */
		NRF_CLOCK->TASKS_CAL = 1;
    1684:	611a      	str	r2, [r3, #16]
#endif
	}

	if (lf) {
    1686:	b9ee      	cbnz	r6, 16c4 <nrf_power_clock_isr+0xa0>
#endif
		}
	}

#if NRF_CLOCK_HAS_CALIBRATION
	if (done) {
    1688:	b159      	cbz	r1, 16a2 <nrf_power_clock_isr+0x7e>
#if defined(CONFIG_SOC_SERIES_NRF52X)
		/* NOTE: Errata [192] CLOCK: LFRC frequency offset after
		 * calibration.
		 * Calibration done, workaround.
		 */
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    168a:	4b1d      	ldr	r3, [pc, #116]	; (1700 <nrf_power_clock_isr+0xdc>)
#endif /* CONFIG_SOC_SERIES_NRF52X */

		NRF_CLOCK->EVENTS_DONE = 0;
    168c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    1690:	2100      	movs	r1, #0
    1692:	6019      	str	r1, [r3, #0]

		/* Calibration done, stop 16M Xtal. */
		err = _m16src_stop(dev, NULL);
    1694:	4628      	mov	r0, r5
		NRF_CLOCK->EVENTS_DONE = 0;
    1696:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    169a:	f7ff fecf 	bl	143c <_m16src_stop>
		__ASSERT_NO_MSG(!err || err == -EBUSY);

		/* Start timer for next calibration. */
		NRF_CLOCK->TASKS_CTSTART = 1;
    169e:	2301      	movs	r3, #1
    16a0:	6173      	str	r3, [r6, #20]
	}

	if (ctto) {
    16a2:	b174      	cbz	r4, 16c2 <nrf_power_clock_isr+0x9e>
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
    16a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    16a8:	2100      	movs	r1, #0

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    16aa:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    16ac:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110

		err = _m16src_start(dev, false);
    16b0:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    16b2:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    16b6:	f7ff fefb 	bl	14b0 <_m16src_start>
		if (!err) {
    16ba:	b910      	cbnz	r0, 16c2 <nrf_power_clock_isr+0x9e>
    16bc:	4b11      	ldr	r3, [pc, #68]	; (1704 <nrf_power_clock_isr+0xe0>)
    16be:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	if (usb_removed) {
		nrf_power_event_clear(NRF_POWER_EVENT_USBREMOVED);
		power_event_cb(NRF_POWER_EVENT_USBREMOVED);
	}
#endif
}
    16c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    16c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    16c8:	2200      	movs	r2, #0
    16ca:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (lf_intenset) {
    16ce:	0782      	lsls	r2, r0, #30
    16d0:	d5da      	bpl.n	1688 <nrf_power_clock_isr+0x64>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    16d2:	2202      	movs	r2, #2
    16d4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
			if ((NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) ==
    16d8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    16dc:	079b      	lsls	r3, r3, #30
    16de:	d1d3      	bne.n	1688 <nrf_power_clock_isr+0x64>
	if (done) {
    16e0:	2900      	cmp	r1, #0
    16e2:	d0df      	beq.n	16a4 <nrf_power_clock_isr+0x80>
				ctto = 1U;
    16e4:	2401      	movs	r4, #1
    16e6:	e7d0      	b.n	168a <nrf_power_clock_isr+0x66>
	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    16e8:	2a00      	cmp	r2, #0
    16ea:	d0cc      	beq.n	1686 <nrf_power_clock_isr+0x62>
    16ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    16f0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    16f4:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    16f8:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    16fc:	d1c3      	bne.n	1686 <nrf_power_clock_isr+0x62>
    16fe:	e7b7      	b.n	1670 <nrf_power_clock_isr+0x4c>
    1700:	40000c34 	.word	0x40000c34
    1704:	e000e100 	.word	0xe000e100

00001708 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    1708:	4b10      	ldr	r3, [pc, #64]	; (174c <rtc1_nrf_isr+0x44>)
    170a:	2200      	movs	r2, #0
{
    170c:	b410      	push	{r4}
	RTC->EVENTS_COMPARE[0] = 0;
    170e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    1712:	f04f 0220 	mov.w	r2, #32
    1716:	f3ef 8411 	mrs	r4, BASEPRI
    171a:	f382 8811 	msr	BASEPRI, r2
    171e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    1722:	4a0b      	ldr	r2, [pc, #44]	; (1750 <rtc1_nrf_isr+0x48>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
    1724:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    1728:	6811      	ldr	r1, [r2, #0]
    172a:	f240 1347 	movw	r3, #327	; 0x147
	return (a - b) & COUNTER_MAX;
    172e:	1a40      	subs	r0, r0, r1
    1730:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    1734:	fbb0 f0f3 	udiv	r0, r0, r3

	last_count += dticks * CYC_PER_TICK;
    1738:	fb03 1300 	mla	r3, r3, r0, r1
    173c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    173e:	f384 8811 	msr	BASEPRI, r4
    1742:	f3bf 8f6f 	isb	sy
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
}
    1746:	bc10      	pop	{r4}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    1748:	f002 ba72 	b.w	3c30 <z_clock_announce>
    174c:	40011000 	.word	0x40011000
    1750:	20000168 	.word	0x20000168

00001754 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    1754:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1756:	481f      	ldr	r0, [pc, #124]	; (17d4 <z_clock_driver_init+0x80>)
    1758:	f001 fc4a 	bl	2ff0 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_NORDIC_NRF_CLOCK_0_LABEL "_32K");
	if (!clock) {
    175c:	2800      	cmp	r0, #0
    175e:	d035      	beq.n	17cc <z_clock_driver_init+0x78>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1760:	6843      	ldr	r3, [r0, #4]
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    1762:	4d1d      	ldr	r5, [pc, #116]	; (17d8 <z_clock_driver_init+0x84>)
    1764:	681b      	ldr	r3, [r3, #0]
    1766:	2101      	movs	r1, #1
    1768:	4798      	blx	r3
    176a:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
    176c:	f240 1347 	movw	r3, #327	; 0x147
    p_reg->PRESCALER = val;
    1770:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    1774:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

__STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    1778:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    177c:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
    p_reg->INTENSET = mask;
    1780:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1784:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1788:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    178c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1790:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1792:	681b      	ldr	r3, [r3, #0]
    1794:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1796:	9b01      	ldr	r3, [sp, #4]
    1798:	4b10      	ldr	r3, [pc, #64]	; (17dc <z_clock_driver_init+0x88>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    179a:	2101      	movs	r1, #1
    179c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    17a0:	2011      	movs	r0, #17
    17a2:	4622      	mov	r2, r4
    17a4:	f000 fa56 	bl	1c54 <z_irq_priority_set>
	irq_enable(RTC1_IRQn);
    17a8:	2011      	movs	r0, #17
    17aa:	f000 fa2f 	bl	1c0c <z_arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    17ae:	4a0c      	ldr	r2, [pc, #48]	; (17e0 <z_clock_driver_init+0x8c>)
    17b0:	2301      	movs	r3, #1
    17b2:	6013      	str	r3, [r2, #0]
    17b4:	602b      	str	r3, [r5, #0]
     return p_reg->COUNTER;
    17b6:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
    17ba:	f203 1347 	addw	r3, r3, #327	; 0x147
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    17be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    17c2:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
    17c6:	4620      	mov	r0, r4
}
    17c8:	b003      	add	sp, #12
    17ca:	bd30      	pop	{r4, r5, pc}
		return -1;
    17cc:	f04f 30ff 	mov.w	r0, #4294967295
    17d0:	e7fa      	b.n	17c8 <z_clock_driver_init+0x74>
    17d2:	bf00      	nop
    17d4:	0000527d 	.word	0x0000527d
    17d8:	40011000 	.word	0x40011000
    17dc:	e000e100 	.word	0xe000e100
    17e0:	40011008 	.word	0x40011008

000017e4 <z_clock_set_timeout>:
void z_clock_set_timeout(s32_t ticks, bool idle)
{
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    17e4:	f64c 0269 	movw	r2, #51305	; 0xc869
{
    17e8:	b570      	push	{r4, r5, r6, lr}
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    17ea:	f1b0 3fff 	cmp.w	r0, #4294967295
    17ee:	bf08      	it	eq
    17f0:	4610      	moveq	r0, r2
	__asm__ volatile(
    17f2:	f04f 0320 	mov.w	r3, #32
    17f6:	f3ef 8411 	mrs	r4, BASEPRI
    17fa:	f383 8811 	msr	BASEPRI, r3
    17fe:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    1802:	4913      	ldr	r1, [pc, #76]	; (1850 <z_clock_set_timeout+0x6c>)

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, t = counter();

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
    1804:	4d13      	ldr	r5, [pc, #76]	; (1854 <z_clock_set_timeout+0x70>)
    1806:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    180a:	682e      	ldr	r6, [r5, #0]
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    180c:	3801      	subs	r0, #1
    180e:	4290      	cmp	r0, r2
    1810:	bfa8      	it	ge
    1812:	4610      	movge	r0, r2
	return (a - b) & COUNTER_MAX;
    1814:	1b9a      	subs	r2, r3, r6
    1816:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
    181a:	f240 1547 	movw	r5, #327	; 0x147
	cyc += (CYC_PER_TICK - 1);
    181e:	f502 72a3 	add.w	r2, r2, #326	; 0x146
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
    1822:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	cyc += (CYC_PER_TICK - 1);
    1826:	fb05 2000 	mla	r0, r5, r0, r2
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
    182a:	fbb0 f0f5 	udiv	r0, r0, r5
	cyc += last_count;
    182e:	fb05 6000 	mla	r0, r5, r0, r6
	return (a - b) & COUNTER_MAX;
    1832:	1ac3      	subs	r3, r0, r3
    1834:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	if (counter_sub(cyc, t) < MIN_DELAY) {
    1838:	2b1f      	cmp	r3, #31
		cyc += CYC_PER_TICK;
    183a:	bf98      	it	ls
    183c:	1940      	addls	r0, r0, r5
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    183e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    1842:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
	__asm__ volatile(
    1846:	f384 8811 	msr	BASEPRI, r4
    184a:	f3bf 8f6f 	isb	sy
	}

	set_comparator(cyc);
	k_spin_unlock(&lock, key);
#endif
}
    184e:	bd70      	pop	{r4, r5, r6, pc}
    1850:	40011000 	.word	0x40011000
    1854:	20000168 	.word	0x20000168

00001858 <z_clock_elapsed>:
	__asm__ volatile(
    1858:	f04f 0220 	mov.w	r2, #32
    185c:	f3ef 8311 	mrs	r3, BASEPRI
    1860:	f382 8811 	msr	BASEPRI, r2
    1864:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    1868:	4a08      	ldr	r2, [pc, #32]	; (188c <z_clock_elapsed+0x34>)
    186a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    186e:	4a08      	ldr	r2, [pc, #32]	; (1890 <z_clock_elapsed+0x38>)
	return (a - b) & COUNTER_MAX;
    1870:	6812      	ldr	r2, [r2, #0]
    1872:	1a80      	subs	r0, r0, r2
    1874:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    1878:	f240 1247 	movw	r2, #327	; 0x147
    187c:	fbb0 f0f2 	udiv	r0, r0, r2
	__asm__ volatile(
    1880:	f383 8811 	msr	BASEPRI, r3
    1884:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1888:	4770      	bx	lr
    188a:	bf00      	nop
    188c:	40011000 	.word	0x40011000
    1890:	20000168 	.word	0x20000168

00001894 <_IntExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    1894:	4804      	ldr	r0, [pc, #16]	; (18a8 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    1896:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    1898:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    189a:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    189c:	d003      	beq.n	18a6 <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    189e:	4903      	ldr	r1, [pc, #12]	; (18ac <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    18a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    18a4:	600a      	str	r2, [r1, #0]

000018a6 <_EXIT_EXC>:
    mov lr, r1
#else
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */
    bx lr
    18a6:	4770      	bx	lr
    ldr r0, =_kernel
    18a8:	20000264 	.word	0x20000264
    ldr r1, =_SCS_ICSR
    18ac:	e000ed04 	.word	0xe000ed04

000018b0 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18b0:	4804      	ldr	r0, [pc, #16]	; (18c4 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    18b2:	2300      	movs	r3, #0
    18b4:	2120      	movs	r1, #32
    18b6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    18b8:	3301      	adds	r3, #1
    18ba:	2b27      	cmp	r3, #39	; 0x27
    18bc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    18c0:	d1f9      	bne.n	18b6 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    18c2:	4770      	bx	lr
    18c4:	e000e100 	.word	0xe000e100

000018c8 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    18c8:	4a09      	ldr	r2, [pc, #36]	; (18f0 <__swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    18ca:	490a      	ldr	r1, [pc, #40]	; (18f4 <__swap+0x2c>)
	_current->arch.basepri = key;
    18cc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    18ce:	6809      	ldr	r1, [r1, #0]
    18d0:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    18d2:	4909      	ldr	r1, [pc, #36]	; (18f8 <__swap+0x30>)
	_current->arch.basepri = key;
    18d4:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    18d6:	684b      	ldr	r3, [r1, #4]
    18d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    18dc:	604b      	str	r3, [r1, #4]
    18de:	2300      	movs	r3, #0
    18e0:	f383 8811 	msr	BASEPRI, r3
    18e4:	f3bf 8f6f 	isb	sy
	irq_unlock(0);

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    18e8:	6893      	ldr	r3, [r2, #8]
}
    18ea:	6e98      	ldr	r0, [r3, #104]	; 0x68
    18ec:	4770      	bx	lr
    18ee:	bf00      	nop
    18f0:	20000264 	.word	0x20000264
    18f4:	000051a8 	.word	0x000051a8
    18f8:	e000ed00 	.word	0xe000ed00

000018fc <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    18fc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    18fe:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1902:	f3bf 8f6f 	isb	sy
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1906:	4911      	ldr	r1, [pc, #68]	; (194c <__pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1908:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    190a:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    190e:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    1910:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1914:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    1918:	4f0d      	ldr	r7, [pc, #52]	; (1950 <__pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    191a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    191e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    1920:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1922:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1924:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
    1926:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1928:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    192a:	f380 8811 	msr	BASEPRI, r0
    vldmia r0, {s16-s31}
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    192e:	b504      	push	{r2, lr}
    ldr r0, =_kernel
    1930:	4806      	ldr	r0, [pc, #24]	; (194c <__pendsv+0x50>)
    ldr r0, [r0, #_kernel_offset_to_current]
    1932:	6880      	ldr	r0, [r0, #8]
    bl z_arch_configure_dynamic_mpu_regions
    1934:	f002 fe9f 	bl	4676 <z_arch_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1938:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    193c:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    1940:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

    msr PSP, ip
    1944:	f38c 8809 	msr	PSP, ip
    pop {r0, lr}
#endif
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
    1948:	4770      	bx	lr
    194a:	0000      	.short	0x0000
    ldr r1, =_kernel
    194c:	20000264 	.word	0x20000264
    ldr v4, =_SCS_ICSR
    1950:	e000ed04 	.word	0xe000ed04

00001954 <__svc>:
 * - System Calls (User mode)
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    1954:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1958:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    195a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    195e:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1962:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read encoding */
    ldrh r1, [r1, #-2]
    1964:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call (if user mode supported)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    1968:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    196c:	2902      	cmp	r1, #2
    beq _oops
    196e:	d0ff      	beq.n	1970 <_oops>

00001970 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {r0, lr}
    1970:	b501      	push	{r0, lr}
    bl _do_kernel_oops
    1972:	f002 fe71 	bl	4658 <_do_kernel_oops>
    pop {r0, pc}
    1976:	bd01      	pop	{r0, pc}

00001978 <_MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    1978:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    197a:	4c1b      	ldr	r4, [pc, #108]	; (19e8 <_MpuFault.isra.2+0x70>)
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    197c:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
    197e:	481b      	ldr	r0, [pc, #108]	; (19ec <_MpuFault.isra.2+0x74>)
    1980:	f002 fdf1 	bl	4566 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1984:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1986:	06d9      	lsls	r1, r3, #27
    1988:	d502      	bpl.n	1990 <_MpuFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error (context area might be"
    198a:	4819      	ldr	r0, [pc, #100]	; (19f0 <_MpuFault.isra.2+0x78>)
    198c:	f002 fdeb 	bl	4566 <printk>
			" not valid)\n");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1990:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1992:	071a      	lsls	r2, r3, #28
    1994:	d502      	bpl.n	199c <_MpuFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    1996:	4817      	ldr	r0, [pc, #92]	; (19f4 <_MpuFault.isra.2+0x7c>)
    1998:	f002 fde5 	bl	4566 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    199c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    199e:	079b      	lsls	r3, r3, #30
    19a0:	d50e      	bpl.n	19c0 <_MpuFault.isra.2+0x48>
		PR_FAULT_INFO("  Data Access Violation\n");
    19a2:	4815      	ldr	r0, [pc, #84]	; (19f8 <_MpuFault.isra.2+0x80>)
    19a4:	f002 fddf 	bl	4566 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    19a8:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    19aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19ac:	0618      	lsls	r0, r3, #24
    19ae:	d507      	bpl.n	19c0 <_MpuFault.isra.2+0x48>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
    19b0:	4812      	ldr	r0, [pc, #72]	; (19fc <_MpuFault.isra.2+0x84>)
    19b2:	f002 fdd8 	bl	4566 <printk>
			if (fromHardFault) {
    19b6:	b11d      	cbz	r5, 19c0 <_MpuFault.isra.2+0x48>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    19b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    19be:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    19c0:	4c09      	ldr	r4, [pc, #36]	; (19e8 <_MpuFault.isra.2+0x70>)
    19c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19c4:	07da      	lsls	r2, r3, #31
    19c6:	d502      	bpl.n	19ce <_MpuFault.isra.2+0x56>
		PR_FAULT_INFO("  Instruction Access Violation\n");
    19c8:	480d      	ldr	r0, [pc, #52]	; (1a00 <_MpuFault.isra.2+0x88>)
    19ca:	f002 fdcc 	bl	4566 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    19ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19d0:	069b      	lsls	r3, r3, #26
    19d2:	d502      	bpl.n	19da <_MpuFault.isra.2+0x62>
		PR_FAULT_INFO(
    19d4:	480b      	ldr	r0, [pc, #44]	; (1a04 <_MpuFault.isra.2+0x8c>)
    19d6:	f002 fdc6 	bl	4566 <printk>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    19da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    19dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19de:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    19e2:	62a3      	str	r3, [r4, #40]	; 0x28
	if (_MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    19e4:	2000      	movs	r0, #0
    19e6:	bd38      	pop	{r3, r4, r5, pc}
    19e8:	e000ed00 	.word	0xe000ed00
    19ec:	000053fc 	.word	0x000053fc
    19f0:	00005413 	.word	0x00005413
    19f4:	00005447 	.word	0x00005447
    19f8:	0000545b 	.word	0x0000545b
    19fc:	00005474 	.word	0x00005474
    1a00:	0000548b 	.word	0x0000548b
    1a04:	000054ab 	.word	0x000054ab

00001a08 <_BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    1a08:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1a0a:	4c1e      	ldr	r4, [pc, #120]	; (1a84 <_BusFault.isra.3+0x7c>)
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    1a0c:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
    1a0e:	481e      	ldr	r0, [pc, #120]	; (1a88 <_BusFault.isra.3+0x80>)
    1a10:	f002 fda9 	bl	4566 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1a14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a16:	04d9      	lsls	r1, r3, #19
    1a18:	d502      	bpl.n	1a20 <_BusFault.isra.3+0x18>
		PR_FAULT_INFO("  Stacking error\n");
    1a1a:	481c      	ldr	r0, [pc, #112]	; (1a8c <_BusFault.isra.3+0x84>)
    1a1c:	f002 fda3 	bl	4566 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1a20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a22:	051a      	lsls	r2, r3, #20
    1a24:	d502      	bpl.n	1a2c <_BusFault.isra.3+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    1a26:	481a      	ldr	r0, [pc, #104]	; (1a90 <_BusFault.isra.3+0x88>)
    1a28:	f002 fd9d 	bl	4566 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1a2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a2e:	059b      	lsls	r3, r3, #22
    1a30:	d50e      	bpl.n	1a50 <_BusFault.isra.3+0x48>
		PR_FAULT_INFO("  Precise data bus error\n");
    1a32:	4818      	ldr	r0, [pc, #96]	; (1a94 <_BusFault.isra.3+0x8c>)
    1a34:	f002 fd97 	bl	4566 <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1a38:	6ba1      	ldr	r1, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1a3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a3c:	0418      	lsls	r0, r3, #16
    1a3e:	d507      	bpl.n	1a50 <_BusFault.isra.3+0x48>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
    1a40:	4815      	ldr	r0, [pc, #84]	; (1a98 <_BusFault.isra.3+0x90>)
    1a42:	f002 fd90 	bl	4566 <printk>
			if (fromHardFault) {
    1a46:	b11d      	cbz	r5, 1a50 <_BusFault.isra.3+0x48>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1a48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1a4e:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1a50:	4c0c      	ldr	r4, [pc, #48]	; (1a84 <_BusFault.isra.3+0x7c>)
    1a52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a54:	0559      	lsls	r1, r3, #21
    1a56:	d502      	bpl.n	1a5e <_BusFault.isra.3+0x56>
		PR_FAULT_INFO("  Imprecise data bus error\n");
    1a58:	4810      	ldr	r0, [pc, #64]	; (1a9c <_BusFault.isra.3+0x94>)
    1a5a:	f002 fd84 	bl	4566 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1a5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a60:	05da      	lsls	r2, r3, #23
    1a62:	d509      	bpl.n	1a78 <_BusFault.isra.3+0x70>
		PR_FAULT_INFO("  Instruction bus error\n");
    1a64:	480e      	ldr	r0, [pc, #56]	; (1aa0 <_BusFault.isra.3+0x98>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    1a66:	f002 fd7e 	bl	4566 <printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1a6a:	4a06      	ldr	r2, [pc, #24]	; (1a84 <_BusFault.isra.3+0x7c>)
    1a6c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1a6e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1a72:	6293      	str	r3, [r2, #40]	; 0x28
	if (_MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    1a74:	2000      	movs	r0, #0
    1a76:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1a78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a7a:	049b      	lsls	r3, r3, #18
    1a7c:	d5f5      	bpl.n	1a6a <_BusFault.isra.3+0x62>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    1a7e:	4809      	ldr	r0, [pc, #36]	; (1aa4 <_BusFault.isra.3+0x9c>)
    1a80:	e7f1      	b.n	1a66 <_BusFault.isra.3+0x5e>
    1a82:	bf00      	nop
    1a84:	e000ed00 	.word	0xe000ed00
    1a88:	0000529b 	.word	0x0000529b
    1a8c:	000052b2 	.word	0x000052b2
    1a90:	00005447 	.word	0x00005447
    1a94:	000052c4 	.word	0x000052c4
    1a98:	000052de 	.word	0x000052de
    1a9c:	000052f4 	.word	0x000052f4
    1aa0:	00005310 	.word	0x00005310
    1aa4:	000054ab 	.word	0x000054ab

00001aa8 <_UsageFault.isra.4>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
    1aa8:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1aaa:	4c19      	ldr	r4, [pc, #100]	; (1b10 <_UsageFault.isra.4+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
    1aac:	4819      	ldr	r0, [pc, #100]	; (1b14 <_UsageFault.isra.4+0x6c>)
    1aae:	f002 fd5a 	bl	4566 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1ab2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ab4:	019a      	lsls	r2, r3, #6
    1ab6:	d502      	bpl.n	1abe <_UsageFault.isra.4+0x16>
		PR_FAULT_INFO("  Division by zero\n");
    1ab8:	4817      	ldr	r0, [pc, #92]	; (1b18 <_UsageFault.isra.4+0x70>)
    1aba:	f002 fd54 	bl	4566 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1abe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ac0:	01db      	lsls	r3, r3, #7
    1ac2:	d502      	bpl.n	1aca <_UsageFault.isra.4+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
    1ac4:	4815      	ldr	r0, [pc, #84]	; (1b1c <_UsageFault.isra.4+0x74>)
    1ac6:	f002 fd4e 	bl	4566 <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1aca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1acc:	0318      	lsls	r0, r3, #12
    1ace:	d502      	bpl.n	1ad6 <_UsageFault.isra.4+0x2e>
		PR_FAULT_INFO("  No coprocessor instructions\n");
    1ad0:	4813      	ldr	r0, [pc, #76]	; (1b20 <_UsageFault.isra.4+0x78>)
    1ad2:	f002 fd48 	bl	4566 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1ad6:	4c0e      	ldr	r4, [pc, #56]	; (1b10 <_UsageFault.isra.4+0x68>)
    1ad8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ada:	0359      	lsls	r1, r3, #13
    1adc:	d502      	bpl.n	1ae4 <_UsageFault.isra.4+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
    1ade:	4811      	ldr	r0, [pc, #68]	; (1b24 <_UsageFault.isra.4+0x7c>)
    1ae0:	f002 fd41 	bl	4566 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1ae4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ae6:	039a      	lsls	r2, r3, #14
    1ae8:	d502      	bpl.n	1af0 <_UsageFault.isra.4+0x48>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
    1aea:	480f      	ldr	r0, [pc, #60]	; (1b28 <_UsageFault.isra.4+0x80>)
    1aec:	f002 fd3b 	bl	4566 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1af0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1af2:	03db      	lsls	r3, r3, #15
    1af4:	d502      	bpl.n	1afc <_UsageFault.isra.4+0x54>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
    1af6:	480d      	ldr	r0, [pc, #52]	; (1b2c <_UsageFault.isra.4+0x84>)
    1af8:	f002 fd35 	bl	4566 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1afc:	4a04      	ldr	r2, [pc, #16]	; (1b10 <_UsageFault.isra.4+0x68>)
    1afe:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1b00:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1b04:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1b08:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    1b0a:	2000      	movs	r0, #0
    1b0c:	bd10      	pop	{r4, pc}
    1b0e:	bf00      	nop
    1b10:	e000ed00 	.word	0xe000ed00
    1b14:	000054db 	.word	0x000054db
    1b18:	000054f4 	.word	0x000054f4
    1b1c:	00005508 	.word	0x00005508
    1b20:	00005523 	.word	0x00005523
    1b24:	00005542 	.word	0x00005542
    1b28:	00005568 	.word	0x00005568
    1b2c:	00005583 	.word	0x00005583

00001b30 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
    1b30:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1b32:	4c27      	ldr	r4, [pc, #156]	; (1bd0 <_Fault+0xa0>)
    1b34:	6863      	ldr	r3, [r4, #4]
    1b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    1b3a:	1eda      	subs	r2, r3, #3
{
    1b3c:	4605      	mov	r5, r0
	switch (fault) {
    1b3e:	2a09      	cmp	r2, #9
    1b40:	d83a      	bhi.n	1bb8 <_Fault+0x88>
    1b42:	e8df f002 	tbb	[pc, r2]
    1b46:	3305      	.short	0x3305
    1b48:	39393035 	.word	0x39393035
    1b4c:	37393939 	.word	0x37393939
	PR_FAULT_INFO("***** HARD FAULT *****\n");
    1b50:	4820      	ldr	r0, [pc, #128]	; (1bd4 <_Fault+0xa4>)
    1b52:	f002 fd08 	bl	4566 <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1b56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1b58:	079a      	lsls	r2, r3, #30
    1b5a:	d503      	bpl.n	1b64 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    1b5c:	481e      	ldr	r0, [pc, #120]	; (1bd8 <_Fault+0xa8>)
	PR_FAULT_INFO(
    1b5e:	f002 fd02 	bl	4566 <printk>
    1b62:	e002      	b.n	1b6a <_Fault+0x3a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1b64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1b66:	005b      	lsls	r3, r3, #1
    1b68:	d405      	bmi.n	1b76 <_Fault+0x46>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    1b6a:	2000      	movs	r0, #0

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_NanoFatalErrorHandler(reason, esf);
    1b6c:	4629      	mov	r1, r5
}
    1b6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_NanoFatalErrorHandler(reason, esf);
    1b72:	f000 b8d1 	b.w	1d18 <z_NanoFatalErrorHandler>
		PR_EXC("  Fault escalation (see below)\n");
    1b76:	4819      	ldr	r0, [pc, #100]	; (1bdc <_Fault+0xac>)
    1b78:	f002 fcf5 	bl	4566 <printk>
		if (SCB_MMFSR != 0) {
    1b7c:	4b18      	ldr	r3, [pc, #96]	; (1be0 <_Fault+0xb0>)
    1b7e:	781b      	ldrb	r3, [r3, #0]
    1b80:	b12b      	cbz	r3, 1b8e <_Fault+0x5e>
			reason = _MpuFault(esf, 1);
    1b82:	2001      	movs	r0, #1
		reason = _MpuFault(esf, 0);
    1b84:	f7ff fef8 	bl	1978 <_MpuFault.isra.2>
	if (reason == _NANO_ERR_RECOVERABLE) {
    1b88:	2806      	cmp	r0, #6
    1b8a:	d1ef      	bne.n	1b6c <_Fault+0x3c>
}
    1b8c:	bd38      	pop	{r3, r4, r5, pc}
		} else if (SCB_BFSR != 0) {
    1b8e:	4b15      	ldr	r3, [pc, #84]	; (1be4 <_Fault+0xb4>)
    1b90:	781b      	ldrb	r3, [r3, #0]
    1b92:	b11b      	cbz	r3, 1b9c <_Fault+0x6c>
			reason = _BusFault(esf, 1);
    1b94:	2001      	movs	r0, #1
		reason = _BusFault(esf, 0);
    1b96:	f7ff ff37 	bl	1a08 <_BusFault.isra.3>
    1b9a:	e7f5      	b.n	1b88 <_Fault+0x58>
		} else if (SCB_UFSR != 0) {
    1b9c:	4b12      	ldr	r3, [pc, #72]	; (1be8 <_Fault+0xb8>)
    1b9e:	881b      	ldrh	r3, [r3, #0]
    1ba0:	b29b      	uxth	r3, r3
    1ba2:	2b00      	cmp	r3, #0
    1ba4:	d0e1      	beq.n	1b6a <_Fault+0x3a>
		reason = _UsageFault(esf);
    1ba6:	f7ff ff7f 	bl	1aa8 <_UsageFault.isra.4>
    1baa:	e7ed      	b.n	1b88 <_Fault+0x58>
		reason = _MpuFault(esf, 0);
    1bac:	2000      	movs	r0, #0
    1bae:	e7e9      	b.n	1b84 <_Fault+0x54>
		reason = _BusFault(esf, 0);
    1bb0:	2000      	movs	r0, #0
    1bb2:	e7f0      	b.n	1b96 <_Fault+0x66>
	PR_FAULT_INFO(
    1bb4:	480d      	ldr	r0, [pc, #52]	; (1bec <_Fault+0xbc>)
    1bb6:	e7d2      	b.n	1b5e <_Fault+0x2e>
	PR_FAULT_INFO("***** %s %d) *****\n",
    1bb8:	480d      	ldr	r0, [pc, #52]	; (1bf0 <_Fault+0xc0>)
    1bba:	490e      	ldr	r1, [pc, #56]	; (1bf4 <_Fault+0xc4>)
    1bbc:	f1a3 0210 	sub.w	r2, r3, #16
    1bc0:	2b0f      	cmp	r3, #15
    1bc2:	bfd8      	it	le
    1bc4:	4601      	movle	r1, r0
    1bc6:	480c      	ldr	r0, [pc, #48]	; (1bf8 <_Fault+0xc8>)
    1bc8:	f002 fccd 	bl	4566 <printk>
    1bcc:	e7cd      	b.n	1b6a <_Fault+0x3a>
    1bce:	bf00      	nop
    1bd0:	e000ed00 	.word	0xe000ed00
    1bd4:	00005357 	.word	0x00005357
    1bd8:	0000536f 	.word	0x0000536f
    1bdc:	00005391 	.word	0x00005391
    1be0:	e000ed28 	.word	0xe000ed28
    1be4:	e000ed29 	.word	0xe000ed29
    1be8:	e000ed2a 	.word	0xe000ed2a
    1bec:	000053b1 	.word	0x000053b1
    1bf0:	00005329 	.word	0x00005329
    1bf4:	0000533e 	.word	0x0000533e
    1bf8:	000053e8 	.word	0x000053e8

00001bfc <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1bfc:	4a02      	ldr	r2, [pc, #8]	; (1c08 <_FaultInit+0xc>)
    1bfe:	6953      	ldr	r3, [r2, #20]
    1c00:	f043 0310 	orr.w	r3, r3, #16
    1c04:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1c06:	4770      	bx	lr
    1c08:	e000ed00 	.word	0xe000ed00

00001c0c <z_arch_irq_enable>:
 *
 * @return N/A
 */
void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1c0c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1c0e:	2b00      	cmp	r3, #0
    1c10:	db08      	blt.n	1c24 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c12:	2201      	movs	r2, #1
    1c14:	f000 001f 	and.w	r0, r0, #31
    1c18:	fa02 f000 	lsl.w	r0, r2, r0
    1c1c:	095b      	lsrs	r3, r3, #5
    1c1e:	4a02      	ldr	r2, [pc, #8]	; (1c28 <z_arch_irq_enable+0x1c>)
    1c20:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1c24:	4770      	bx	lr
    1c26:	bf00      	nop
    1c28:	e000e100 	.word	0xe000e100

00001c2c <z_arch_irq_disable>:
 *
 * @return N/A
 */
void z_arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1c2c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1c2e:	2b00      	cmp	r3, #0
    1c30:	db0d      	blt.n	1c4e <z_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c32:	2201      	movs	r2, #1
    1c34:	095b      	lsrs	r3, r3, #5
    1c36:	f000 001f 	and.w	r0, r0, #31
    1c3a:	fa02 f000 	lsl.w	r0, r2, r0
    1c3e:	3320      	adds	r3, #32
    1c40:	4a03      	ldr	r2, [pc, #12]	; (1c50 <z_arch_irq_disable+0x24>)
    1c42:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1c46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c4a:	f3bf 8f6f 	isb	sy
}
    1c4e:	4770      	bx	lr
    1c50:	e000e100 	.word	0xe000e100

00001c54 <z_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1c54:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1c56:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c58:	bfa8      	it	ge
    1c5a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    1c5e:	f101 0101 	add.w	r1, r1, #1
    1c62:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1c66:	bfae      	itee	ge
    1c68:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c6c:	f000 000f 	andlt.w	r0, r0, #15
    1c70:	4b03      	ldrlt	r3, [pc, #12]	; (1c80 <z_irq_priority_set+0x2c>)
    1c72:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c74:	bfac      	ite	ge
    1c76:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c7a:	5419      	strblt	r1, [r3, r0]
}
    1c7c:	4770      	bx	lr
    1c7e:	bf00      	nop
    1c80:	e000ed14 	.word	0xe000ed14

00001c84 <z_new_thread>:

void z_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    1c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 * k_thread_create(). If K_THREAD_STACK_SIZEOF() is used, the
	 * Guard size has already been take out of stackSize.
	 */
	stackSize -= MPU_GUARD_ALIGN_AND_SIZE;
#endif
	stackEnd = pStackMem + stackSize;
    1c88:	188c      	adds	r4, r1, r2
{
    1c8a:	4688      	mov	r8, r1
    1c8c:	4617      	mov	r7, r2
    1c8e:	461e      	mov	r6, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1c90:	2204      	movs	r2, #4
    1c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1c94:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c96:	4605      	mov	r5, r0
    1c98:	f003 f8ce 	bl	4e38 <z_init_thread_base>

	_new_thread_init(thread, pStackMem, stackSize, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1c9c:	f1a4 0320 	sub.w	r3, r4, #32
#else
	pInitCtx->pc = (u32_t)z_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1ca0:	490c      	ldr	r1, [pc, #48]	; (1cd4 <z_new_thread+0x50>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1ca2:	f023 0307 	bic.w	r3, r3, #7

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    1ca6:	2200      	movs	r2, #0
	pInitCtx->pc &= 0xfffffffe;
    1ca8:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
    1cac:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    1cb0:	e9c5 8716 	strd	r8, r7, [r5, #88]	; 0x58
    1cb4:	6199      	str	r1, [r3, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    1cb6:	9906      	ldr	r1, [sp, #24]
    1cb8:	6059      	str	r1, [r3, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1cba:	9907      	ldr	r1, [sp, #28]
    1cbc:	6099      	str	r1, [r3, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1cbe:	9908      	ldr	r1, [sp, #32]
    1cc0:	60d9      	str	r1, [r3, #12]
	pInitCtx->xpsr =
    1cc2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
	pInitCtx->a1 = (u32_t)pEntry;
    1cc6:	601e      	str	r6, [r3, #0]
	pInitCtx->xpsr =
    1cc8:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */
#ifdef CONFIG_FLOAT
	pInitCtx->fpscr = (u32_t)0; /* clears FPU status/control register*/
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1cca:	64ab      	str	r3, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    1ccc:	666a      	str	r2, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1cd2:	bf00      	nop
    1cd4:	0000427b 	.word	0x0000427b

00001cd8 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    1cd8:	4901      	ldr	r1, [pc, #4]	; (1ce0 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    1cda:	2210      	movs	r2, #16
	str r2, [r1]
    1cdc:	600a      	str	r2, [r1, #0]
	bx lr
    1cde:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1ce0:	e000ed10 	.word	0xe000ed10

00001ce4 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1ce4:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1ce6:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    1cea:	bf30      	wfi

	bx lr
    1cec:	4770      	bx	lr
    1cee:	bf00      	nop

00001cf0 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1cf0:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1cf2:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE) && \
	!defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    1cf6:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1d14 <__bus_fault+0x24>
	ldr ip, [ip]
    1cfa:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1cfe:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1d02:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1d04:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    1d08:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    1d0c:	b501      	push	{r0, lr}
	bl _Fault
    1d0e:	f7ff ff0f 	bl	1b30 <_Fault>

	pop {r0, pc}
    1d12:	bd01      	pop	{r0, pc}
	ldr ip, =_SCS_ICSR
    1d14:	e000ed04 	.word	0xe000ed04

00001d18 <z_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void z_NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    1d18:	b538      	push	{r3, r4, r5, lr}
    1d1a:	4604      	mov	r4, r0
    1d1c:	460d      	mov	r5, r1
	LOG_PANIC();

	switch (reason) {
    1d1e:	2805      	cmp	r0, #5
    1d20:	d81a      	bhi.n	1d58 <z_NanoFatalErrorHandler+0x40>
    1d22:	e8df f000 	tbb	[pc, r0]
    1d26:	1903      	.short	0x1903
    1d28:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
    1d2c:	480d      	ldr	r0, [pc, #52]	; (1d64 <z_NanoFatalErrorHandler+0x4c>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    1d2e:	f002 fc1a 	bl	4566 <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    1d32:	f001 fdef 	bl	3914 <z_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    1d36:	69aa      	ldr	r2, [r5, #24]
    1d38:	4601      	mov	r1, r0
    1d3a:	480b      	ldr	r0, [pc, #44]	; (1d68 <z_NanoFatalErrorHandler+0x50>)
    1d3c:	f002 fc13 	bl	4566 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	z_SysFatalErrorHandler(reason, pEsf);
    1d40:	4629      	mov	r1, r5
    1d42:	4620      	mov	r0, r4
}
    1d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_SysFatalErrorHandler(reason, pEsf);
    1d48:	f000 b818 	b.w	1d7c <z_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
    1d4c:	4807      	ldr	r0, [pc, #28]	; (1d6c <z_NanoFatalErrorHandler+0x54>)
    1d4e:	e7ee      	b.n	1d2e <z_NanoFatalErrorHandler+0x16>
		printk("***** Kernel OOPS! *****\n");
    1d50:	4807      	ldr	r0, [pc, #28]	; (1d70 <z_NanoFatalErrorHandler+0x58>)
    1d52:	e7ec      	b.n	1d2e <z_NanoFatalErrorHandler+0x16>
		printk("***** Kernel Panic! *****\n");
    1d54:	4807      	ldr	r0, [pc, #28]	; (1d74 <z_NanoFatalErrorHandler+0x5c>)
    1d56:	e7ea      	b.n	1d2e <z_NanoFatalErrorHandler+0x16>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    1d58:	4601      	mov	r1, r0
    1d5a:	4807      	ldr	r0, [pc, #28]	; (1d78 <z_NanoFatalErrorHandler+0x60>)
    1d5c:	f002 fc03 	bl	4566 <printk>
		break;
    1d60:	e7e7      	b.n	1d32 <z_NanoFatalErrorHandler+0x1a>
    1d62:	bf00      	nop
    1d64:	000055af 	.word	0x000055af
    1d68:	0000564d 	.word	0x0000564d
    1d6c:	000055cf 	.word	0x000055cf
    1d70:	000055f5 	.word	0x000055f5
    1d74:	0000560f 	.word	0x0000560f
    1d78:	0000562a 	.word	0x0000562a

00001d7c <z_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1d7c:	2805      	cmp	r0, #5
{
    1d7e:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1d80:	d00c      	beq.n	1d9c <z_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || z_is_thread_essential()) {
    1d82:	f001 fe17 	bl	39b4 <k_is_in_isr>
    1d86:	b160      	cbz	r0, 1da2 <z_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1d88:	f001 fe14 	bl	39b4 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1d8c:	490c      	ldr	r1, [pc, #48]	; (1dc0 <z_SysFatalErrorHandler+0x44>)
    1d8e:	4b0d      	ldr	r3, [pc, #52]	; (1dc4 <z_SysFatalErrorHandler+0x48>)
    1d90:	2800      	cmp	r0, #0
    1d92:	bf08      	it	eq
    1d94:	4619      	moveq	r1, r3
    1d96:	480c      	ldr	r0, [pc, #48]	; (1dc8 <z_SysFatalErrorHandler+0x4c>)
    1d98:	f002 fbe5 	bl	4566 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1d9c:	f7ff ffa2 	bl	1ce4 <k_cpu_idle>
    1da0:	e7fc      	b.n	1d9c <z_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || z_is_thread_essential()) {
    1da2:	f001 fe17 	bl	39d4 <z_is_thread_essential>
    1da6:	2800      	cmp	r0, #0
    1da8:	d1ee      	bne.n	1d88 <z_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1daa:	4c08      	ldr	r4, [pc, #32]	; (1dcc <z_SysFatalErrorHandler+0x50>)
    1dac:	4808      	ldr	r0, [pc, #32]	; (1dd0 <z_SysFatalErrorHandler+0x54>)
    1dae:	68a1      	ldr	r1, [r4, #8]
    1db0:	f002 fbd9 	bl	4566 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    1db4:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1dba:	f000 b80b 	b.w	1dd4 <z_impl_k_thread_abort>
    1dbe:	bf00      	nop
    1dc0:	00005689 	.word	0x00005689
    1dc4:	0000568d 	.word	0x0000568d
    1dc8:	0000569e 	.word	0x0000569e
    1dcc:	20000264 	.word	0x20000264
    1dd0:	000056be 	.word	0x000056be

00001dd4 <z_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    1dd4:	b538      	push	{r3, r4, r5, lr}
    1dd6:	4605      	mov	r5, r0
	__asm__ volatile(
    1dd8:	f04f 0320 	mov.w	r3, #32
    1ddc:	f3ef 8411 	mrs	r4, BASEPRI
    1de0:	f383 8811 	msr	BASEPRI, r3
    1de4:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    1de8:	f003 f807 	bl	4dfa <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    1dec:	4b0a      	ldr	r3, [pc, #40]	; (1e18 <z_impl_k_thread_abort+0x44>)
    1dee:	689b      	ldr	r3, [r3, #8]
    1df0:	42ab      	cmp	r3, r5
    1df2:	d10b      	bne.n	1e0c <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1df4:	4b09      	ldr	r3, [pc, #36]	; (1e1c <z_impl_k_thread_abort+0x48>)
    1df6:	685a      	ldr	r2, [r3, #4]
    1df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1dfc:	b912      	cbnz	r2, 1e04 <z_impl_k_thread_abort+0x30>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
    1dfe:	4620      	mov	r0, r4
    1e00:	f7ff fd62 	bl	18c8 <__swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1e04:	685a      	ldr	r2, [r3, #4]
    1e06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1e0a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    1e0c:	4620      	mov	r0, r4
}
    1e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    1e12:	f002 bf6a 	b.w	4cea <z_reschedule_irqlock>
    1e16:	bf00      	nop
    1e18:	20000264 	.word	0x20000264
    1e1c:	e000ed00 	.word	0xe000ed00

00001e20 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1e20:	b501      	push	{r0, lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, z_sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1e22:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1e24:	4a0b      	ldr	r2, [pc, #44]	; (1e54 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1e26:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    1e28:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1e2a:	bf1e      	ittt	ne
	movne	r1, #0
    1e2c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1e2e:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    1e30:	f002 ff29 	blne	4c86 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1e34:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1e36:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1e3a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1e3e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1e42:	4905      	ldr	r1, [pc, #20]	; (1e58 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1e44:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1e46:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    1e48:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1e4a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
    1e4e:	4803      	ldr	r0, [pc, #12]	; (1e5c <_isr_wrapper+0x3c>)
	bx r0
    1e50:	4700      	bx	r0
    1e52:	0000      	.short	0x0000
	ldr r2, =_kernel
    1e54:	20000264 	.word	0x20000264
	ldr r1, =_sw_isr_table
    1e58:	00004edc 	.word	0x00004edc
	ldr r0, =_IntExit
    1e5c:	00001895 	.word	0x00001895

00001e60 <__reset>:
#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl _PlatformInit
#endif

    /* lock interrupts: will get unlocked when switch to main task */
    bl	lock_interrupts
    1e60:	f002 fbfe 	bl	4660 <lock_interrupts>
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
    1e64:	f000 f804 	bl	1e70 <_PrepC>

00001e68 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1e68:	bf30      	wfi
    b _SysNmiOnReset
    1e6a:	f7ff bffd 	b.w	1e68 <_SysNmiOnReset>
    1e6e:	bf00      	nop

00001e70 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1e70:	b508      	push	{r3, lr}
	process_sp = (u32_t)&_interrupt_stack + CONFIG_ISR_STACK_SIZE;
    1e72:	4b0e      	ldr	r3, [pc, #56]	; (1eac <_PrepC+0x3c>)
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1e74:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    1e78:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() | CONTROL_SPSEL_Msk);
    1e7c:	f043 0302 	orr.w	r3, r3, #2
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    1e80:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    1e84:	f3bf 8f6f 	isb	sy
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1e88:	4b09      	ldr	r3, [pc, #36]	; (1eb0 <_PrepC+0x40>)
    1e8a:	4a0a      	ldr	r2, [pc, #40]	; (1eb4 <_PrepC+0x44>)
    1e8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1e90:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1e92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e96:	f3bf 8f6f 	isb	sy
	 * gets set to _interrupt_stack during initialization.
	 */
	set_and_switch_to_psp();
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    1e9a:	f001 f8e9 	bl	3070 <z_bss_zero>
	z_data_copy();
    1e9e:	f001 f8f1 	bl	3084 <z_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	_IntLibInit();
    1ea2:	f7ff fd05 	bl	18b0 <_IntLibInit>
	z_cstart();
    1ea6:	f001 f91f 	bl	30e8 <z_cstart>
    1eaa:	bf00      	nop
    1eac:	20001678 	.word	0x20001678
    1eb0:	00000000 	.word	0x00000000
    1eb4:	e000ed00 	.word	0xe000ed00

00001eb8 <z_arch_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_static_mpu_regions(void)
{
    1eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    1eba:	4b09      	ldr	r3, [pc, #36]	; (1ee0 <z_arch_configure_static_mpu_regions+0x28>)
    1ebc:	9301      	str	r3, [sp, #4]
    1ebe:	4b09      	ldr	r3, [pc, #36]	; (1ee4 <z_arch_configure_static_mpu_regions+0x2c>)
    1ec0:	9302      	str	r3, [sp, #8]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    1ec2:	a804      	add	r0, sp, #16
		const struct k_mem_partition ramfunc_region =
    1ec4:	4b08      	ldr	r3, [pc, #32]	; (1ee8 <z_arch_configure_static_mpu_regions+0x30>)
    1ec6:	9303      	str	r3, [sp, #12]
	const struct k_mem_partition *static_regions[] = {
    1ec8:	ab01      	add	r3, sp, #4
    1eca:	f840 3d10 	str.w	r3, [r0, #-16]!
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1ece:	4a07      	ldr	r2, [pc, #28]	; (1eec <z_arch_configure_static_mpu_regions+0x34>)
    1ed0:	4b07      	ldr	r3, [pc, #28]	; (1ef0 <z_arch_configure_static_mpu_regions+0x38>)
    1ed2:	2101      	movs	r1, #1
    1ed4:	f000 f876 	bl	1fc4 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1ed8:	b005      	add	sp, #20
    1eda:	f85d fb04 	ldr.w	pc, [sp], #4
    1ede:	bf00      	nop
    1ee0:	20000000 	.word	0x20000000
    1ee4:	00000000 	.word	0x00000000
    1ee8:	060b0000 	.word	0x060b0000
    1eec:	20000000 	.word	0x20000000
    1ef0:	20010000 	.word	0x20010000

00001ef4 <_mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int _mpu_configure_region(const u8_t index,
	const struct k_mem_partition *new_region)
{
    1ef4:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	_get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    1ef6:	e9d1 4300 	ldrd	r4, r3, [r1]
 * to that power-of-two value.
 */
static inline u32_t _size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32) {
    1efa:	2b20      	cmp	r3, #32
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | _size_to_mpu_rasr_size(size);
    1efc:	6889      	ldr	r1, [r1, #8]
	if (size <= 32) {
    1efe:	d917      	bls.n	1f30 <_mpu_configure_region+0x3c>
	if (size > (1UL << 31)) {
    1f00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    1f04:	d816      	bhi.n	1f34 <_mpu_configure_region+0x40>
	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1f06:	3b01      	subs	r3, #1
    1f08:	fab3 f383 	clz	r3, r3
    1f0c:	f1c3 031f 	rsb	r3, r3, #31
    1f10:	005b      	lsls	r3, r3, #1
	if (index > (_get_num_regions() - 1)) {
    1f12:	2807      	cmp	r0, #7
    1f14:	f041 0101 	orr.w	r1, r1, #1
    1f18:	d80e      	bhi.n	1f38 <_mpu_configure_region+0x44>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1f1a:	f024 021f 	bic.w	r2, r4, #31
	MPU->RNR = index;
    1f1e:	4d08      	ldr	r5, [pc, #32]	; (1f40 <_mpu_configure_region+0x4c>)
				| MPU_RBAR_VALID_Msk | index;
    1f20:	4302      	orrs	r2, r0
    1f22:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1f26:	430b      	orrs	r3, r1
	MPU->RNR = index;
    1f28:	60a8      	str	r0, [r5, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1f2a:	60ea      	str	r2, [r5, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1f2c:	612b      	str	r3, [r5, #16]
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return _region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    1f2e:	bd30      	pop	{r4, r5, pc}
		return REGION_32B;
    1f30:	2308      	movs	r3, #8
    1f32:	e7ee      	b.n	1f12 <_mpu_configure_region+0x1e>
		return REGION_4G;
    1f34:	233e      	movs	r3, #62	; 0x3e
    1f36:	e7ec      	b.n	1f12 <_mpu_configure_region+0x1e>
		return -EINVAL;
    1f38:	f06f 0015 	mvn.w	r0, #21
	return _region_allocate_and_init(index,
    1f3c:	e7f7      	b.n	1f2e <_mpu_configure_region+0x3a>
    1f3e:	bf00      	nop
    1f40:	e000ed90 	.word	0xe000ed90

00001f44 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1f44:	4b03      	ldr	r3, [pc, #12]	; (1f54 <arm_core_mpu_enable+0x10>)
    1f46:	2205      	movs	r2, #5
    1f48:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1f4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f4e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1f52:	4770      	bx	lr
    1f54:	e000ed90 	.word	0xe000ed90

00001f58 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1f58:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1f5c:	4b01      	ldr	r3, [pc, #4]	; (1f64 <arm_core_mpu_disable+0xc>)
    1f5e:	2200      	movs	r2, #0
    1f60:	605a      	str	r2, [r3, #4]
}
    1f62:	4770      	bx	lr
    1f64:	e000ed90 	.word	0xe000ed90

00001f68 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1f68:	4913      	ldr	r1, [pc, #76]	; (1fb8 <arm_mpu_init+0x50>)
    1f6a:	6808      	ldr	r0, [r1, #0]
    1f6c:	2808      	cmp	r0, #8
{
    1f6e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1f70:	d81e      	bhi.n	1fb0 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", _get_num_regions());

	arm_core_mpu_disable();
    1f72:	f7ff fff1 	bl	1f58 <arm_core_mpu_disable>
	MPU->RNR = index;
    1f76:	4c11      	ldr	r4, [pc, #68]	; (1fbc <arm_mpu_init+0x54>)
    1f78:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	_mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1f7a:	2200      	movs	r2, #0
    1f7c:	4290      	cmp	r0, r2
    1f7e:	f101 010c 	add.w	r1, r1, #12
    1f82:	d105      	bne.n	1f90 <arm_mpu_init+0x28>
		_region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1f84:	4b0e      	ldr	r3, [pc, #56]	; (1fc0 <arm_mpu_init+0x58>)
    1f86:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    1f88:	f7ff ffdc 	bl	1f44 <arm_core_mpu_enable>
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
    1f8c:	2000      	movs	r0, #0
}
    1f8e:	bd10      	pop	{r4, pc}
    1f90:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1f92:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1f96:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1f9a:	f043 0310 	orr.w	r3, r3, #16
    1f9e:	4313      	orrs	r3, r2
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1fa0:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1fa6:	f043 0301 	orr.w	r3, r3, #1
    1faa:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1fac:	3201      	adds	r2, #1
    1fae:	e7e5      	b.n	1f7c <arm_mpu_init+0x14>
		return -1;
    1fb0:	f04f 30ff 	mov.w	r0, #4294967295
    1fb4:	e7eb      	b.n	1f8e <arm_mpu_init+0x26>
    1fb6:	bf00      	nop
    1fb8:	00005110 	.word	0x00005110
    1fbc:	e000ed90 	.word	0xe000ed90
    1fc0:	20000935 	.word	0x20000935

00001fc4 <arm_core_mpu_configure_static_mpu_regions>:
{
    1fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
static int _mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1fc6:	4c10      	ldr	r4, [pc, #64]	; (2008 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    1fc8:	4607      	mov	r7, r0
	int reg_index = start_reg_index;
    1fca:	7820      	ldrb	r0, [r4, #0]
    1fcc:	460e      	mov	r6, r1
	for (i = 0; i < regions_num; i++) {
    1fce:	2500      	movs	r5, #0
    1fd0:	42b5      	cmp	r5, r6
    1fd2:	da08      	bge.n	1fe6 <arm_core_mpu_configure_static_mpu_regions+0x22>
		if (regions[i]->size == 0) {
    1fd4:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
    1fd8:	684b      	ldr	r3, [r1, #4]
    1fda:	b193      	cbz	r3, 2002 <arm_core_mpu_configure_static_mpu_regions+0x3e>
		((part->size & (part->size - 1)) == 0)
    1fdc:	1e5a      	subs	r2, r3, #1
		&&
    1fde:	4213      	tst	r3, r2
    1fe0:	d003      	beq.n	1fea <arm_core_mpu_configure_static_mpu_regions+0x26>
			return -EINVAL;
    1fe2:	f06f 0015 	mvn.w	r0, #21
	ARG_UNUSED(background_area_end);

	mpu_reg_index = _mpu_configure_regions(static_regions,
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1fe6:	7020      	strb	r0, [r4, #0]
}
    1fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    1fea:	2b1f      	cmp	r3, #31
    1fec:	d9f9      	bls.n	1fe2 <arm_core_mpu_configure_static_mpu_regions+0x1e>
		((part->start & (part->size - 1)) == 0);
    1fee:	680b      	ldr	r3, [r1, #0]
		&&
    1ff0:	421a      	tst	r2, r3
    1ff2:	d1f6      	bne.n	1fe2 <arm_core_mpu_configure_static_mpu_regions+0x1e>
		reg_index = _mpu_configure_region(reg_index, regions[i]);
    1ff4:	b2c0      	uxtb	r0, r0
    1ff6:	f7ff ff7d 	bl	1ef4 <_mpu_configure_region>
		if (reg_index == -EINVAL) {
    1ffa:	f110 0f16 	cmn.w	r0, #22
    1ffe:	d0f0      	beq.n	1fe2 <arm_core_mpu_configure_static_mpu_regions+0x1e>
		reg_index++;
    2000:	3001      	adds	r0, #1
	for (i = 0; i < regions_num; i++) {
    2002:	3501      	adds	r5, #1
    2004:	e7e4      	b.n	1fd0 <arm_core_mpu_configure_static_mpu_regions+0xc>
    2006:	bf00      	nop
    2008:	20000935 	.word	0x20000935

0000200c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    200c:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int _mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    200e:	4b10      	ldr	r3, [pc, #64]	; (2050 <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
    2010:	4606      	mov	r6, r0
	int reg_index = start_reg_index;
    2012:	7818      	ldrb	r0, [r3, #0]
    2014:	460d      	mov	r5, r1
	for (i = 0; i < regions_num; i++) {
    2016:	2400      	movs	r4, #0
    2018:	42ac      	cmp	r4, r5
    201a:	db07      	blt.n	202c <arm_core_mpu_configure_dynamic_mpu_regions+0x20>
	 */

	mpu_reg_index = _mpu_configure_regions(dynamic_regions,
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    201c:	f110 0f16 	cmn.w	r0, #22
    2020:	d003      	beq.n	202a <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    2022:	4b0c      	ldr	r3, [pc, #48]	; (2054 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
  MPU->RASR = 0U;
    2024:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < _get_num_regions(); i++) {
    2026:	2807      	cmp	r0, #7
    2028:	dd0d      	ble.n	2046 <arm_core_mpu_configure_dynamic_mpu_regions+0x3a>
}
    202a:	bd70      	pop	{r4, r5, r6, pc}
		if (regions[i]->size == 0) {
    202c:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    2030:	684b      	ldr	r3, [r1, #4]
    2032:	b133      	cbz	r3, 2042 <arm_core_mpu_configure_dynamic_mpu_regions+0x36>
		reg_index = _mpu_configure_region(reg_index, regions[i]);
    2034:	b2c0      	uxtb	r0, r0
    2036:	f7ff ff5d 	bl	1ef4 <_mpu_configure_region>
		if (reg_index == -EINVAL) {
    203a:	f110 0f16 	cmn.w	r0, #22
    203e:	d0f4      	beq.n	202a <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		reg_index++;
    2040:	3001      	adds	r0, #1
	for (i = 0; i < regions_num; i++) {
    2042:	3401      	adds	r4, #1
    2044:	e7e8      	b.n	2018 <arm_core_mpu_configure_dynamic_mpu_regions+0xc>
  MPU->RNR = rnr;
    2046:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    2048:	611a      	str	r2, [r3, #16]
		for (int i = mpu_reg_index; i < _get_num_regions(); i++) {
    204a:	3001      	adds	r0, #1
    204c:	e7eb      	b.n	2026 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
    204e:	bf00      	nop
    2050:	20000935 	.word	0x20000935
    2054:	e000ed90 	.word	0xe000ed90

00002058 <_prf>:
	*sptr = p;
	return i;
}

int _prf(int (*func)(), void *dest, char *format, va_list vargs)
{
    2058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    205c:	b0c9      	sub	sp, #292	; 0x124
    205e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    2062:	461f      	mov	r7, r3
	int32_t			*int32ptr_temp;
	int32_t			int32_temp;
	uint32_t			uint32_temp;
	uint64_t			double_temp;

	count = 0;
    2064:	2300      	movs	r3, #0
{
    2066:	4693      	mov	fp, r2
	count = 0;
    2068:	9304      	str	r3, [sp, #16]

	while ((c = *format++)) {
    206a:	f89b 0000 	ldrb.w	r0, [fp]
    206e:	f10b 0501 	add.w	r5, fp, #1
    2072:	b148      	cbz	r0, 2088 <_prf+0x30>
		if (c != '%') {
    2074:	2825      	cmp	r0, #37	; 0x25
    2076:	d07b      	beq.n	2170 <_prf+0x118>
			if ((*func) (c, dest) == EOF) {
    2078:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
    207c:	4798      	blx	r3
    207e:	3001      	adds	r0, #1
    2080:	d106      	bne.n	2090 <_prf+0x38>
				return EOF;
    2082:	f04f 33ff 	mov.w	r3, #4294967295
    2086:	9304      	str	r3, [sp, #16]
				}
			}
		}
	}
	return count;
}
    2088:	9804      	ldr	r0, [sp, #16]
    208a:	b049      	add	sp, #292	; 0x124
    208c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			count++;
    2090:	9b04      	ldr	r3, [sp, #16]
    2092:	3301      	adds	r3, #1
    2094:	e9cd 3704 	strd	r3, r7, [sp, #16]
	while ((c = *format++)) {
    2098:	46ab      	mov	fp, r5
			if (c >= MAXFLD + 1) {
    209a:	9f05      	ldr	r7, [sp, #20]
    209c:	e7e5      	b.n	206a <_prf+0x12>
				switch (c) {
    209e:	2c23      	cmp	r4, #35	; 0x23
    20a0:	d05f      	beq.n	2162 <_prf+0x10a>
    20a2:	d854      	bhi.n	214e <_prf+0xf6>
    20a4:	2c00      	cmp	r4, #0
    20a6:	d0ef      	beq.n	2088 <_prf+0x30>
					fspace = true;
    20a8:	2c20      	cmp	r4, #32
    20aa:	bf08      	it	eq
    20ac:	f04f 0901 	moveq.w	r9, #1
					fplus = true;
    20b0:	465d      	mov	r5, fp
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    20b2:	46ab      	mov	fp, r5
    20b4:	48bf      	ldr	r0, [pc, #764]	; (23b4 <_prf+0x35c>)
    20b6:	f81b 4b01 	ldrb.w	r4, [fp], #1
    20ba:	4621      	mov	r1, r4
    20bc:	f002 faed 	bl	469a <strchr>
    20c0:	2800      	cmp	r0, #0
    20c2:	d1ec      	bne.n	209e <_prf+0x46>
			if (c == '*') {
    20c4:	2c2a      	cmp	r4, #42	; 0x2a
    20c6:	d15b      	bne.n	2180 <_prf+0x128>
				width = (int32_t) va_arg(vargs, int32_t);
    20c8:	683a      	ldr	r2, [r7, #0]
    20ca:	9203      	str	r2, [sp, #12]
				if (width < 0) {
    20cc:	2a00      	cmp	r2, #0
					width = -width;
    20ce:	bfb8      	it	lt
    20d0:	4252      	neglt	r2, r2
				width = (int32_t) va_arg(vargs, int32_t);
    20d2:	f107 0304 	add.w	r3, r7, #4
					width = -width;
    20d6:	bfb8      	it	lt
    20d8:	9203      	strlt	r2, [sp, #12]
				c = *format++;
    20da:	786c      	ldrb	r4, [r5, #1]
					fminus = true;
    20dc:	bfbc      	itt	lt
    20de:	2201      	movlt	r2, #1
    20e0:	9206      	strlt	r2, [sp, #24]
				c = *format++;
    20e2:	f105 0b02 	add.w	fp, r5, #2
				width = (int32_t) va_arg(vargs, int32_t);
    20e6:	461f      	mov	r7, r3
				width = MAXFLD;
    20e8:	9b03      	ldr	r3, [sp, #12]
    20ea:	2bc9      	cmp	r3, #201	; 0xc9
    20ec:	bf28      	it	cs
    20ee:	23c8      	movcs	r3, #200	; 0xc8
    20f0:	9303      	str	r3, [sp, #12]
			if (c == '.') {
    20f2:	2c2e      	cmp	r4, #46	; 0x2e
    20f4:	d169      	bne.n	21ca <_prf+0x172>
				if (c == '*') {
    20f6:	f89b 3000 	ldrb.w	r3, [fp]
    20fa:	2b2a      	cmp	r3, #42	; 0x2a
    20fc:	d162      	bne.n	21c4 <_prf+0x16c>
					precision = (int32_t)
    20fe:	683d      	ldr	r5, [r7, #0]
				c = *format++;
    2100:	f10b 0b01 	add.w	fp, fp, #1
					precision = (int32_t)
    2104:	3704      	adds	r7, #4
					precision = -1;
    2106:	2dc9      	cmp	r5, #201	; 0xc9
				c = *format++;
    2108:	f89b 4000 	ldrb.w	r4, [fp]
					precision = -1;
    210c:	bfa8      	it	ge
    210e:	f04f 35ff 	movge.w	r5, #4294967295
				c = *format++;
    2112:	f10b 0b01 	add.w	fp, fp, #1
			if (strchr("hlLz", c) != NULL) {
    2116:	4621      	mov	r1, r4
    2118:	48a7      	ldr	r0, [pc, #668]	; (23b8 <_prf+0x360>)
    211a:	f002 fabe 	bl	469a <strchr>
    211e:	b118      	cbz	r0, 2128 <_prf+0xd0>
				c = *format++;
    2120:	f89b 4000 	ldrb.w	r4, [fp]
    2124:	f10b 0b01 	add.w	fp, fp, #1
			switch (c) {
    2128:	2c67      	cmp	r4, #103	; 0x67
    212a:	dc7c      	bgt.n	2226 <_prf+0x1ce>
    212c:	2c65      	cmp	r4, #101	; 0x65
    212e:	f280 80e0 	bge.w	22f2 <_prf+0x29a>
    2132:	2c47      	cmp	r4, #71	; 0x47
    2134:	dc4c      	bgt.n	21d0 <_prf+0x178>
    2136:	2c45      	cmp	r4, #69	; 0x45
    2138:	f280 80db 	bge.w	22f2 <_prf+0x29a>
    213c:	2c00      	cmp	r4, #0
    213e:	d0a3      	beq.n	2088 <_prf+0x30>
    2140:	2c25      	cmp	r4, #37	; 0x25
    2142:	f000 8335 	beq.w	27b0 <_prf+0x758>
			if (c >= MAXFLD + 1) {
    2146:	2cc8      	cmp	r4, #200	; 0xc8
    2148:	f340 833c 	ble.w	27c4 <_prf+0x76c>
    214c:	e799      	b.n	2082 <_prf+0x2a>
				switch (c) {
    214e:	2c2d      	cmp	r4, #45	; 0x2d
    2150:	d00b      	beq.n	216a <_prf+0x112>
    2152:	2c30      	cmp	r4, #48	; 0x30
    2154:	d007      	beq.n	2166 <_prf+0x10e>
					fplus = true;
    2156:	2c2b      	cmp	r4, #43	; 0x2b
    2158:	9b07      	ldr	r3, [sp, #28]
    215a:	bf08      	it	eq
    215c:	2301      	moveq	r3, #1
    215e:	9307      	str	r3, [sp, #28]
    2160:	e7a6      	b.n	20b0 <_prf+0x58>
					falt = true;
    2162:	2601      	movs	r6, #1
					break;
    2164:	e7a4      	b.n	20b0 <_prf+0x58>
					pad = '0';
    2166:	9402      	str	r4, [sp, #8]
					break;
    2168:	e7a2      	b.n	20b0 <_prf+0x58>
					fminus = true;
    216a:	2301      	movs	r3, #1
    216c:	9306      	str	r3, [sp, #24]
    216e:	e79f      	b.n	20b0 <_prf+0x58>
			fminus = fplus = fspace = falt = false;
    2170:	f04f 0900 	mov.w	r9, #0
			pad = ' ';		/* Default pad character    */
    2174:	2320      	movs	r3, #32
    2176:	9302      	str	r3, [sp, #8]
			fminus = fplus = fspace = falt = false;
    2178:	e9cd 9906 	strd	r9, r9, [sp, #24]
    217c:	464e      	mov	r6, r9
    217e:	e798      	b.n	20b2 <_prf+0x5a>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    2180:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    2184:	2b09      	cmp	r3, #9
				width = 0;
    2186:	9003      	str	r0, [sp, #12]
			} else if (!isdigit(c)) {
    2188:	d8b3      	bhi.n	20f2 <_prf+0x9a>
		i = 10 * i + *p++ - '0';
    218a:	220a      	movs	r2, #10
	while (isdigit(((int) *p))) {
    218c:	46ab      	mov	fp, r5
    218e:	f81b 0b01 	ldrb.w	r0, [fp], #1
    2192:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    2196:	2b09      	cmp	r3, #9
    2198:	4604      	mov	r4, r0
    219a:	d8a5      	bhi.n	20e8 <_prf+0x90>
		i = 10 * i + *p++ - '0';
    219c:	9b03      	ldr	r3, [sp, #12]
    219e:	fb02 0003 	mla	r0, r2, r3, r0
    21a2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    21a6:	9303      	str	r3, [sp, #12]
    21a8:	465d      	mov	r5, fp
    21aa:	e7ef      	b.n	218c <_prf+0x134>
    21ac:	fb00 3505 	mla	r5, r0, r5, r3
    21b0:	3d30      	subs	r5, #48	; 0x30
    21b2:	4693      	mov	fp, r2
	while (isdigit(((int) *p))) {
    21b4:	465a      	mov	r2, fp
    21b6:	f812 3b01 	ldrb.w	r3, [r2], #1
    21ba:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    21be:	2909      	cmp	r1, #9
    21c0:	d9f4      	bls.n	21ac <_prf+0x154>
    21c2:	e7a0      	b.n	2106 <_prf+0xae>
	i = 0;
    21c4:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    21c6:	200a      	movs	r0, #10
    21c8:	e7f4      	b.n	21b4 <_prf+0x15c>
			precision = -1;	/* No precision specified   */
    21ca:	f04f 35ff 	mov.w	r5, #4294967295
    21ce:	e7a2      	b.n	2116 <_prf+0xbe>
			switch (c) {
    21d0:	2c63      	cmp	r4, #99	; 0x63
    21d2:	d06f      	beq.n	22b4 <_prf+0x25c>
    21d4:	dc32      	bgt.n	223c <_prf+0x1e4>
    21d6:	2c58      	cmp	r4, #88	; 0x58
    21d8:	d1b5      	bne.n	2146 <_prf+0xee>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    21da:	1d3b      	adds	r3, r7, #4
    21dc:	9305      	str	r3, [sp, #20]
    21de:	6839      	ldr	r1, [r7, #0]
	if (alt_form) {
    21e0:	2e00      	cmp	r6, #0
    21e2:	f000 82dc 	beq.w	279e <_prf+0x746>
		*buf++ = '0';
    21e6:	f647 0330 	movw	r3, #30768	; 0x7830
    21ea:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
		*buf++ = 'x';
    21ee:	f10d 0756 	add.w	r7, sp, #86	; 0x56
	len = _to_x(buf, value, 16, precision);
    21f2:	462b      	mov	r3, r5
    21f4:	2210      	movs	r2, #16
    21f6:	4638      	mov	r0, r7
    21f8:	f002 facf 	bl	479a <_to_x>
	if (prefix == 'X') {
    21fc:	2c58      	cmp	r4, #88	; 0x58
    21fe:	d106      	bne.n	220e <_prf+0x1b6>
    2200:	f10d 0253 	add.w	r2, sp, #83	; 0x53
	for (/**/; *buf; buf++) {
    2204:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    2208:	2b00      	cmp	r3, #0
    220a:	f040 82ca 	bne.w	27a2 <_prf+0x74a>
	return len + (buf - buf0);
    220e:	f10d 0854 	add.w	r8, sp, #84	; 0x54
			prefix = 0;
    2212:	2e00      	cmp	r6, #0
	return len + (buf - buf0);
    2214:	eba7 0808 	sub.w	r8, r7, r8
    2218:	4440      	add	r0, r8
			prefix = 0;
    221a:	bf14      	ite	ne
    221c:	f04f 0902 	movne.w	r9, #2
    2220:	f04f 0900 	moveq.w	r9, #0
    2224:	e029      	b.n	227a <_prf+0x222>
			switch (c) {
    2226:	2c70      	cmp	r4, #112	; 0x70
    2228:	f000 8294 	beq.w	2754 <_prf+0x6fc>
    222c:	dc2b      	bgt.n	2286 <_prf+0x22e>
    222e:	2c6e      	cmp	r4, #110	; 0x6e
    2230:	f000 8253 	beq.w	26da <_prf+0x682>
    2234:	f300 8257 	bgt.w	26e6 <_prf+0x68e>
    2238:	2c69      	cmp	r4, #105	; 0x69
    223a:	d184      	bne.n	2146 <_prf+0xee>
				int32_temp = (int32_t) va_arg(vargs, int32_t);
    223c:	683c      	ldr	r4, [r7, #0]
    223e:	1d3b      	adds	r3, r7, #4
	if (value < 0) {
    2240:	2c00      	cmp	r4, #0
				int32_temp = (int32_t) va_arg(vargs, int32_t);
    2242:	9305      	str	r3, [sp, #20]
	if (value < 0) {
    2244:	da42      	bge.n	22cc <_prf+0x274>
		*buf++ = '-';
    2246:	232d      	movs	r3, #45	; 0x2d
		if (value != 0x80000000) {
    2248:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
		*buf++ = '-';
    224c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		if (value != 0x80000000) {
    2250:	d041      	beq.n	22d6 <_prf+0x27e>
			value = -value;
    2252:	4261      	negs	r1, r4
		*buf++ = ' ';
    2254:	f10d 0855 	add.w	r8, sp, #85	; 0x55
	return _to_x(buf, value, 10, precision);
    2258:	462b      	mov	r3, r5
    225a:	4640      	mov	r0, r8
    225c:	220a      	movs	r2, #10
    225e:	f002 fa9c 	bl	479a <_to_x>
				if (fplus || fspace || (int32_temp < 0)) {
    2262:	9b07      	ldr	r3, [sp, #28]
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
    2264:	4480      	add	r8, r0
    2266:	a815      	add	r0, sp, #84	; 0x54
    2268:	eba8 0000 	sub.w	r0, r8, r0
				if (fplus || fspace || (int32_temp < 0)) {
    226c:	2b00      	cmp	r3, #0
    226e:	d13d      	bne.n	22ec <_prf+0x294>
    2270:	f1b9 0f00 	cmp.w	r9, #0
    2274:	d101      	bne.n	227a <_prf+0x222>
    2276:	ea4f 79d4 	mov.w	r9, r4, lsr #31
			prefix = 0;
    227a:	3501      	adds	r5, #1
    227c:	9b02      	ldr	r3, [sp, #8]
    227e:	bf18      	it	ne
    2280:	2320      	movne	r3, #32
    2282:	9302      	str	r3, [sp, #8]
    2284:	e080      	b.n	2388 <_prf+0x330>
			switch (c) {
    2286:	2c75      	cmp	r4, #117	; 0x75
    2288:	f000 8280 	beq.w	278c <_prf+0x734>
    228c:	2c78      	cmp	r4, #120	; 0x78
    228e:	d0a4      	beq.n	21da <_prf+0x182>
    2290:	2c73      	cmp	r4, #115	; 0x73
    2292:	f47f af58 	bne.w	2146 <_prf+0xee>
				cptr_temp = (char *) va_arg(vargs, char *);
    2296:	1d3b      	adds	r3, r7, #4
    2298:	6839      	ldr	r1, [r7, #0]
    229a:	9305      	str	r3, [sp, #20]
				for (c = 0; c < MAXFLD; c++) {
    229c:	2600      	movs	r6, #0
					if (cptr_temp[c] == '\0') {
    229e:	5d8b      	ldrb	r3, [r1, r6]
    22a0:	2b00      	cmp	r3, #0
    22a2:	f000 8266 	beq.w	2772 <_prf+0x71a>
				for (c = 0; c < MAXFLD; c++) {
    22a6:	3601      	adds	r6, #1
    22a8:	2ec8      	cmp	r6, #200	; 0xc8
    22aa:	d1f8      	bne.n	229e <_prf+0x246>
				if ((precision >= 0) && (precision < c)) {
    22ac:	2d00      	cmp	r5, #0
    22ae:	f280 8262 	bge.w	2776 <_prf+0x71e>
    22b2:	e266      	b.n	2782 <_prf+0x72a>
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
    22b4:	1d3b      	adds	r3, r7, #4
    22b6:	9305      	str	r3, [sp, #20]
    22b8:	683b      	ldr	r3, [r7, #0]
    22ba:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
				buf[1] = '\0';
    22be:	2300      	movs	r3, #0
    22c0:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
				c = 1;
    22c4:	2601      	movs	r6, #1
					prefix = 2;
    22c6:	f04f 0900 	mov.w	r9, #0
    22ca:	e21c      	b.n	2706 <_prf+0x6ae>
	} else if (fplus) {
    22cc:	9b07      	ldr	r3, [sp, #28]
    22ce:	b123      	cbz	r3, 22da <_prf+0x282>
		*buf++ = '+';
    22d0:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    22d2:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    22d6:	4621      	mov	r1, r4
    22d8:	e7bc      	b.n	2254 <_prf+0x1fc>
	} else if (fspace) {
    22da:	f1b9 0f00 	cmp.w	r9, #0
    22de:	d001      	beq.n	22e4 <_prf+0x28c>
		*buf++ = ' ';
    22e0:	2320      	movs	r3, #32
    22e2:	e7f6      	b.n	22d2 <_prf+0x27a>
	} else if (fspace) {
    22e4:	4621      	mov	r1, r4
    22e6:	f10d 0854 	add.w	r8, sp, #84	; 0x54
    22ea:	e7b5      	b.n	2258 <_prf+0x200>
					prefix = 1;
    22ec:	f8dd 901c 	ldr.w	r9, [sp, #28]
    22f0:	e7c3      	b.n	227a <_prf+0x222>
				u.d = (double) va_arg(vargs, double);
    22f2:	3707      	adds	r7, #7
    22f4:	f027 0707 	bic.w	r7, r7, #7
    22f8:	f107 0308 	add.w	r3, r7, #8
				double_temp = u.i;
    22fc:	e9d7 c700 	ldrd	ip, r7, [r7]
				u.d = (double) va_arg(vargs, double);
    2300:	9305      	str	r3, [sp, #20]
	fract = (double_temp << 11) & ~HIGHBIT64;
    2302:	02fb      	lsls	r3, r7, #11
    2304:	ea43 535c 	orr.w	r3, r3, ip, lsr #21
    2308:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    230c:	ea4f 22cc 	mov.w	r2, ip, lsl #11
    2310:	460b      	mov	r3, r1
	exp = double_temp >> 52 & 0x7ff;
    2312:	f3c7 580a 	ubfx	r8, r7, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    2316:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if (exp == 0x7ff) {
    231a:	f240 73ff 	movw	r3, #2047	; 0x7ff
	fract = (double_temp << 11) & ~HIGHBIT64;
    231e:	4610      	mov	r0, r2
	if (exp == 0x7ff) {
    2320:	4598      	cmp	r8, r3
	fract = (double_temp << 11) & ~HIGHBIT64;
    2322:	e9cd 0100 	strd	r0, r1, [sp]
	sign = !!(double_temp & HIGHBIT64);
    2326:	4660      	mov	r0, ip
	if (exp == 0x7ff) {
    2328:	d148      	bne.n	23bc <_prf+0x364>
		if (sign) {
    232a:	2800      	cmp	r0, #0
		if (!fract) {
    232c:	e9dd 1200 	ldrd	r1, r2, [sp]
		if (sign) {
    2330:	f177 0300 	sbcs.w	r3, r7, #0
			*buf++ = '-';
    2334:	bfb8      	it	lt
    2336:	232d      	movlt	r3, #45	; 0x2d
    2338:	a815      	add	r0, sp, #84	; 0x54
    233a:	bfb6      	itet	lt
    233c:	f88d 3054 	strblt.w	r3, [sp, #84]	; 0x54
		if (sign) {
    2340:	4603      	movge	r3, r0
			*buf++ = '-';
    2342:	f10d 0355 	addlt.w	r3, sp, #85	; 0x55
		if (!fract) {
    2346:	430a      	orrs	r2, r1
    2348:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    234c:	f103 0803 	add.w	r8, r3, #3
    2350:	d125      	bne.n	239e <_prf+0x346>
			if (isupper(c)) {
    2352:	2c19      	cmp	r4, #25
    2354:	d81d      	bhi.n	2392 <_prf+0x33a>
				*buf++ = 'I';
    2356:	2249      	movs	r2, #73	; 0x49
    2358:	701a      	strb	r2, [r3, #0]
				*buf++ = 'N';
    235a:	224e      	movs	r2, #78	; 0x4e
    235c:	705a      	strb	r2, [r3, #1]
				*buf++ = 'F';
    235e:	2246      	movs	r2, #70	; 0x46
				*buf++ = 'n';
    2360:	709a      	strb	r2, [r3, #2]
		*buf = 0;
    2362:	2200      	movs	r2, #0
    2364:	70da      	strb	r2, [r3, #3]
				if (fplus || fspace || (buf[0] == '-')) {
    2366:	9b07      	ldr	r3, [sp, #28]
	return buf - start;
    2368:	eba8 0000 	sub.w	r0, r8, r0
				if (fplus || fspace || (buf[0] == '-')) {
    236c:	2b00      	cmp	r3, #0
    236e:	f040 8255 	bne.w	281c <_prf+0x7c4>
    2372:	f1b9 0f00 	cmp.w	r9, #0
    2376:	d107      	bne.n	2388 <_prf+0x330>
    2378:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
    237c:	f1a1 032d 	sub.w	r3, r1, #45	; 0x2d
    2380:	f1d3 0900 	rsbs	r9, r3, #0
    2384:	eb49 0903 	adc.w	r9, r9, r3
			if (c >= MAXFLD + 1) {
    2388:	28c8      	cmp	r0, #200	; 0xc8
    238a:	f73f ae7a 	bgt.w	2082 <_prf+0x2a>
    238e:	4606      	mov	r6, r0
    2390:	e1b9      	b.n	2706 <_prf+0x6ae>
				*buf++ = 'i';
    2392:	2269      	movs	r2, #105	; 0x69
    2394:	701a      	strb	r2, [r3, #0]
				*buf++ = 'n';
    2396:	226e      	movs	r2, #110	; 0x6e
    2398:	705a      	strb	r2, [r3, #1]
				*buf++ = 'f';
    239a:	2266      	movs	r2, #102	; 0x66
    239c:	e7e0      	b.n	2360 <_prf+0x308>
			if (isupper(c)) {
    239e:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    23a0:	bf99      	ittee	ls
    23a2:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    23a4:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    23a6:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    23a8:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    23aa:	bf94      	ite	ls
    23ac:	701a      	strbls	r2, [r3, #0]
				*buf++ = 'n';
    23ae:	701a      	strbhi	r2, [r3, #0]
				*buf++ = 'a';
    23b0:	7059      	strb	r1, [r3, #1]
    23b2:	e7d5      	b.n	2360 <_prf+0x308>
    23b4:	000056e3 	.word	0x000056e3
    23b8:	000056e9 	.word	0x000056e9
	if ((exp | fract) != 0) {
    23bc:	e9dd 2300 	ldrd	r2, r3, [sp]
		c = 'f';
    23c0:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
    23c2:	ea42 0208 	orr.w	r2, r2, r8
    23c6:	ea43 73e8 	orr.w	r3, r3, r8, asr #31
		c = 'f';
    23ca:	bf08      	it	eq
    23cc:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    23ce:	4313      	orrs	r3, r2
    23d0:	d043      	beq.n	245a <_prf+0x402>
		fract |= HIGHBIT64;
    23d2:	e9dd 2300 	ldrd	r2, r3, [sp]
	if (decexp && sign) {
    23d6:	2800      	cmp	r0, #0
		fract |= HIGHBIT64;
    23d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    23dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if (decexp && sign) {
    23e0:	f177 0300 	sbcs.w	r3, r7, #0
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    23e4:	f2a8 38fe 	subw	r8, r8, #1022	; 0x3fe
	if (decexp && sign) {
    23e8:	da39      	bge.n	245e <_prf+0x406>
		*buf++ = '-';
    23ea:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    23ec:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    23f0:	f10d 0a55 	add.w	sl, sp, #85	; 0x55
	decexp = 0;
    23f4:	2300      	movs	r3, #0
    23f6:	9300      	str	r3, [sp, #0]
	while (exp <= -3) {
    23f8:	f118 0f02 	cmn.w	r8, #2
    23fc:	db3e      	blt.n	247c <_prf+0x424>
	while (exp > 0) {
    23fe:	f1b8 0f00 	cmp.w	r8, #0
    2402:	dc79      	bgt.n	24f8 <_prf+0x4a0>
		_rlrshift(&fract);
    2404:	a810      	add	r0, sp, #64	; 0x40
		exp++;
    2406:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    240a:	f002 f9ee 	bl	47ea <_rlrshift>
	while (exp < (0 + 4)) {
    240e:	f1b8 0f04 	cmp.w	r8, #4
    2412:	d1f7      	bne.n	2404 <_prf+0x3ac>
		precision = 6;		/* Default precision if none given */
    2414:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    2416:	f024 0320 	bic.w	r3, r4, #32
		precision = 6;		/* Default precision if none given */
    241a:	bfb8      	it	lt
    241c:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    241e:	2b47      	cmp	r3, #71	; 0x47
    2420:	f040 8097 	bne.w	2552 <_prf+0x4fa>
		if (!falt && (precision > 0)) {
    2424:	2e00      	cmp	r6, #0
    2426:	f040 8092 	bne.w	254e <_prf+0x4f6>
    242a:	1c2b      	adds	r3, r5, #0
    242c:	bf18      	it	ne
    242e:	2301      	movne	r3, #1
	prune_zero = false;		/* Assume trailing 0's allowed     */
    2430:	9308      	str	r3, [sp, #32]
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
    2432:	9b00      	ldr	r3, [sp, #0]
    2434:	3303      	adds	r3, #3
    2436:	db04      	blt.n	2442 <_prf+0x3ea>
    2438:	9a00      	ldr	r2, [sp, #0]
    243a:	1c6b      	adds	r3, r5, #1
    243c:	429a      	cmp	r2, r3
    243e:	f340 808d 	ble.w	255c <_prf+0x504>
				c = 'E';
    2442:	2c67      	cmp	r4, #103	; 0x67
    2444:	bf0c      	ite	eq
    2446:	2465      	moveq	r4, #101	; 0x65
    2448:	2445      	movne	r4, #69	; 0x45
		exp = precision + 1;
    244a:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
    244e:	2310      	movs	r3, #16
    2450:	4598      	cmp	r8, r3
    2452:	930f      	str	r3, [sp, #60]	; 0x3c
    2454:	bfa8      	it	ge
    2456:	4698      	movge	r8, r3
    2458:	e089      	b.n	256e <_prf+0x516>
	if ((exp | fract) != 0) {
    245a:	f04f 0800 	mov.w	r8, #0
	} else if (fplus) {
    245e:	9b07      	ldr	r3, [sp, #28]
    2460:	b10b      	cbz	r3, 2466 <_prf+0x40e>
		*buf++ = '+';
    2462:	232b      	movs	r3, #43	; 0x2b
    2464:	e7c2      	b.n	23ec <_prf+0x394>
	} else if (fspace) {
    2466:	f1b9 0f00 	cmp.w	r9, #0
    246a:	d001      	beq.n	2470 <_prf+0x418>
		*buf++ = ' ';
    246c:	2320      	movs	r3, #32
    246e:	e7bd      	b.n	23ec <_prf+0x394>
	} else if (fspace) {
    2470:	f10d 0a54 	add.w	sl, sp, #84	; 0x54
    2474:	e7be      	b.n	23f4 <_prf+0x39c>
			_rlrshift(&fract);
    2476:	a810      	add	r0, sp, #64	; 0x40
    2478:	f002 f9b7 	bl	47ea <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    247c:	e9dd 7c10 	ldrd	r7, ip, [sp, #64]	; 0x40
    2480:	2300      	movs	r3, #0
    2482:	930b      	str	r3, [sp, #44]	; 0x2c
    2484:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    2488:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    248c:	4aa8      	ldr	r2, [pc, #672]	; (2730 <_prf+0x6d8>)
    248e:	2300      	movs	r3, #0
    2490:	428b      	cmp	r3, r1
    2492:	bf08      	it	eq
    2494:	4282      	cmpeq	r2, r0
    2496:	f108 0801 	add.w	r8, r8, #1
    249a:	d3ec      	bcc.n	2476 <_prf+0x41e>
		fract *= 5;
    249c:	2205      	movs	r2, #5
    249e:	fba7 0102 	umull	r0, r1, r7, r2
    24a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
    24a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    24a8:	fb02 330c 	mla	r3, r2, ip, r3
    24ac:	9309      	str	r3, [sp, #36]	; 0x24
    24ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    24b2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
		decexp--;
    24b6:	9b00      	ldr	r3, [sp, #0]
    24b8:	3b01      	subs	r3, #1
    24ba:	9300      	str	r3, [sp, #0]
    24bc:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    24c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    24c2:	2300      	movs	r3, #0
    24c4:	2100      	movs	r1, #0
    24c6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    24ca:	4299      	cmp	r1, r3
    24cc:	bf08      	it	eq
    24ce:	4290      	cmpeq	r0, r2
    24d0:	d207      	bcs.n	24e2 <_prf+0x48a>
    24d2:	f1bc 0f00 	cmp.w	ip, #0
    24d6:	d08f      	beq.n	23f8 <_prf+0x3a0>
    24d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    24dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    24e0:	e78a      	b.n	23f8 <_prf+0x3a0>
			fract <<= 1;
    24e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    24e6:	1892      	adds	r2, r2, r2
    24e8:	415b      	adcs	r3, r3
    24ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
			exp--;
    24ee:	f108 38ff 	add.w	r8, r8, #4294967295
    24f2:	f04f 0c01 	mov.w	ip, #1
    24f6:	e7e3      	b.n	24c0 <_prf+0x468>
		_ldiv5(&fract);
    24f8:	a810      	add	r0, sp, #64	; 0x40
    24fa:	f002 f98a 	bl	4812 <_ldiv5>
		decexp++;
    24fe:	9b00      	ldr	r3, [sp, #0]
    2500:	3301      	adds	r3, #1
    2502:	9300      	str	r3, [sp, #0]
    2504:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2508:	e9cd 2308 	strd	r2, r3, [sp, #32]
		exp--;
    250c:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
    2510:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    2514:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2516:	2300      	movs	r3, #0
    2518:	2100      	movs	r1, #0
    251a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    251e:	4299      	cmp	r1, r3
    2520:	bf08      	it	eq
    2522:	4290      	cmpeq	r0, r2
    2524:	d208      	bcs.n	2538 <_prf+0x4e0>
    2526:	f1bc 0f00 	cmp.w	ip, #0
    252a:	f43f af68 	beq.w	23fe <_prf+0x3a6>
    252e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    2532:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    2536:	e762      	b.n	23fe <_prf+0x3a6>
			fract <<= 1;
    2538:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    253c:	1892      	adds	r2, r2, r2
    253e:	415b      	adcs	r3, r3
    2540:	e9cd 2308 	strd	r2, r3, [sp, #32]
			exp--;
    2544:	f108 38ff 	add.w	r8, r8, #4294967295
    2548:	f04f 0c01 	mov.w	ip, #1
    254c:	e7e2      	b.n	2514 <_prf+0x4bc>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    254e:	2300      	movs	r3, #0
    2550:	e76e      	b.n	2430 <_prf+0x3d8>
    2552:	2300      	movs	r3, #0
	if (c == 'f') {
    2554:	2c66      	cmp	r4, #102	; 0x66
	prune_zero = false;		/* Assume trailing 0's allowed     */
    2556:	9308      	str	r3, [sp, #32]
	if (c == 'f') {
    2558:	f47f af77 	bne.w	244a <_prf+0x3f2>
		if (exp < 0) {
    255c:	9b00      	ldr	r3, [sp, #0]
    255e:	eb13 0805 	adds.w	r8, r3, r5
    2562:	d54b      	bpl.n	25fc <_prf+0x5a4>
	digit_count = 16;
    2564:	2310      	movs	r3, #16
    2566:	930f      	str	r3, [sp, #60]	; 0x3c
    2568:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    256a:	f04f 0800 	mov.w	r8, #0
	ltemp = 0x0800000000000000;
    256e:	a948      	add	r1, sp, #288	; 0x120
    2570:	2200      	movs	r2, #0
    2572:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    2576:	e961 2336 	strd	r2, r3, [r1, #-216]!	; 0xd8
	while (exp--) {
    257a:	f118 38ff 	adds.w	r8, r8, #4294967295
    257e:	d23f      	bcs.n	2600 <_prf+0x5a8>
	fract += ltemp;
    2580:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2584:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    2588:	1817      	adds	r7, r2, r0
    258a:	eb43 0801 	adc.w	r8, r3, r1
    258e:	463a      	mov	r2, r7
    2590:	4643      	mov	r3, r8
    2592:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if ((fract >> 32) & 0xF0000000) {
    2596:	f008 4270 	and.w	r2, r8, #4026531840	; 0xf0000000
    259a:	2300      	movs	r3, #0
    259c:	4313      	orrs	r3, r2
    259e:	d008      	beq.n	25b2 <_prf+0x55a>
		_ldiv5(&fract);
    25a0:	a810      	add	r0, sp, #64	; 0x40
    25a2:	f002 f936 	bl	4812 <_ldiv5>
		_rlrshift(&fract);
    25a6:	a810      	add	r0, sp, #64	; 0x40
    25a8:	f002 f91f 	bl	47ea <_rlrshift>
		decexp++;
    25ac:	9b00      	ldr	r3, [sp, #0]
    25ae:	3301      	adds	r3, #1
    25b0:	9300      	str	r3, [sp, #0]
	if (c == 'f') {
    25b2:	2c66      	cmp	r4, #102	; 0x66
    25b4:	f10a 0801 	add.w	r8, sl, #1
    25b8:	d140      	bne.n	263c <_prf+0x5e4>
		if (decexp > 0) {
    25ba:	9b00      	ldr	r3, [sp, #0]
    25bc:	2b00      	cmp	r3, #0
    25be:	dd29      	ble.n	2614 <_prf+0x5bc>
    25c0:	4453      	add	r3, sl
    25c2:	4698      	mov	r8, r3
				*buf++ = _get_digit(&fract, &digit_count);
    25c4:	a90f      	add	r1, sp, #60	; 0x3c
    25c6:	a810      	add	r0, sp, #64	; 0x40
    25c8:	f002 f954 	bl	4874 <_get_digit>
    25cc:	f80a 0b01 	strb.w	r0, [sl], #1
			while (decexp > 0) {
    25d0:	45c2      	cmp	sl, r8
    25d2:	d1f7      	bne.n	25c4 <_prf+0x56c>
    25d4:	2300      	movs	r3, #0
    25d6:	9300      	str	r3, [sp, #0]
		if (falt || (precision > 0)) {
    25d8:	b906      	cbnz	r6, 25dc <_prf+0x584>
    25da:	b15d      	cbz	r5, 25f4 <_prf+0x59c>
			*buf++ = '.';
    25dc:	232e      	movs	r3, #46	; 0x2e
    25de:	f888 3000 	strb.w	r3, [r8]
    25e2:	4646      	mov	r6, r8
    25e4:	eb08 0305 	add.w	r3, r8, r5
				*buf++ = '0';
    25e8:	f04f 0a30 	mov.w	sl, #48	; 0x30
		while (precision-- > 0) {
    25ec:	42b3      	cmp	r3, r6
    25ee:	d115      	bne.n	261c <_prf+0x5c4>
    25f0:	3501      	adds	r5, #1
    25f2:	44a8      	add	r8, r5
	if (prune_zero) {
    25f4:	9b08      	ldr	r3, [sp, #32]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d139      	bne.n	266e <_prf+0x616>
    25fa:	e060      	b.n	26be <_prf+0x666>
		if (exp < 0) {
    25fc:	2466      	movs	r4, #102	; 0x66
    25fe:	e726      	b.n	244e <_prf+0x3f6>
		_ldiv5(&ltemp);
    2600:	4608      	mov	r0, r1
    2602:	910a      	str	r1, [sp, #40]	; 0x28
    2604:	f002 f905 	bl	4812 <_ldiv5>
		_rlrshift(&ltemp);
    2608:	990a      	ldr	r1, [sp, #40]	; 0x28
    260a:	4608      	mov	r0, r1
    260c:	f002 f8ed 	bl	47ea <_rlrshift>
    2610:	990a      	ldr	r1, [sp, #40]	; 0x28
    2612:	e7b2      	b.n	257a <_prf+0x522>
			*buf++ = '0';
    2614:	2330      	movs	r3, #48	; 0x30
    2616:	f88a 3000 	strb.w	r3, [sl]
    261a:	e7dd      	b.n	25d8 <_prf+0x580>
			if (decexp < 0) {
    261c:	9a00      	ldr	r2, [sp, #0]
    261e:	b12a      	cbz	r2, 262c <_prf+0x5d4>
				decexp++;
    2620:	3201      	adds	r2, #1
				*buf++ = '0';
    2622:	f886 a001 	strb.w	sl, [r6, #1]
				decexp++;
    2626:	9200      	str	r2, [sp, #0]
    2628:	3601      	adds	r6, #1
    262a:	e7df      	b.n	25ec <_prf+0x594>
				*buf++ = _get_digit(&fract, &digit_count);
    262c:	a90f      	add	r1, sp, #60	; 0x3c
    262e:	a810      	add	r0, sp, #64	; 0x40
    2630:	930a      	str	r3, [sp, #40]	; 0x28
    2632:	f002 f91f 	bl	4874 <_get_digit>
    2636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2638:	7070      	strb	r0, [r6, #1]
    263a:	e7f5      	b.n	2628 <_prf+0x5d0>
		*buf = _get_digit(&fract, &digit_count);
    263c:	a90f      	add	r1, sp, #60	; 0x3c
    263e:	a810      	add	r0, sp, #64	; 0x40
    2640:	f002 f918 	bl	4874 <_get_digit>
		if (*buf++ != '0') {
    2644:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    2646:	bf18      	it	ne
    2648:	9b00      	ldrne	r3, [sp, #0]
		*buf = _get_digit(&fract, &digit_count);
    264a:	f88a 0000 	strb.w	r0, [sl]
			decexp--;
    264e:	bf1c      	itt	ne
    2650:	f103 33ff 	addne.w	r3, r3, #4294967295
    2654:	9300      	strne	r3, [sp, #0]
		if (falt || (precision > 0)) {
    2656:	b906      	cbnz	r6, 265a <_prf+0x602>
    2658:	b13d      	cbz	r5, 266a <_prf+0x612>
			*buf++ = '.';
    265a:	f10a 0802 	add.w	r8, sl, #2
    265e:	232e      	movs	r3, #46	; 0x2e
    2660:	f88a 3001 	strb.w	r3, [sl, #1]
    2664:	4445      	add	r5, r8
		while (precision-- > 0) {
    2666:	4545      	cmp	r5, r8
    2668:	d12e      	bne.n	26c8 <_prf+0x670>
	if (prune_zero) {
    266a:	9b08      	ldr	r3, [sp, #32]
    266c:	b143      	cbz	r3, 2680 <_prf+0x628>
		while (*--buf == '0')
    266e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
    2672:	2a30      	cmp	r2, #48	; 0x30
    2674:	f108 33ff 	add.w	r3, r8, #4294967295
    2678:	d02d      	beq.n	26d6 <_prf+0x67e>
    267a:	2a2e      	cmp	r2, #46	; 0x2e
    267c:	bf08      	it	eq
    267e:	4698      	moveq	r8, r3
	if ((c == 'e') || (c == 'E')) {
    2680:	f024 0320 	bic.w	r3, r4, #32
    2684:	2b45      	cmp	r3, #69	; 0x45
    2686:	d11a      	bne.n	26be <_prf+0x666>
		if (decexp < 0) {
    2688:	9b00      	ldr	r3, [sp, #0]
		*buf++ = (char) c;
    268a:	f888 4000 	strb.w	r4, [r8]
		if (decexp < 0) {
    268e:	2b00      	cmp	r3, #0
			decexp = -decexp;
    2690:	bfbb      	ittet	lt
    2692:	425b      	neglt	r3, r3
    2694:	9300      	strlt	r3, [sp, #0]
			*buf++ = '+';
    2696:	232b      	movge	r3, #43	; 0x2b
			*buf++ = '-';
    2698:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    269a:	f888 3001 	strb.w	r3, [r8, #1]
		*buf++ = (char) ((decexp / 10) + '0');
    269e:	220a      	movs	r2, #10
    26a0:	9b00      	ldr	r3, [sp, #0]
    26a2:	fb93 f3f2 	sdiv	r3, r3, r2
    26a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
    26aa:	f888 1002 	strb.w	r1, [r8, #2]
		decexp %= 10;
    26ae:	9900      	ldr	r1, [sp, #0]
    26b0:	fb02 1713 	mls	r7, r2, r3, r1
		*buf++ = (char) (decexp + '0');
    26b4:	3730      	adds	r7, #48	; 0x30
    26b6:	f888 7003 	strb.w	r7, [r8, #3]
    26ba:	f108 0804 	add.w	r8, r8, #4
	*buf = 0;
    26be:	2300      	movs	r3, #0
    26c0:	f888 3000 	strb.w	r3, [r8]
	return buf - start;
    26c4:	a815      	add	r0, sp, #84	; 0x54
    26c6:	e64e      	b.n	2366 <_prf+0x30e>
			*buf++ = _get_digit(&fract, &digit_count);
    26c8:	a90f      	add	r1, sp, #60	; 0x3c
    26ca:	a810      	add	r0, sp, #64	; 0x40
    26cc:	f002 f8d2 	bl	4874 <_get_digit>
    26d0:	f808 0b01 	strb.w	r0, [r8], #1
    26d4:	e7c7      	b.n	2666 <_prf+0x60e>
		while (*--buf == '0')
    26d6:	4698      	mov	r8, r3
    26d8:	e7c9      	b.n	266e <_prf+0x616>
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
    26da:	1d3b      	adds	r3, r7, #4
    26dc:	9305      	str	r3, [sp, #20]
				*int32ptr_temp = count;
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	9a04      	ldr	r2, [sp, #16]
    26e2:	601a      	str	r2, [r3, #0]
				break;
    26e4:	e4d9      	b.n	209a <_prf+0x42>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    26e6:	1d3b      	adds	r3, r7, #4
    26e8:	9305      	str	r3, [sp, #20]
    26ea:	6839      	ldr	r1, [r7, #0]
	if (alt_form) {
    26ec:	b316      	cbz	r6, 2734 <_prf+0x6dc>
		*buf++ = '0';
    26ee:	2330      	movs	r3, #48	; 0x30
    26f0:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		if (!value) {
    26f4:	bb59      	cbnz	r1, 274e <_prf+0x6f6>
			prefix = 0;
    26f6:	3501      	adds	r5, #1
    26f8:	9b02      	ldr	r3, [sp, #8]
			*buf++ = 0;
    26fa:	f88d 1055 	strb.w	r1, [sp, #85]	; 0x55
			prefix = 0;
    26fe:	bf18      	it	ne
    2700:	2320      	movne	r3, #32
    2702:	4689      	mov	r9, r1
    2704:	9302      	str	r3, [sp, #8]
				if (c < width) {
    2706:	9b03      	ldr	r3, [sp, #12]
    2708:	42b3      	cmp	r3, r6
    270a:	f340 8085 	ble.w	2818 <_prf+0x7c0>
					if (fminus) {
    270e:	9b06      	ldr	r3, [sp, #24]
    2710:	ad15      	add	r5, sp, #84	; 0x54
    2712:	2b00      	cmp	r3, #0
    2714:	d058      	beq.n	27c8 <_prf+0x770>
							buf[i] = ' ';
    2716:	2320      	movs	r3, #32
						for (i = c; i < width; i++)
    2718:	9a03      	ldr	r2, [sp, #12]
							buf[i] = ' ';
    271a:	55ab      	strb	r3, [r5, r6]
						for (i = c; i < width; i++)
    271c:	3601      	adds	r6, #1
    271e:	42b2      	cmp	r2, r6
    2720:	d1fa      	bne.n	2718 <_prf+0x6c0>
    2722:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
					if ((*func)(*cptr, dest) == EOF) {
    2726:	ac15      	add	r4, sp, #84	; 0x54
    2728:	4413      	add	r3, r2
    272a:	461d      	mov	r5, r3
    272c:	1aa4      	subs	r4, r4, r2
    272e:	e06f      	b.n	2810 <_prf+0x7b8>
    2730:	33333332 	.word	0x33333332
	if (alt_form) {
    2734:	a815      	add	r0, sp, #84	; 0x54
	return (buf - buf0) + _to_x(buf, value, 8, precision);
    2736:	f10d 0854 	add.w	r8, sp, #84	; 0x54
    273a:	462b      	mov	r3, r5
    273c:	2208      	movs	r2, #8
    273e:	eba0 0808 	sub.w	r8, r0, r8
    2742:	f002 f82a 	bl	479a <_to_x>
    2746:	4440      	add	r0, r8
			prefix = 0;
    2748:	f04f 0900 	mov.w	r9, #0
    274c:	e595      	b.n	227a <_prf+0x222>
		*buf++ = '0';
    274e:	f10d 0055 	add.w	r0, sp, #85	; 0x55
    2752:	e7f0      	b.n	2736 <_prf+0x6de>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    2754:	1d3b      	adds	r3, r7, #4
    2756:	9305      	str	r3, [sp, #20]
		*buf++ = '0';
    2758:	f647 0330 	movw	r3, #30768	; 0x7830
    275c:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    2760:	6839      	ldr	r1, [r7, #0]
	len = _to_x(buf, value, 16, precision);
    2762:	2308      	movs	r3, #8
    2764:	2210      	movs	r2, #16
    2766:	f10d 0056 	add.w	r0, sp, #86	; 0x56
    276a:	f002 f816 	bl	479a <_to_x>
	return len + (buf - buf0);
    276e:	3002      	adds	r0, #2
    2770:	e7ea      	b.n	2748 <_prf+0x6f0>
				if ((precision >= 0) && (precision < c)) {
    2772:	2d00      	cmp	r5, #0
    2774:	db02      	blt.n	277c <_prf+0x724>
    2776:	42ae      	cmp	r6, r5
    2778:	bfa8      	it	ge
    277a:	462e      	movge	r6, r5
				if (c > 0) {
    277c:	2e00      	cmp	r6, #0
    277e:	f43f ac8c 	beq.w	209a <_prf+0x42>
					memcpy(buf, cptr_temp, (size_t) c);
    2782:	4632      	mov	r2, r6
    2784:	a815      	add	r0, sp, #84	; 0x54
    2786:	f001 ffba 	bl	46fe <memcpy>
    278a:	e59c      	b.n	22c6 <_prf+0x26e>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    278c:	1d3b      	adds	r3, r7, #4
    278e:	9305      	str	r3, [sp, #20]
	return _to_x(buf, value, 10, precision);
    2790:	220a      	movs	r2, #10
    2792:	462b      	mov	r3, r5
    2794:	6839      	ldr	r1, [r7, #0]
    2796:	a815      	add	r0, sp, #84	; 0x54
    2798:	f001 ffff 	bl	479a <_to_x>
    279c:	e7d4      	b.n	2748 <_prf+0x6f0>
	if (alt_form) {
    279e:	af15      	add	r7, sp, #84	; 0x54
    27a0:	e527      	b.n	21f2 <_prf+0x19a>
		if (*buf >= 'a' && *buf <= 'z') {
    27a2:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    27a6:	2919      	cmp	r1, #25
			*buf += 'A' - 'a';
    27a8:	bf9c      	itt	ls
    27aa:	3b20      	subls	r3, #32
    27ac:	7013      	strbls	r3, [r2, #0]
    27ae:	e529      	b.n	2204 <_prf+0x1ac>
				if ((*func)('%', dest) == EOF) {
    27b0:	990d      	ldr	r1, [sp, #52]	; 0x34
    27b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    27b4:	4620      	mov	r0, r4
    27b6:	4798      	blx	r3
    27b8:	3001      	adds	r0, #1
    27ba:	f43f ac62 	beq.w	2082 <_prf+0x2a>
				count++;
    27be:	9b04      	ldr	r3, [sp, #16]
    27c0:	3301      	adds	r3, #1
    27c2:	9304      	str	r3, [sp, #16]
			if (c >= MAXFLD + 1) {
    27c4:	9705      	str	r7, [sp, #20]
    27c6:	e468      	b.n	209a <_prf+0x42>
						(void) memmove((buf + (width - c)), buf, (size_t) (c
    27c8:	9b03      	ldr	r3, [sp, #12]
    27ca:	1b9c      	subs	r4, r3, r6
    27cc:	1c72      	adds	r2, r6, #1
    27ce:	1928      	adds	r0, r5, r4
    27d0:	4629      	mov	r1, r5
    27d2:	f001 ff7d 	bl	46d0 <memmove>
						if (pad == ' ')
    27d6:	9b06      	ldr	r3, [sp, #24]
    27d8:	9a02      	ldr	r2, [sp, #8]
    27da:	2a20      	cmp	r2, #32
    27dc:	bf18      	it	ne
    27de:	464b      	movne	r3, r9
    27e0:	9306      	str	r3, [sp, #24]
						c = width - c + prefix;
    27e2:	441c      	add	r4, r3
						for (i = prefix; i < c; i++)
    27e4:	9b06      	ldr	r3, [sp, #24]
    27e6:	42a3      	cmp	r3, r4
    27e8:	da9b      	bge.n	2722 <_prf+0x6ca>
							buf[i] = pad;
    27ea:	9b06      	ldr	r3, [sp, #24]
    27ec:	461a      	mov	r2, r3
    27ee:	9b02      	ldr	r3, [sp, #8]
    27f0:	54ab      	strb	r3, [r5, r2]
						for (i = prefix; i < c; i++)
    27f2:	4613      	mov	r3, r2
    27f4:	3301      	adds	r3, #1
    27f6:	9306      	str	r3, [sp, #24]
    27f8:	e7f4      	b.n	27e4 <_prf+0x78c>
					if ((*func)(*cptr, dest) == EOF) {
    27fa:	9b04      	ldr	r3, [sp, #16]
    27fc:	990d      	ldr	r1, [sp, #52]	; 0x34
    27fe:	5ce0      	ldrb	r0, [r4, r3]
    2800:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2802:	4798      	blx	r3
    2804:	3001      	adds	r0, #1
    2806:	f43f ac3c 	beq.w	2082 <_prf+0x2a>
				for (cptr = buf; c > 0; c--, cptr++, count++) {
    280a:	9b04      	ldr	r3, [sp, #16]
    280c:	3301      	adds	r3, #1
    280e:	9304      	str	r3, [sp, #16]
    2810:	9b04      	ldr	r3, [sp, #16]
    2812:	42ab      	cmp	r3, r5
    2814:	d1f1      	bne.n	27fa <_prf+0x7a2>
    2816:	e440      	b.n	209a <_prf+0x42>
    2818:	9603      	str	r6, [sp, #12]
    281a:	e782      	b.n	2722 <_prf+0x6ca>
					prefix = 1;
    281c:	f8dd 901c 	ldr.w	r9, [sp, #28]
    2820:	e5b2      	b.n	2388 <_prf+0x330>
    2822:	bf00      	nop

00002824 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2824:	4b01      	ldr	r3, [pc, #4]	; (282c <__stdout_hook_install+0x8>)
    2826:	6018      	str	r0, [r3, #0]
}
    2828:	4770      	bx	lr
    282a:	bf00      	nop
    282c:	20001684 	.word	0x20001684

00002830 <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
    2830:	b40e      	push	{r1, r2, r3}
    2832:	b50f      	push	{r0, r1, r2, r3, lr}
    2834:	ab05      	add	r3, sp, #20

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    2836:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
    283a:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
    283e:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    2840:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = _prf(sprintf_out, (void *) (&p), format, vargs);
    2842:	4806      	ldr	r0, [pc, #24]	; (285c <sprintf+0x2c>)
	va_start(vargs, format);
    2844:	9301      	str	r3, [sp, #4]
	r = _prf(sprintf_out, (void *) (&p), format, vargs);
    2846:	a902      	add	r1, sp, #8
    2848:	f7ff fc06 	bl	2058 <_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    284c:	9b02      	ldr	r3, [sp, #8]
    284e:	2200      	movs	r2, #0
    2850:	701a      	strb	r2, [r3, #0]
	return r;
}
    2852:	b004      	add	sp, #16
    2854:	f85d eb04 	ldr.w	lr, [sp], #4
    2858:	b003      	add	sp, #12
    285a:	4770      	bx	lr
    285c:	000048b1 	.word	0x000048b1

00002860 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    2860:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    2862:	4b09      	ldr	r3, [pc, #36]	; (2888 <gpio_nrfx_init+0x28>)
    2864:	781a      	ldrb	r2, [r3, #0]
    2866:	b96a      	cbnz	r2, 2884 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    2868:	2101      	movs	r1, #1
    286a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ,
    286c:	2006      	movs	r0, #6
    286e:	2105      	movs	r1, #5
    2870:	f7ff f9f0 	bl	1c54 <z_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ);
    2874:	2006      	movs	r0, #6
    2876:	f7ff f9c9 	bl	1c0c <z_arch_irq_enable>
    return ((uint32_t)NRF_GPIOTE + event);
}

__STATIC_INLINE void nrf_gpiote_int_enable(uint32_t mask)
{
    NRF_GPIOTE->INTENSET = mask;
    287a:	4b04      	ldr	r3, [pc, #16]	; (288c <gpio_nrfx_init+0x2c>)
    287c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2880:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    2884:	2000      	movs	r0, #0
    2886:	bd08      	pop	{r3, pc}
    2888:	20000936 	.word	0x20000936
    288c:	40006000 	.word	0x40006000

00002890 <gpiote_event_handler>:
{
    2890:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    2894:	4e4a      	ldr	r6, [pc, #296]	; (29c0 <gpiote_event_handler+0x130>)
    2896:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
    2898:	2d01      	cmp	r5, #1
    289a:	d163      	bne.n	2964 <gpiote_event_handler+0xd4>
	struct gpio_nrfx_data *data = get_port_data(port);
    289c:	4a49      	ldr	r2, [pc, #292]	; (29c4 <gpiote_event_handler+0x134>)
    289e:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
    28a0:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    28a2:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
    28a4:	f8d2 8008 	ldr.w	r8, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
    28a8:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
    28ac:	400a      	ands	r2, r1
	out &= ~data->trig_edge & ~data->double_edge;
    28ae:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
    28b2:	4301      	orrs	r1, r0
    28b4:	ea22 0201 	bic.w	r2, r2, r1
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    28b8:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    28bc:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
    28be:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
    28c2:	405c      	eors	r4, r3
    28c4:	404c      	eors	r4, r1
	u32_t out = pin_states & level_pins;
    28c6:	ea22 0404 	bic.w	r4, r2, r4
	u32_t bit = 1U << pin;
    28ca:	462f      	mov	r7, r5
	u32_t pin = 0;
    28cc:	f04f 0900 	mov.w	r9, #0
	while (level_pins) {
    28d0:	2a00      	cmp	r2, #0
    28d2:	d136      	bne.n	2942 <gpiote_event_handler+0xb2>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    28d4:	6032      	str	r2, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    28d6:	6833      	ldr	r3, [r6, #0]
    28d8:	9300      	str	r3, [sp, #0]
    (void)dummy;
    28da:	9b00      	ldr	r3, [sp, #0]
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
    28dc:	4e3a      	ldr	r6, [pc, #232]	; (29c8 <gpiote_event_handler+0x138>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
    28de:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
    28e0:	2701      	movs	r7, #1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    28e2:	469c      	mov	ip, r3
    return (NRF_GPIOTE->INTENSET & mask);
    28e4:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
    28e8:	fa07 f103 	lsl.w	r1, r7, r3
    28ec:	4211      	tst	r1, r2
    28ee:	d014      	beq.n	291a <gpiote_event_handler+0x8a>
    28f0:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
    28f4:	f502 52c2 	add.w	r2, r2, #6208	; 0x1840
    28f8:	0092      	lsls	r2, r2, #2
    28fa:	6811      	ldr	r1, [r2, #0]
    28fc:	2901      	cmp	r1, #1
    28fe:	d10c      	bne.n	291a <gpiote_event_handler+0x8a>
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2900:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    2904:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    2908:	f8c2 c000 	str.w	ip, [r2]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    290c:	6812      	ldr	r2, [r2, #0]
    290e:	9201      	str	r2, [sp, #4]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2910:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32] |= BIT(abs_pin % 32);
    2914:	4081      	lsls	r1, r0
    (void)dummy;
    2916:	9a01      	ldr	r2, [sp, #4]
    2918:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    291a:	3301      	adds	r3, #1
    291c:	2b08      	cmp	r3, #8
    291e:	d1e1      	bne.n	28e4 <gpiote_event_handler+0x54>
	if (fired_triggers[0]) {
    2920:	b314      	cbz	r4, 2968 <gpiote_event_handler+0xd8>
	_gpio_fire_callbacks(&get_port_data(port)->callbacks, port, pins);
    2922:	4f28      	ldr	r7, [pc, #160]	; (29c4 <gpiote_event_handler+0x134>)
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2924:	68bb      	ldr	r3, [r7, #8]
    2926:	6819      	ldr	r1, [r3, #0]
    2928:	b1f1      	cbz	r1, 2968 <gpiote_event_handler+0xd8>

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    292a:	680e      	ldr	r6, [r1, #0]
		if (cb->pin_mask & pins) {
    292c:	688b      	ldr	r3, [r1, #8]
    292e:	421c      	tst	r4, r3
    2930:	d003      	beq.n	293a <gpiote_event_handler+0xaa>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    2932:	684b      	ldr	r3, [r1, #4]
    2934:	4622      	mov	r2, r4
    2936:	4638      	mov	r0, r7
    2938:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    293a:	b1ae      	cbz	r6, 2968 <gpiote_event_handler+0xd8>
    293c:	4631      	mov	r1, r6
    293e:	6836      	ldr	r6, [r6, #0]
    2940:	e7f4      	b.n	292c <gpiote_event_handler+0x9c>
		if (level_pins & bit) {
    2942:	423a      	tst	r2, r7
    2944:	d00a      	beq.n	295c <gpiote_event_handler+0xcc>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2946:	f898 3004 	ldrb.w	r3, [r8, #4]
    294a:	f009 001f 	and.w	r0, r9, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    294e:	2100      	movs	r1, #0
    2950:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    2954:	f001 ffb9 	bl	48ca <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    2958:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
    295c:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    2960:	007f      	lsls	r7, r7, #1
    2962:	e7b5      	b.n	28d0 <gpiote_event_handler+0x40>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    2964:	2400      	movs	r4, #0
    2966:	e7b9      	b.n	28dc <gpiote_event_handler+0x4c>
	if (port_event) {
    2968:	2d01      	cmp	r5, #1
    296a:	d10d      	bne.n	2988 <gpiote_event_handler+0xf8>
	const struct gpio_nrfx_data *data = get_port_data(port);
    296c:	4b15      	ldr	r3, [pc, #84]	; (29c4 <gpiote_event_handler+0x134>)
    296e:	689c      	ldr	r4, [r3, #8]
	return port->config->config_info;
    2970:	681b      	ldr	r3, [r3, #0]
    2972:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    2974:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    2978:	401a      	ands	r2, r3
	out &= ~data->trig_edge & ~data->double_edge;
    297a:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
    297e:	430b      	orrs	r3, r1
    2980:	ea22 0203 	bic.w	r2, r2, r3
	u32_t pin = 0;
    2984:	2600      	movs	r6, #0
	while (level_pins) {
    2986:	b912      	cbnz	r2, 298e <gpiote_event_handler+0xfe>
}
    2988:	b003      	add	sp, #12
    298a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
    298e:	4215      	tst	r5, r2
    2990:	d012      	beq.n	29b8 <gpiote_event_handler+0x128>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    2992:	69e1      	ldr	r1, [r4, #28]
    2994:	6923      	ldr	r3, [r4, #16]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2996:	f897 c004 	ldrb.w	ip, [r7, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    299a:	404b      	eors	r3, r1
    299c:	40f3      	lsrs	r3, r6
		return NRF_GPIO_PIN_SENSE_HIGH;
    299e:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    29a2:	f006 001f 	and.w	r0, r6, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    29a6:	bf0c      	ite	eq
    29a8:	2103      	moveq	r1, #3
    29aa:	2102      	movne	r1, #2
    29ac:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
    29b0:	f001 ff8b 	bl	48ca <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    29b4:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
    29b8:	3601      	adds	r6, #1
		bit <<= 1;
    29ba:	006d      	lsls	r5, r5, #1
    29bc:	e7e3      	b.n	2986 <gpiote_event_handler+0xf6>
    29be:	bf00      	nop
    29c0:	4000617c 	.word	0x4000617c
    29c4:	2000176c 	.word	0x2000176c
    29c8:	40006000 	.word	0x40006000

000029cc <gpiote_pin_int_cfg>:
{
    29cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return port->config->config_info;
    29ce:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
    29d0:	6886      	ldr	r6, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    29d2:	689b      	ldr	r3, [r3, #8]
    29d4:	f001 041f 	and.w	r4, r1, #31
{
    29d8:	460d      	mov	r5, r1
    return (NRF_GPIOTE->INTENSET & mask);
    29da:	494c      	ldr	r1, [pc, #304]	; (2b0c <gpiote_pin_int_cfg+0x140>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    29dc:	791b      	ldrb	r3, [r3, #4]
    29de:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    29e2:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
    29e6:	b2d2      	uxtb	r2, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    29e8:	2300      	movs	r3, #0
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    29ea:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    29ee:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    29f2:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
    29f6:	4284      	cmp	r4, r0
    29f8:	d16c      	bne.n	2ad4 <gpiote_pin_int_cfg+0x108>
		    && (intenset & BIT(i))) {
    29fa:	fa22 f003 	lsr.w	r0, r2, r3
    29fe:	07c0      	lsls	r0, r0, #31
    2a00:	d568      	bpl.n	2ad4 <gpiote_pin_int_cfg+0x108>
    2a02:	009a      	lsls	r2, r3, #2
    2a04:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2a08:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    2a0c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    2a10:	f020 0001 	bic.w	r0, r0, #1
    2a14:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
    2a18:	2201      	movs	r2, #1
    2a1a:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENCLR = mask;
    2a1e:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    2a22:	4620      	mov	r0, r4
    2a24:	2100      	movs	r1, #0
    2a26:	f001 ff50 	bl	48ca <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    2a2a:	68b0      	ldr	r0, [r6, #8]
    2a2c:	40e8      	lsrs	r0, r5
    2a2e:	f010 0001 	ands.w	r0, r0, #1
    2a32:	d04d      	beq.n	2ad0 <gpiote_pin_int_cfg+0x104>
    2a34:	68f0      	ldr	r0, [r6, #12]
    2a36:	40e8      	lsrs	r0, r5
    2a38:	f010 0001 	ands.w	r0, r0, #1
    2a3c:	d048      	beq.n	2ad0 <gpiote_pin_int_cfg+0x104>
		if (data->trig_edge & BIT(pin)) {
    2a3e:	6970      	ldr	r0, [r6, #20]
    2a40:	40e8      	lsrs	r0, r5
    2a42:	f010 0201 	ands.w	r2, r0, #1
    2a46:	d051      	beq.n	2aec <gpiote_pin_int_cfg+0x120>
			if (data->double_edge & BIT(pin)) {
    2a48:	69b3      	ldr	r3, [r6, #24]
    2a4a:	40eb      	lsrs	r3, r5
    2a4c:	07db      	lsls	r3, r3, #31
    2a4e:	d445      	bmi.n	2adc <gpiote_pin_int_cfg+0x110>
			} else if (((data->active_level & BIT(pin)) != 0)
    2a50:	6933      	ldr	r3, [r6, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    2a52:	69f2      	ldr	r2, [r6, #28]
			} else if (((data->active_level & BIT(pin)) != 0)
    2a54:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    2a56:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0)
    2a5a:	f003 0301 	and.w	r3, r3, #1
    2a5e:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
    2a62:	42ab      	cmp	r3, r5
    2a64:	bf0c      	ite	eq
    2a66:	2502      	moveq	r5, #2
    2a68:	2501      	movne	r5, #1
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    2a6a:	4f28      	ldr	r7, [pc, #160]	; (2b0c <gpiote_pin_int_cfg+0x140>)
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    2a6c:	2100      	movs	r1, #0
    2a6e:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    2a72:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
    2a76:	f010 0003 	ands.w	r0, r0, #3
    2a7a:	d131      	bne.n	2ae0 <gpiote_pin_int_cfg+0x114>
			nrf_gpiote_events_t evt =
    2a7c:	008a      	lsls	r2, r1, #2
    2a7e:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    2a82:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2a86:	0224      	lsls	r4, r4, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2a88:	f8d3 6510 	ldr.w	r6, [r3, #1296]	; 0x510
    2a8c:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
    2a90:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    2a94:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2a98:	f8d3 6510 	ldr.w	r6, [r3, #1296]	; 0x510
    2a9c:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    return ((uint32_t)NRF_GPIOTE + event);
    2aa0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2aa4:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2aa8:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    2aac:	4335      	orrs	r5, r6
    2aae:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    2ab2:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    2ab4:	6812      	ldr	r2, [r2, #0]
    2ab6:	9201      	str	r2, [sp, #4]
    (void)dummy;
    2ab8:	9a01      	ldr	r2, [sp, #4]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2aba:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    2abe:	f042 0201 	orr.w	r2, r2, #1
    2ac2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
    2ac6:	2301      	movs	r3, #1
    2ac8:	fa03 f101 	lsl.w	r1, r3, r1
    NRF_GPIOTE->INTENSET = mask;
    2acc:	f8c7 1304 	str.w	r1, [r7, #772]	; 0x304
}
    2ad0:	b003      	add	sp, #12
    2ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2ad4:	3301      	adds	r3, #1
    2ad6:	2b08      	cmp	r3, #8
    2ad8:	d187      	bne.n	29ea <gpiote_pin_int_cfg+0x1e>
    2ada:	e7a2      	b.n	2a22 <gpiote_pin_int_cfg+0x56>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    2adc:	2503      	movs	r5, #3
    2ade:	e7c4      	b.n	2a6a <gpiote_pin_int_cfg+0x9e>
    2ae0:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    2ae2:	2908      	cmp	r1, #8
    2ae4:	d1c3      	bne.n	2a6e <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
    2ae6:	f06f 0012 	mvn.w	r0, #18
    2aea:	e7f1      	b.n	2ad0 <gpiote_pin_int_cfg+0x104>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    2aec:	69f1      	ldr	r1, [r6, #28]
    2aee:	6933      	ldr	r3, [r6, #16]
    2af0:	404b      	eors	r3, r1
    2af2:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    2af6:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    2afa:	4620      	mov	r0, r4
    2afc:	bf0c      	ite	eq
    2afe:	2103      	moveq	r1, #3
    2b00:	2102      	movne	r1, #2
    2b02:	f001 fee2 	bl	48ca <nrf_gpio_cfg_sense_set>
	int res = 0;
    2b06:	4610      	mov	r0, r2
    2b08:	e7e2      	b.n	2ad0 <gpiote_pin_int_cfg+0x104>
    2b0a:	bf00      	nop
    2b0c:	40006000 	.word	0x40006000

00002b10 <spi_1_init>:
#ifdef CONFIG_SPI_0_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(1);
    2b10:	b530      	push	{r4, r5, lr}
    2b12:	2200      	movs	r2, #0
    2b14:	b085      	sub	sp, #20
    2b16:	4605      	mov	r5, r0
    2b18:	2101      	movs	r1, #1
    2b1a:	2004      	movs	r0, #4
    2b1c:	f7ff f89a 	bl	1c54 <z_irq_priority_set>
    2b20:	4b0e      	ldr	r3, [pc, #56]	; (2b5c <spi_1_init+0x4c>)
    2b22:	9300      	str	r3, [sp, #0]
    2b24:	2400      	movs	r4, #0
    2b26:	23ff      	movs	r3, #255	; 0xff
	return dev->config->config_info;
    2b28:	6828      	ldr	r0, [r5, #0]
SPI_NRFX_SPIM_DEVICE(1);
    2b2a:	9401      	str	r4, [sp, #4]
    2b2c:	f88d 3006 	strb.w	r3, [sp, #6]
    2b30:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    2b34:	9302      	str	r3, [sp, #8]
	nrfx_err_t result = nrfx_spim_init(&get_dev_config(dev)->spim,
    2b36:	4a0a      	ldr	r2, [pc, #40]	; (2b60 <spi_1_init+0x50>)
    2b38:	6880      	ldr	r0, [r0, #8]
SPI_NRFX_SPIM_DEVICE(1);
    2b3a:	9403      	str	r4, [sp, #12]
	nrfx_err_t result = nrfx_spim_init(&get_dev_config(dev)->spim,
    2b3c:	462b      	mov	r3, r5
    2b3e:	4669      	mov	r1, sp
    2b40:	f7fe fa3e 	bl	fc0 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    2b44:	4b07      	ldr	r3, [pc, #28]	; (2b64 <spi_1_init+0x54>)
    2b46:	4298      	cmp	r0, r3
    2b48:	d105      	bne.n	2b56 <spi_1_init+0x46>
	spi_context_unlock_unconditionally(&get_dev_data(dev)->ctx);
    2b4a:	68a8      	ldr	r0, [r5, #8]
    2b4c:	f002 f835 	bl	4bba <spi_context_unlock_unconditionally>
	return 0;
    2b50:	4620      	mov	r0, r4
SPI_NRFX_SPIM_DEVICE(1);
    2b52:	b005      	add	sp, #20
    2b54:	bd30      	pop	{r4, r5, pc}
		return -EBUSY;
    2b56:	f06f 000f 	mvn.w	r0, #15
SPI_NRFX_SPIM_DEVICE(1);
    2b5a:	e7fa      	b.n	2b52 <spi_1_init+0x42>
    2b5c:	11121410 	.word	0x11121410
    2b60:	00004bfb 	.word	0x00004bfb
    2b64:	0bad0000 	.word	0x0bad0000

00002b68 <transfer_next_chunk>:
{
    2b68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    2b6a:	6885      	ldr	r5, [r0, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
}

static inline size_t spi_context_longest_current_buf(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    2b6c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    2b6e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    2b70:	b98a      	cbnz	r2, 2b96 <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
    2b72:	2b00      	cmp	r3, #0
    2b74:	d133      	bne.n	2bde <transfer_next_chunk+0x76>
	int error = 0;
    2b76:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
    2b78:	2200      	movs	r2, #0
    2b7a:	4611      	mov	r1, r2
    2b7c:	4628      	mov	r0, r5
    2b7e:	f001 fff2 	bl	4b66 <_spi_context_cs_control.isra.7>
	ctx->sync_status = status;
    2b82:	626c      	str	r4, [r5, #36]	; 0x24

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    2b84:	f105 0014 	add.w	r0, r5, #20
    2b88:	f000 feca 	bl	3920 <z_impl_k_sem_give>
	dev_data->busy = false;
    2b8c:	2300      	movs	r3, #0
    2b8e:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
}
    2b92:	b004      	add	sp, #16
    2b94:	bd70      	pop	{r4, r5, r6, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    2b96:	b323      	cbz	r3, 2be2 <transfer_next_chunk+0x7a>
    2b98:	4293      	cmp	r3, r2
    2b9a:	4619      	mov	r1, r3
    2b9c:	bf28      	it	cs
    2b9e:	4611      	movcs	r1, r2
	return dev->config->config_info;
    2ba0:	6800      	ldr	r0, [r0, #0]
		const u8_t *tx_buf = ctx->tx_buf;
    2ba2:	6bac      	ldr	r4, [r5, #56]	; 0x38
	return dev->config->config_info;
    2ba4:	6880      	ldr	r0, [r0, #8]
		xfer.p_tx_buffer = tx_buf;
    2ba6:	9400      	str	r4, [sp, #0]
    2ba8:	6886      	ldr	r6, [r0, #8]
    2baa:	42b1      	cmp	r1, r6
    2bac:	bf28      	it	cs
    2bae:	4631      	movcs	r1, r6
		dev_data->chunk_len = chunk_len;
    2bb0:	64a9      	str	r1, [r5, #72]	; 0x48
	return !!(ctx->tx_buf && ctx->tx_len);
    2bb2:	b1c4      	cbz	r4, 2be6 <transfer_next_chunk+0x7e>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    2bb4:	2a00      	cmp	r2, #0
    2bb6:	bf18      	it	ne
    2bb8:	460a      	movne	r2, r1
    2bba:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    2bbc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    2bbe:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    2bc0:	b19a      	cbz	r2, 2bea <transfer_next_chunk+0x82>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    2bc2:	2b00      	cmp	r3, #0
    2bc4:	bf18      	it	ne
    2bc6:	460b      	movne	r3, r1
		result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    2bc8:	2200      	movs	r2, #0
    2bca:	4669      	mov	r1, sp
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    2bcc:	9303      	str	r3, [sp, #12]
		result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    2bce:	f7fe fa9f 	bl	1110 <nrfx_spim_xfer>
		if (result == NRFX_SUCCESS) {
    2bd2:	4b07      	ldr	r3, [pc, #28]	; (2bf0 <transfer_next_chunk+0x88>)
    2bd4:	4298      	cmp	r0, r3
    2bd6:	d0dc      	beq.n	2b92 <transfer_next_chunk+0x2a>
		error = -EIO;
    2bd8:	f06f 0404 	mvn.w	r4, #4
    2bdc:	e7cc      	b.n	2b78 <transfer_next_chunk+0x10>
    2bde:	4619      	mov	r1, r3
    2be0:	e7de      	b.n	2ba0 <transfer_next_chunk+0x38>
	} else if (!ctx->rx_len) {
    2be2:	4611      	mov	r1, r2
    2be4:	e7dc      	b.n	2ba0 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    2be6:	4622      	mov	r2, r4
    2be8:	e7e7      	b.n	2bba <transfer_next_chunk+0x52>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    2bea:	4613      	mov	r3, r2
    2bec:	e7ec      	b.n	2bc8 <transfer_next_chunk+0x60>
    2bee:	bf00      	nop
    2bf0:	0bad0000 	.word	0x0bad0000

00002bf4 <spi_nrfx_transceive>:
{
    2bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2bf8:	4607      	mov	r7, r0
	k_sem_take(&ctx->lock, K_FOREVER);
    2bfa:	6880      	ldr	r0, [r0, #8]
    2bfc:	4688      	mov	r8, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    2bfe:	3004      	adds	r0, #4
    2c00:	f04f 31ff 	mov.w	r1, #4294967295
    2c04:	461d      	mov	r5, r3
    2c06:	4616      	mov	r6, r2
    2c08:	f000 feb0 	bl	396c <z_impl_k_sem_take>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    2c0c:	68bc      	ldr	r4, [r7, #8]
	if (spi_context_configured(ctx, spi_cfg)) {
    2c0e:	6823      	ldr	r3, [r4, #0]
    2c10:	4598      	cmp	r8, r3
    2c12:	d060      	beq.n	2cd6 <spi_nrfx_transceive+0xe2>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    2c14:	f8b8 3004 	ldrh.w	r3, [r8, #4]
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
    2c18:	f641 0109 	movw	r1, #6153	; 0x1809
    2c1c:	4019      	ands	r1, r3
    2c1e:	f040 80aa 	bne.w	2d76 <spi_nrfx_transceive+0x182>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    2c22:	f3c3 1345 	ubfx	r3, r3, #5, #6
    2c26:	2b08      	cmp	r3, #8
    2c28:	f040 80a5 	bne.w	2d76 <spi_nrfx_transceive+0x182>
	if (spi_cfg->frequency < 125000) {
    2c2c:	f8d8 2000 	ldr.w	r2, [r8]
    2c30:	4b52      	ldr	r3, [pc, #328]	; (2d7c <spi_nrfx_transceive+0x188>)
    2c32:	429a      	cmp	r2, r3
    2c34:	f240 809f 	bls.w	2d76 <spi_nrfx_transceive+0x182>
	return dev->config->config_info;
    2c38:	683b      	ldr	r3, [r7, #0]
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
    2c3a:	f8d8 2008 	ldr.w	r2, [r8, #8]
    2c3e:	f8d3 9008 	ldr.w	r9, [r3, #8]
	ctx->config = spi_cfg;
    2c42:	f8c4 8000 	str.w	r8, [r4]
    2c46:	b18a      	cbz	r2, 2c6c <spi_nrfx_transceive+0x78>
    2c48:	6810      	ldr	r0, [r2, #0]
    2c4a:	b178      	cbz	r0, 2c6c <spi_nrfx_transceive+0x78>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
    2c4c:	6843      	ldr	r3, [r0, #4]
    2c4e:	6852      	ldr	r2, [r2, #4]
    2c50:	f8d3 a000 	ldr.w	sl, [r3]
    2c54:	2301      	movs	r3, #1
    2c56:	47d0      	blx	sl
		gpio_pin_write(ctx->config->cs->gpio_dev,
    2c58:	6822      	ldr	r2, [r4, #0]
    2c5a:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
    2c5c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		gpio_pin_write(ctx->config->cs->gpio_dev,
    2c60:	43d2      	mvns	r2, r2
    2c62:	0fd2      	lsrs	r2, r2, #31
    2c64:	e9d3 0100 	ldrd	r0, r1, [r3]
    2c68:	f001 ff74 	bl	4b54 <gpio_pin_write>
	nrf_spim_configure(spim->p_reg,
    2c6c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    2c70:	f8d9 1000 	ldr.w	r1, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    2c74:	0798      	lsls	r0, r3, #30
    2c76:	f003 0204 	and.w	r2, r3, #4
    2c7a:	d559      	bpl.n	2d30 <spi_nrfx_transceive+0x13c>
			return NRF_SPIM_MODE_3;
    2c7c:	2a00      	cmp	r2, #0
    2c7e:	bf0c      	ite	eq
    2c80:	2202      	moveq	r2, #2
    2c82:	2203      	movne	r2, #3
    switch (spi_mode)
    2c84:	2a02      	cmp	r2, #2
	if (operation & SPI_TRANSFER_LSB) {
    2c86:	f3c3 1300 	ubfx	r3, r3, #4, #1
    2c8a:	d055      	beq.n	2d38 <spi_nrfx_transceive+0x144>
    2c8c:	2a03      	cmp	r2, #3
    2c8e:	d056      	beq.n	2d3e <spi_nrfx_transceive+0x14a>
    2c90:	2a01      	cmp	r2, #1
    2c92:	d101      	bne.n	2c98 <spi_nrfx_transceive+0xa4>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    2c94:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
    2c98:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
	if (frequency < 250000) {
    2c9c:	4a38      	ldr	r2, [pc, #224]	; (2d80 <spi_nrfx_transceive+0x18c>)
	nrf_spim_frequency_set(spim->p_reg,
    2c9e:	f8d8 3000 	ldr.w	r3, [r8]
	if (frequency < 250000) {
    2ca2:	4293      	cmp	r3, r2
    2ca4:	d94e      	bls.n	2d44 <spi_nrfx_transceive+0x150>
	} else if (frequency < 500000) {
    2ca6:	4a37      	ldr	r2, [pc, #220]	; (2d84 <spi_nrfx_transceive+0x190>)
    2ca8:	4293      	cmp	r3, r2
    2caa:	d94e      	bls.n	2d4a <spi_nrfx_transceive+0x156>
	} else if (frequency < 1000000) {
    2cac:	4a36      	ldr	r2, [pc, #216]	; (2d88 <spi_nrfx_transceive+0x194>)
    2cae:	4293      	cmp	r3, r2
    2cb0:	d94e      	bls.n	2d50 <spi_nrfx_transceive+0x15c>
	} else if (frequency < 2000000) {
    2cb2:	4a36      	ldr	r2, [pc, #216]	; (2d8c <spi_nrfx_transceive+0x198>)
    2cb4:	4293      	cmp	r3, r2
    2cb6:	d94e      	bls.n	2d56 <spi_nrfx_transceive+0x162>
	} else if (frequency < 4000000) {
    2cb8:	4a35      	ldr	r2, [pc, #212]	; (2d90 <spi_nrfx_transceive+0x19c>)
    2cba:	4293      	cmp	r3, r2
    2cbc:	d94e      	bls.n	2d5c <spi_nrfx_transceive+0x168>
		return NRF_SPIM_FREQ_4M;
    2cbe:	f502 1274 	add.w	r2, r2, #3997696	; 0x3d0000
    2cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
    2cc6:	4293      	cmp	r3, r2
    2cc8:	bf8c      	ite	hi
    2cca:	f04f 4300 	movhi.w	r3, #2147483648	; 0x80000000
    2cce:	f04f 4380 	movls.w	r3, #1073741824	; 0x40000000
    p_reg->FREQUENCY = frequency;
    2cd2:	f8c1 3524 	str.w	r3, [r1, #1316]	; 0x524
		dev_data->busy = true;
    2cd6:	2301      	movs	r3, #1
    2cd8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	if (tx_bufs) {
    2cdc:	2e00      	cmp	r6, #0
    2cde:	d040      	beq.n	2d62 <spi_nrfx_transceive+0x16e>
		ctx->current_tx = tx_bufs->buffers;
    2ce0:	6833      	ldr	r3, [r6, #0]
		ctx->tx_count = tx_bufs->count;
    2ce2:	6872      	ldr	r2, [r6, #4]
		ctx->current_tx = tx_bufs->buffers;
    2ce4:	62a3      	str	r3, [r4, #40]	; 0x28
		ctx->tx_count = tx_bufs->count;
    2ce6:	62e2      	str	r2, [r4, #44]	; 0x2c
		ctx->tx_buf = ctx->current_tx->buf;
    2ce8:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
    2cea:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = ctx->current_tx->buf;
    2cec:	63a2      	str	r2, [r4, #56]	; 0x38
		ctx->tx_len = ctx->current_tx->len / dfs;
    2cee:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (rx_bufs) {
    2cf0:	2d00      	cmp	r5, #0
    2cf2:	d03b      	beq.n	2d6c <spi_nrfx_transceive+0x178>
		ctx->current_rx = rx_bufs->buffers;
    2cf4:	682b      	ldr	r3, [r5, #0]
		ctx->rx_count = rx_bufs->count;
    2cf6:	686a      	ldr	r2, [r5, #4]
		ctx->current_rx = rx_bufs->buffers;
    2cf8:	6323      	str	r3, [r4, #48]	; 0x30
		ctx->rx_count = rx_bufs->count;
    2cfa:	6362      	str	r2, [r4, #52]	; 0x34
		ctx->rx_buf = ctx->current_rx->buf;
    2cfc:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
    2cfe:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = ctx->current_rx->buf;
    2d00:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->rx_len = ctx->current_rx->len / dfs;
    2d02:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->sync_status = 0;
    2d04:	2200      	movs	r2, #0
    2d06:	6262      	str	r2, [r4, #36]	; 0x24
	_spi_context_cs_control(ctx, on, false);
    2d08:	2101      	movs	r1, #1
    2d0a:	4620      	mov	r0, r4
    2d0c:	f001 ff2b 	bl	4b66 <_spi_context_cs_control.isra.7>
		transfer_next_chunk(dev);
    2d10:	4638      	mov	r0, r7
    2d12:	f7ff ff29 	bl	2b68 <transfer_next_chunk>
    2d16:	f04f 31ff 	mov.w	r1, #4294967295
    2d1a:	f104 0014 	add.w	r0, r4, #20
    2d1e:	f000 fe25 	bl	396c <z_impl_k_sem_take>
	status = ctx->sync_status;
    2d22:	6a65      	ldr	r5, [r4, #36]	; 0x24
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    2d24:	1d20      	adds	r0, r4, #4
    2d26:	f000 fdfb 	bl	3920 <z_impl_k_sem_give>
}
    2d2a:	4628      	mov	r0, r5
    2d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return NRF_SPIM_MODE_3;
    2d30:	3200      	adds	r2, #0
    2d32:	bf18      	it	ne
    2d34:	2201      	movne	r2, #1
    2d36:	e7a5      	b.n	2c84 <spi_nrfx_transceive+0x90>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    2d38:	f043 0304 	orr.w	r3, r3, #4
    2d3c:	e7ac      	b.n	2c98 <spi_nrfx_transceive+0xa4>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    2d3e:	f043 0306 	orr.w	r3, r3, #6
    2d42:	e7a9      	b.n	2c98 <spi_nrfx_transceive+0xa4>
		return NRF_SPIM_FREQ_125K;
    2d44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    2d48:	e7c3      	b.n	2cd2 <spi_nrfx_transceive+0xde>
		return NRF_SPIM_FREQ_250K;
    2d4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2d4e:	e7c0      	b.n	2cd2 <spi_nrfx_transceive+0xde>
		return NRF_SPIM_FREQ_500K;
    2d50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    2d54:	e7bd      	b.n	2cd2 <spi_nrfx_transceive+0xde>
		return NRF_SPIM_FREQ_1M;
    2d56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2d5a:	e7ba      	b.n	2cd2 <spi_nrfx_transceive+0xde>
		return NRF_SPIM_FREQ_2M;
    2d5c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    2d60:	e7b7      	b.n	2cd2 <spi_nrfx_transceive+0xde>
		ctx->tx_count = 0;
    2d62:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
		ctx->tx_len = 0;
    2d66:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
    2d6a:	e7c1      	b.n	2cf0 <spi_nrfx_transceive+0xfc>
		ctx->rx_count = 0;
    2d6c:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
		ctx->rx_len = 0;
    2d70:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
    2d74:	e7c6      	b.n	2d04 <spi_nrfx_transceive+0x110>
		return -EINVAL;
    2d76:	f06f 0515 	mvn.w	r5, #21
    2d7a:	e7d3      	b.n	2d24 <spi_nrfx_transceive+0x130>
    2d7c:	0001e847 	.word	0x0001e847
    2d80:	0003d08f 	.word	0x0003d08f
    2d84:	0007a11f 	.word	0x0007a11f
    2d88:	000f423f 	.word	0x000f423f
    2d8c:	001e847f 	.word	0x001e847f
    2d90:	003d08ff 	.word	0x003d08ff

00002d94 <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2d94:	4b03      	ldr	r3, [pc, #12]	; (2da4 <uart_nrfx_err_check+0x10>)
    2d96:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0U;

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
    2d98:	b118      	cbz	r0, 2da2 <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    2d9a:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
    2d9e:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(uart0_addr);
	}

	return error;
}
    2da2:	4770      	bx	lr
    2da4:	40002124 	.word	0x40002124

00002da8 <uart_nrfx_configure>:

static int uart_nrfx_configure(struct device *dev,
			       const struct uart_config *cfg)
{
    2da8:	b530      	push	{r4, r5, lr}
	nrf_uart_parity_t parity;
	nrf_uart_hwfc_t hwfc;

	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    2daa:	794b      	ldrb	r3, [r1, #5]
    2dac:	2b01      	cmp	r3, #1
    2dae:	d120      	bne.n	2df2 <uart_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2db0:	798b      	ldrb	r3, [r1, #6]
    2db2:	2b03      	cmp	r3, #3
    2db4:	d11d      	bne.n	2df2 <uart_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2db6:	79cc      	ldrb	r4, [r1, #7]
    2db8:	b12c      	cbz	r4, 2dc6 <uart_nrfx_configure+0x1e>
    2dba:	2c01      	cmp	r4, #1
    2dbc:	d119      	bne.n	2df2 <uart_nrfx_configure+0x4a>
	return dev->config->config_info;
    2dbe:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UART_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    2dc0:	689b      	ldr	r3, [r3, #8]
    2dc2:	781b      	ldrb	r3, [r3, #0]
    2dc4:	b1ab      	cbz	r3, 2df2 <uart_nrfx_configure+0x4a>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
    2dc6:	790a      	ldrb	r2, [r1, #4]
    2dc8:	b112      	cbz	r2, 2dd0 <uart_nrfx_configure+0x28>
    2dca:	2a02      	cmp	r2, #2
    2dcc:	d111      	bne.n	2df2 <uart_nrfx_configure+0x4a>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UART_PARITY_INCLUDED;
    2dce:	220e      	movs	r2, #14
	switch (baudrate) {
    2dd0:	680b      	ldr	r3, [r1, #0]
    2dd2:	f647 2512 	movw	r5, #31250	; 0x7a12
    2dd6:	42ab      	cmp	r3, r5
    2dd8:	d06c      	beq.n	2eb4 <uart_nrfx_configure+0x10c>
    2dda:	d827      	bhi.n	2e2c <uart_nrfx_configure+0x84>
    2ddc:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2de0:	d061      	beq.n	2ea6 <uart_nrfx_configure+0xfe>
    2de2:	d812      	bhi.n	2e0a <uart_nrfx_configure+0x62>
    2de4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2de8:	d04c      	beq.n	2e84 <uart_nrfx_configure+0xdc>
    2dea:	d805      	bhi.n	2df8 <uart_nrfx_configure+0x50>
    2dec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2df0:	d070      	beq.n	2ed4 <uart_nrfx_configure+0x12c>
		return -ENOTSUP;
    2df2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2df6:	e052      	b.n	2e9e <uart_nrfx_configure+0xf6>
	switch (baudrate) {
    2df8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2dfc:	d050      	beq.n	2ea0 <uart_nrfx_configure+0xf8>
    2dfe:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2e02:	d1f6      	bne.n	2df2 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    2e04:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2e08:	e03e      	b.n	2e88 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    2e0a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2e0e:	d04c      	beq.n	2eaa <uart_nrfx_configure+0x102>
    2e10:	d804      	bhi.n	2e1c <uart_nrfx_configure+0x74>
    2e12:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2e16:	d1ec      	bne.n	2df2 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    2e18:	4b30      	ldr	r3, [pc, #192]	; (2edc <uart_nrfx_configure+0x134>)
    2e1a:	e035      	b.n	2e88 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    2e1c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2e20:	d046      	beq.n	2eb0 <uart_nrfx_configure+0x108>
    2e22:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2e26:	d1e4      	bne.n	2df2 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    2e28:	4b2d      	ldr	r3, [pc, #180]	; (2ee0 <uart_nrfx_configure+0x138>)
    2e2a:	e02d      	b.n	2e88 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    2e2c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2e30:	d048      	beq.n	2ec4 <uart_nrfx_configure+0x11c>
    2e32:	d811      	bhi.n	2e58 <uart_nrfx_configure+0xb0>
    2e34:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    2e38:	42ab      	cmp	r3, r5
    2e3a:	d03e      	beq.n	2eba <uart_nrfx_configure+0x112>
    2e3c:	d804      	bhi.n	2e48 <uart_nrfx_configure+0xa0>
    2e3e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    2e42:	d1d6      	bne.n	2df2 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    2e44:	4b27      	ldr	r3, [pc, #156]	; (2ee4 <uart_nrfx_configure+0x13c>)
    2e46:	e01f      	b.n	2e88 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    2e48:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2e4c:	d038      	beq.n	2ec0 <uart_nrfx_configure+0x118>
    2e4e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2e52:	d1ce      	bne.n	2df2 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    2e54:	4b24      	ldr	r3, [pc, #144]	; (2ee8 <uart_nrfx_configure+0x140>)
    2e56:	e017      	b.n	2e88 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    2e58:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2e5c:	d036      	beq.n	2ecc <uart_nrfx_configure+0x124>
    2e5e:	d808      	bhi.n	2e72 <uart_nrfx_configure+0xca>
    2e60:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2e64:	d030      	beq.n	2ec8 <uart_nrfx_configure+0x120>
    2e66:	4d21      	ldr	r5, [pc, #132]	; (2eec <uart_nrfx_configure+0x144>)
    2e68:	42ab      	cmp	r3, r5
    2e6a:	d1c2      	bne.n	2df2 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    2e6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2e70:	e00a      	b.n	2e88 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    2e72:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2e76:	d02b      	beq.n	2ed0 <uart_nrfx_configure+0x128>
    2e78:	4d1d      	ldr	r5, [pc, #116]	; (2ef0 <uart_nrfx_configure+0x148>)
    2e7a:	42ab      	cmp	r3, r5
    2e7c:	d1b9      	bne.n	2df2 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    2e7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2e82:	e001      	b.n	2e88 <uart_nrfx_configure+0xe0>
		nrf_baudrate = 0x00027000;
    2e84:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2e88:	4d1a      	ldr	r5, [pc, #104]	; (2ef4 <uart_nrfx_configure+0x14c>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    2e8a:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    2e8c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    2e90:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, parity, hwfc);

	get_dev_data(dev)->uart_config = *cfg;
    2e94:	6883      	ldr	r3, [r0, #8]
    2e96:	c903      	ldmia	r1, {r0, r1}
    2e98:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2e9c:	2000      	movs	r0, #0
}
    2e9e:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    2ea0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2ea4:	e7f0      	b.n	2e88 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    2ea6:	4b14      	ldr	r3, [pc, #80]	; (2ef8 <uart_nrfx_configure+0x150>)
    2ea8:	e7ee      	b.n	2e88 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    2eaa:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    2eae:	e7eb      	b.n	2e88 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    2eb0:	4b12      	ldr	r3, [pc, #72]	; (2efc <uart_nrfx_configure+0x154>)
    2eb2:	e7e9      	b.n	2e88 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    2eb4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2eb8:	e7e6      	b.n	2e88 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    2eba:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2ebe:	e7e3      	b.n	2e88 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    2ec0:	4b0f      	ldr	r3, [pc, #60]	; (2f00 <uart_nrfx_configure+0x158>)
    2ec2:	e7e1      	b.n	2e88 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    2ec4:	4b0f      	ldr	r3, [pc, #60]	; (2f04 <uart_nrfx_configure+0x15c>)
    2ec6:	e7df      	b.n	2e88 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    2ec8:	4b0f      	ldr	r3, [pc, #60]	; (2f08 <uart_nrfx_configure+0x160>)
    2eca:	e7dd      	b.n	2e88 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    2ecc:	4b0f      	ldr	r3, [pc, #60]	; (2f0c <uart_nrfx_configure+0x164>)
    2ece:	e7db      	b.n	2e88 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    2ed0:	4b0f      	ldr	r3, [pc, #60]	; (2f10 <uart_nrfx_configure+0x168>)
    2ed2:	e7d9      	b.n	2e88 <uart_nrfx_configure+0xe0>
		nrf_baudrate = 0x00014000;
    2ed4:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2ed8:	e7d6      	b.n	2e88 <uart_nrfx_configure+0xe0>
    2eda:	bf00      	nop
    2edc:	00275000 	.word	0x00275000
    2ee0:	0075f000 	.word	0x0075f000
    2ee4:	009d5000 	.word	0x009d5000
    2ee8:	013a9000 	.word	0x013a9000
    2eec:	0003d090 	.word	0x0003d090
    2ef0:	000f4240 	.word	0x000f4240
    2ef4:	40002000 	.word	0x40002000
    2ef8:	0013b000 	.word	0x0013b000
    2efc:	004ea000 	.word	0x004ea000
    2f00:	00ebf000 	.word	0x00ebf000
    2f04:	01d7e000 	.word	0x01d7e000
    2f08:	03afb000 	.word	0x03afb000
    2f0c:	075f7000 	.word	0x075f7000
    2f10:	0ebed000 	.word	0x0ebed000

00002f14 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2f14:	4b08      	ldr	r3, [pc, #32]	; (2f38 <uart_nrfx_poll_in+0x24>)
    2f16:	681a      	ldr	r2, [r3, #0]
{
    2f18:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    2f1a:	b152      	cbz	r2, 2f32 <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f1c:	2000      	movs	r0, #0
    2f1e:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    2f20:	681b      	ldr	r3, [r3, #0]
    2f22:	9301      	str	r3, [sp, #4]
    (void)dummy;
    2f24:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
    2f26:	4b05      	ldr	r3, [pc, #20]	; (2f3c <uart_nrfx_poll_in+0x28>)
    2f28:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2f2c:	700b      	strb	r3, [r1, #0]
}
    2f2e:	b002      	add	sp, #8
    2f30:	4770      	bx	lr
		return -1;
    2f32:	f04f 30ff 	mov.w	r0, #4294967295
    2f36:	e7fa      	b.n	2f2e <uart_nrfx_poll_in+0x1a>
    2f38:	40002108 	.word	0x40002108
    2f3c:	40002000 	.word	0x40002000

00002f40 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f40:	4b09      	ldr	r3, [pc, #36]	; (2f68 <uart_nrfx_poll_out+0x28>)
    2f42:	2200      	movs	r2, #0
    2f44:	601a      	str	r2, [r3, #0]
{
    2f46:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    2f48:	681a      	ldr	r2, [r3, #0]
    2f4a:	9201      	str	r2, [sp, #4]
    (void)dummy;
    2f4c:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2f4e:	4a07      	ldr	r2, [pc, #28]	; (2f6c <uart_nrfx_poll_out+0x2c>)
    2f50:	2001      	movs	r0, #1
    2f52:	6010      	str	r0, [r2, #0]
    p_reg->TXD = txd;
    2f54:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2f58:	681a      	ldr	r2, [r3, #0]
	while (!event_txdrdy_check()) {
    2f5a:	2a00      	cmp	r2, #0
    2f5c:	d0fc      	beq.n	2f58 <uart_nrfx_poll_out+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2f5e:	4b04      	ldr	r3, [pc, #16]	; (2f70 <uart_nrfx_poll_out+0x30>)
    2f60:	2201      	movs	r2, #1
    2f62:	601a      	str	r2, [r3, #0]
}
    2f64:	b002      	add	sp, #8
    2f66:	4770      	bx	lr
    2f68:	4000211c 	.word	0x4000211c
    2f6c:	40002008 	.word	0x40002008
    2f70:	4000200c 	.word	0x4000200c

00002f74 <uart_nrfx_init>:
    p_reg->OUTSET = set_mask;
    2f74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    2f78:	2220      	movs	r2, #32
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    2f7a:	b513      	push	{r0, r1, r4, lr}
    2f7c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2f80:	2203      	movs	r2, #3
    2f82:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
    p_reg->PSELRXD = pselrxd;
    2f86:	4c0d      	ldr	r4, [pc, #52]	; (2fbc <uart_nrfx_init+0x48>)
			       DT_NORDIC_NRF_UART_UART_0_RTS_PIN,
			       DT_NORDIC_NRF_UART_UART_0_CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    2f88:	6881      	ldr	r1, [r0, #8]
    2f8a:	2200      	movs	r2, #0
    2f8c:	f8c3 272c 	str.w	r2, [r3, #1836]	; 0x72c
    2f90:	230b      	movs	r3, #11
    2f92:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
    2f96:	2305      	movs	r3, #5
    2f98:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    2f9c:	f7ff ff04 	bl	2da8 <uart_nrfx_configure>
	if (err) {
    2fa0:	b948      	cbnz	r0, 2fb6 <uart_nrfx_init+0x42>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    2fa2:	2304      	movs	r3, #4
    2fa4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2fa8:	4b05      	ldr	r3, [pc, #20]	; (2fc0 <uart_nrfx_init+0x4c>)
    2faa:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    2fac:	681b      	ldr	r3, [r3, #0]
    2fae:	9301      	str	r3, [sp, #4]
    (void)dummy;
    2fb0:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2fb2:	2301      	movs	r3, #1
    2fb4:	6023      	str	r3, [r4, #0]
	defined(DT_NORDIC_NRF_UART_UART_0_CTS_PIN)
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
    2fb6:	b002      	add	sp, #8
    2fb8:	bd10      	pop	{r4, pc}
    2fba:	bf00      	nop
    2fbc:	40002000 	.word	0x40002000
    2fc0:	40002108 	.word	0x40002108

00002fc4 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
    2fc4:	4b09      	ldr	r3, [pc, #36]	; (2fec <z_sys_device_do_config_level+0x28>)
{
    2fc6:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
    2fc8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    2fcc:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    2fce:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    2fd0:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    2fd4:	42a5      	cmp	r5, r4
    2fd6:	d800      	bhi.n	2fda <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
    2fd8:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    2fda:	6823      	ldr	r3, [r4, #0]
    2fdc:	4620      	mov	r0, r4
    2fde:	685b      	ldr	r3, [r3, #4]
    2fe0:	4798      	blx	r3
		if (retval != 0) {
    2fe2:	b100      	cbz	r0, 2fe6 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    2fe4:	6066      	str	r6, [r4, #4]
								info++) {
    2fe6:	340c      	adds	r4, #12
    2fe8:	e7f4      	b.n	2fd4 <z_sys_device_do_config_level+0x10>
    2fea:	bf00      	nop
    2fec:	00005194 	.word	0x00005194

00002ff0 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    2ff0:	4b10      	ldr	r3, [pc, #64]	; (3034 <z_impl_device_get_binding+0x44>)
{
    2ff2:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    2ff4:	4c10      	ldr	r4, [pc, #64]	; (3038 <z_impl_device_get_binding+0x48>)
{
    2ff6:	4605      	mov	r5, r0
    2ff8:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    2ffa:	429c      	cmp	r4, r3
    2ffc:	d104      	bne.n	3008 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    2ffe:	4c0e      	ldr	r4, [pc, #56]	; (3038 <z_impl_device_get_binding+0x48>)
    3000:	42b4      	cmp	r4, r6
    3002:	d109      	bne.n	3018 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    3004:	2400      	movs	r4, #0
    3006:	e012      	b.n	302e <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    3008:	6862      	ldr	r2, [r4, #4]
    300a:	b11a      	cbz	r2, 3014 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    300c:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    300e:	6812      	ldr	r2, [r2, #0]
    3010:	42aa      	cmp	r2, r5
    3012:	d00c      	beq.n	302e <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    3014:	340c      	adds	r4, #12
    3016:	e7f0      	b.n	2ffa <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    3018:	6863      	ldr	r3, [r4, #4]
    301a:	b90b      	cbnz	r3, 3020 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    301c:	340c      	adds	r4, #12
    301e:	e7ef      	b.n	3000 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    3020:	6823      	ldr	r3, [r4, #0]
    3022:	4628      	mov	r0, r5
    3024:	6819      	ldr	r1, [r3, #0]
    3026:	f001 fb46 	bl	46b6 <strcmp>
    302a:	2800      	cmp	r0, #0
    302c:	d1f6      	bne.n	301c <z_impl_device_get_binding+0x2c>
}
    302e:	4620      	mov	r0, r4
    3030:	bd70      	pop	{r4, r5, r6, pc}
    3032:	bf00      	nop
    3034:	20001784 	.word	0x20001784
    3038:	200016f4 	.word	0x200016f4

0000303c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    303c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    303e:	4d0b      	ldr	r5, [pc, #44]	; (306c <idle+0x30>)
    3040:	f04f 0220 	mov.w	r2, #32
    3044:	f3ef 8311 	mrs	r3, BASEPRI
    3048:	f382 8811 	msr	BASEPRI, r2
    304c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    3050:	f001 ff10 	bl	4e74 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3054:	2101      	movs	r1, #1
    3056:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
    3058:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    305a:	bfd8      	it	le
    305c:	4608      	movle	r0, r1
    305e:	f001 ff19 	bl	4e94 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    3062:	622c      	str	r4, [r5, #32]
	k_cpu_idle();
    3064:	f7fe fe3e 	bl	1ce4 <k_cpu_idle>
    3068:	e7ea      	b.n	3040 <idle+0x4>
    306a:	bf00      	nop
    306c:	20000264 	.word	0x20000264

00003070 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(&__bss_start, 0,
    3070:	4802      	ldr	r0, [pc, #8]	; (307c <z_bss_zero+0xc>)
    3072:	4a03      	ldr	r2, [pc, #12]	; (3080 <z_bss_zero+0x10>)
    3074:	2100      	movs	r1, #0
    3076:	1a12      	subs	r2, r2, r0
    3078:	f001 bb6e 	b.w	4758 <memset>
    307c:	20000000 	.word	0x20000000
    3080:	20000938 	.word	0x20000938

00003084 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    3084:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    3086:	4806      	ldr	r0, [pc, #24]	; (30a0 <z_data_copy+0x1c>)
    3088:	4a06      	ldr	r2, [pc, #24]	; (30a4 <z_data_copy+0x20>)
    308a:	4907      	ldr	r1, [pc, #28]	; (30a8 <z_data_copy+0x24>)
    308c:	1a12      	subs	r2, r2, r0
    308e:	f001 fb36 	bl	46fe <memcpy>
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    3092:	4a06      	ldr	r2, [pc, #24]	; (30ac <z_data_copy+0x28>)
    3094:	4906      	ldr	r1, [pc, #24]	; (30b0 <z_data_copy+0x2c>)
    3096:	4807      	ldr	r0, [pc, #28]	; (30b4 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 ((u32_t) &_app_smem_end - (u32_t) &_app_smem_start));
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3098:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    309c:	f001 bb2f 	b.w	46fe <memcpy>
    30a0:	20001678 	.word	0x20001678
    30a4:	200017ac 	.word	0x200017ac
    30a8:	00005744 	.word	0x00005744
    30ac:	00000000 	.word	0x00000000
    30b0:	00005744 	.word	0x00005744
    30b4:	20000000 	.word	0x20000000

000030b8 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    30b8:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    30ba:	2002      	movs	r0, #2
    30bc:	f7ff ff82 	bl	2fc4 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    30c0:	4807      	ldr	r0, [pc, #28]	; (30e0 <bg_thread_main+0x28>)
    30c2:	f001 fa50 	bl	4566 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    30c6:	2003      	movs	r0, #3
    30c8:	f7ff ff7c 	bl	2fc4 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    30cc:	f000 fcc8 	bl	3a60 <z_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    30d0:	f000 fe36 	bl	3d40 <main>

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    30d4:	4a03      	ldr	r2, [pc, #12]	; (30e4 <bg_thread_main+0x2c>)
    30d6:	7b13      	ldrb	r3, [r2, #12]
    30d8:	f023 0301 	bic.w	r3, r3, #1
    30dc:	7313      	strb	r3, [r2, #12]
}
    30de:	bd08      	pop	{r3, pc}
    30e0:	000056f6 	.word	0x000056f6
    30e4:	200001f8 	.word	0x200001f8

000030e8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    30e8:	b580      	push	{r7, lr}
#if defined(CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT) && \
	defined(CONFIG_USERSPACE)
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
			    CONFIG_ISR_STACK_SIZE - MPU_GUARD_ALIGN_AND_SIZE);
#else
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    30ea:	4b3d      	ldr	r3, [pc, #244]	; (31e0 <z_cstart+0xf8>)
    30ec:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    30ee:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    30f2:	4b3c      	ldr	r3, [pc, #240]	; (31e4 <z_cstart+0xfc>)
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    30f4:	4e3c      	ldr	r6, [pc, #240]	; (31e8 <z_cstart+0x100>)
    30f6:	695a      	ldr	r2, [r3, #20]
	_kernel.ready_q.cache = _main_thread;
    30f8:	4d3c      	ldr	r5, [pc, #240]	; (31ec <z_cstart+0x104>)
    30fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    30fe:	615a      	str	r2, [r3, #20]
    3100:	2400      	movs	r4, #0
    3102:	22e0      	movs	r2, #224	; 0xe0
    3104:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    3108:	77dc      	strb	r4, [r3, #31]
    310a:	761c      	strb	r4, [r3, #24]
    310c:	765c      	strb	r4, [r3, #25]
    310e:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3112:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    3116:	625a      	str	r2, [r3, #36]	; 0x24

static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    3118:	f7fe fd70 	bl	1bfc <_FaultInit>
	_CpuIdleInit();
    311c:	f7fe fddc 	bl	1cd8 <_CpuIdleInit>
	struct k_thread dummy_thread = {
    3120:	ab07      	add	r3, sp, #28
    3122:	4621      	mov	r1, r4
    3124:	226c      	movs	r2, #108	; 0x6c
    3126:	4618      	mov	r0, r3
    3128:	f001 fb16 	bl	4758 <memset>
    312c:	2701      	movs	r7, #1
	_current = &dummy_thread;
    312e:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3130:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
    3132:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3136:	f7ff ff45 	bl	2fc4 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    313a:	4638      	mov	r0, r7
    313c:	f7ff ff42 	bl	2fc4 <z_sys_device_do_config_level>
	z_sched_init();
    3140:	f000 fb46 	bl	37d0 <z_sched_init>
	z_setup_new_thread(_main_thread, _main_stack,
    3144:	4b2a      	ldr	r3, [pc, #168]	; (31f0 <z_cstart+0x108>)
	_kernel.ready_q.cache = _main_thread;
    3146:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(_main_thread, _main_stack,
    3148:	f44f 6280 	mov.w	r2, #1024	; 0x400
    314c:	e9cd 7304 	strd	r7, r3, [sp, #16]
    3150:	e9cd 4402 	strd	r4, r4, [sp, #8]
    3154:	e9cd 4400 	strd	r4, r4, [sp]
    3158:	4b26      	ldr	r3, [pc, #152]	; (31f4 <z_cstart+0x10c>)
    315a:	4927      	ldr	r1, [pc, #156]	; (31f8 <z_cstart+0x110>)
    315c:	4628      	mov	r0, r5
    315e:	f000 fc65 	bl	3a2c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3162:	7b6b      	ldrb	r3, [r5, #13]
    3164:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3168:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    316c:	736a      	strb	r2, [r5, #13]
    316e:	4634      	mov	r4, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3170:	d104      	bne.n	317c <z_cstart+0x94>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    3172:	69ab      	ldr	r3, [r5, #24]
    3174:	b913      	cbnz	r3, 317c <z_cstart+0x94>
		z_add_thread_to_ready_q(thread);
    3176:	4628      	mov	r0, r5
    3178:	f000 f9b2 	bl	34e0 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
    317c:	4b1f      	ldr	r3, [pc, #124]	; (31fc <z_cstart+0x114>)
    317e:	4e20      	ldr	r6, [pc, #128]	; (3200 <z_cstart+0x118>)
    3180:	9305      	str	r3, [sp, #20]
    3182:	2201      	movs	r2, #1
    3184:	230f      	movs	r3, #15
    3186:	e9cd 3203 	strd	r3, r2, [sp, #12]
    318a:	2300      	movs	r3, #0
    318c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3190:	491c      	ldr	r1, [pc, #112]	; (3204 <z_cstart+0x11c>)
    3192:	9300      	str	r3, [sp, #0]
    3194:	4630      	mov	r0, r6
    3196:	e9cd 3301 	strd	r3, r3, [sp, #4]
    319a:	4b1b      	ldr	r3, [pc, #108]	; (3208 <z_cstart+0x120>)
    319c:	f000 fc46 	bl	3a2c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    31a0:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
    31a2:	60e6      	str	r6, [r4, #12]
    31a4:	f023 0304 	bic.w	r3, r3, #4
    31a8:	7373      	strb	r3, [r6, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    31aa:	4b18      	ldr	r3, [pc, #96]	; (320c <z_cstart+0x124>)
	list->tail = (sys_dnode_t *)list;
    31ac:	e9c4 3306 	strd	r3, r3, [r4, #24]
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arch_configure_static_mpu_regions();
    31b0:	f7fe fe82 	bl	1eb8 <z_arch_configure_static_mpu_regions>
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arch_configure_dynamic_mpu_regions(main_thread);
    31b4:	480d      	ldr	r0, [pc, #52]	; (31ec <z_cstart+0x104>)
	_current = main_thread;
    31b6:	60a5      	str	r5, [r4, #8]
	z_arch_configure_dynamic_mpu_regions(main_thread);
    31b8:	f001 fa5d 	bl	4676 <z_arch_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    31bc:	4b0d      	ldr	r3, [pc, #52]	; (31f4 <z_cstart+0x10c>)
    31be:	4a14      	ldr	r2, [pc, #80]	; (3210 <z_cstart+0x128>)
    31c0:	4618      	mov	r0, r3
    31c2:	f382 8809 	msr	PSP, r2
    31c6:	b663      	cpsie	if
    31c8:	f04f 0100 	mov.w	r1, #0
    31cc:	f381 8811 	msr	BASEPRI, r1
    31d0:	f3bf 8f6f 	isb	sy
    31d4:	2100      	movs	r1, #0
    31d6:	2200      	movs	r2, #0
    31d8:	2300      	movs	r3, #0
    31da:	f001 f84e 	bl	427a <z_thread_entry>
    31de:	bf00      	nop
    31e0:	20001678 	.word	0x20001678
    31e4:	e000ed00 	.word	0xe000ed00
    31e8:	20000264 	.word	0x20000264
    31ec:	200001f8 	.word	0x200001f8
    31f0:	00005738 	.word	0x00005738
    31f4:	000030b9 	.word	0x000030b9
    31f8:	20000938 	.word	0x20000938
    31fc:	0000573d 	.word	0x0000573d
    3200:	2000018c 	.word	0x2000018c
    3204:	20000d38 	.word	0x20000d38
    3208:	0000303d 	.word	0x0000303d
    320c:	2000027c 	.word	0x2000027c
    3210:	20000d38 	.word	0x20000d38

00003214 <z_impl_k_mutex_lock>:
		z_thread_priority_set(mutex->owner, new_prio);
	}
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    3214:	b570      	push	{r4, r5, r6, lr}
    3216:	460d      	mov	r5, r1
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    3218:	4934      	ldr	r1, [pc, #208]	; (32ec <z_impl_k_mutex_lock+0xd8>)
    321a:	688b      	ldr	r3, [r1, #8]
    321c:	7bda      	ldrb	r2, [r3, #15]
    321e:	3a01      	subs	r2, #1
    3220:	4604      	mov	r4, r0
    3222:	73da      	strb	r2, [r3, #15]
	k_spinlock_key_t key;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	z_sched_lock();

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3224:	68c2      	ldr	r2, [r0, #12]
    3226:	4608      	mov	r0, r1
    3228:	b14a      	cbz	r2, 323e <z_impl_k_mutex_lock+0x2a>
    322a:	68a3      	ldr	r3, [r4, #8]
    322c:	6889      	ldr	r1, [r1, #8]
    322e:	428b      	cmp	r3, r1
    3230:	d012      	beq.n	3258 <z_impl_k_mutex_lock+0x44>
		return 0;
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
    3232:	b99d      	cbnz	r5, 325c <z_impl_k_mutex_lock+0x48>
		k_sched_unlock();
    3234:	f000 f938 	bl	34a8 <k_sched_unlock>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    3238:	f06f 050f 	mvn.w	r5, #15
    323c:	e00a      	b.n	3254 <z_impl_k_mutex_lock+0x40>
					_current->base.prio :
    323e:	688b      	ldr	r3, [r1, #8]
    3240:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3244:	6123      	str	r3, [r4, #16]
		mutex->lock_count++;
    3246:	3201      	adds	r2, #1
		mutex->owner = _current;
    3248:	6883      	ldr	r3, [r0, #8]
		mutex->lock_count++;
    324a:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
    324c:	60a3      	str	r3, [r4, #8]
		k_sched_unlock();
    324e:	f000 f92b 	bl	34a8 <k_sched_unlock>
		return 0;
    3252:	2500      	movs	r5, #0

	k_sched_unlock();

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    3254:	4628      	mov	r0, r5
    3256:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
    3258:	6923      	ldr	r3, [r4, #16]
    325a:	e7f3      	b.n	3244 <z_impl_k_mutex_lock+0x30>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    325c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3260:	f993 300e 	ldrsb.w	r3, [r3, #14]
    3264:	4299      	cmp	r1, r3
    3266:	bfa8      	it	ge
    3268:	4619      	movge	r1, r3
    326a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    326e:	f04f 0320 	mov.w	r3, #32
    3272:	f3ef 8611 	mrs	r6, BASEPRI
    3276:	f383 8811 	msr	BASEPRI, r3
    327a:	f3bf 8f6f 	isb	sy
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    327e:	68a0      	ldr	r0, [r4, #8]
    3280:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3284:	4299      	cmp	r1, r3
    3286:	da01      	bge.n	328c <z_impl_k_mutex_lock+0x78>
		z_thread_priority_set(mutex->owner, new_prio);
    3288:	f000 fa54 	bl	3734 <z_thread_priority_set>
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    328c:	462b      	mov	r3, r5
    328e:	4622      	mov	r2, r4
    3290:	4631      	mov	r1, r6
    3292:	4817      	ldr	r0, [pc, #92]	; (32f0 <z_impl_k_mutex_lock+0xdc>)
    3294:	f000 fa3a 	bl	370c <z_pend_curr>
	if (got_mutex == 0) {
    3298:	4605      	mov	r5, r0
    329a:	b910      	cbnz	r0, 32a2 <z_impl_k_mutex_lock+0x8e>
		k_sched_unlock();
    329c:	f000 f904 	bl	34a8 <k_sched_unlock>
		return 0;
    32a0:	e7d8      	b.n	3254 <z_impl_k_mutex_lock+0x40>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    32a2:	6823      	ldr	r3, [r4, #0]
    32a4:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    32a6:	429c      	cmp	r4, r3
    32a8:	d007      	beq.n	32ba <z_impl_k_mutex_lock+0xa6>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
    32aa:	b133      	cbz	r3, 32ba <z_impl_k_mutex_lock+0xa6>
    32ac:	f993 300e 	ldrsb.w	r3, [r3, #14]
    32b0:	4299      	cmp	r1, r3
    32b2:	bfa8      	it	ge
    32b4:	4619      	movge	r1, r3
    32b6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    32ba:	f04f 0320 	mov.w	r3, #32
    32be:	f3ef 8511 	mrs	r5, BASEPRI
    32c2:	f383 8811 	msr	BASEPRI, r3
    32c6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, new_prio);
    32ca:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    32cc:	f990 300e 	ldrsb.w	r3, [r0, #14]
    32d0:	4299      	cmp	r1, r3
    32d2:	d001      	beq.n	32d8 <z_impl_k_mutex_lock+0xc4>
		z_thread_priority_set(mutex->owner, new_prio);
    32d4:	f000 fa2e 	bl	3734 <z_thread_priority_set>
	__asm__ volatile(
    32d8:	f385 8811 	msr	BASEPRI, r5
    32dc:	f3bf 8f6f 	isb	sy
	k_sched_unlock();
    32e0:	f000 f8e2 	bl	34a8 <k_sched_unlock>
	return -EAGAIN;
    32e4:	f06f 050a 	mvn.w	r5, #10
    32e8:	e7b4      	b.n	3254 <z_impl_k_mutex_lock+0x40>
    32ea:	bf00      	nop
    32ec:	20000264 	.word	0x20000264
    32f0:	20000937 	.word	0x20000937

000032f4 <z_impl_k_mutex_unlock>:
    32f4:	4b1e      	ldr	r3, [pc, #120]	; (3370 <z_impl_k_mutex_unlock+0x7c>)
    32f6:	689a      	ldr	r2, [r3, #8]
    32f8:	7bd3      	ldrb	r3, [r2, #15]
    32fa:	3b01      	subs	r3, #1
	return z_impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    32fc:	b570      	push	{r4, r5, r6, lr}
    32fe:	4604      	mov	r4, r0
    3300:	73d3      	strb	r3, [r2, #15]
	RECORD_STATE_CHANGE();


	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
    3302:	68c3      	ldr	r3, [r0, #12]
    3304:	2b01      	cmp	r3, #1
    3306:	d005      	beq.n	3314 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
    3308:	3b01      	subs	r3, #1
    330a:	60c3      	str	r3, [r0, #12]
	}


k_mutex_unlock_return:
	k_sched_unlock();
}
    330c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
    3310:	f000 b8ca 	b.w	34a8 <k_sched_unlock>
	__asm__ volatile(
    3314:	f04f 0320 	mov.w	r3, #32
    3318:	f3ef 8611 	mrs	r6, BASEPRI
    331c:	f383 8811 	msr	BASEPRI, r3
    3320:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3324:	6901      	ldr	r1, [r0, #16]
    3326:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    3328:	f990 300e 	ldrsb.w	r3, [r0, #14]
    332c:	4299      	cmp	r1, r3
    332e:	d001      	beq.n	3334 <z_impl_k_mutex_unlock+0x40>
		z_thread_priority_set(mutex->owner, new_prio);
    3330:	f000 fa00 	bl	3734 <z_thread_priority_set>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    3334:	4620      	mov	r0, r4
    3336:	f001 fd28 	bl	4d8a <z_unpend_first_thread>
    333a:	4605      	mov	r5, r0
	mutex->owner = new_owner;
    333c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    333e:	b180      	cbz	r0, 3362 <z_impl_k_mutex_unlock+0x6e>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3340:	7b43      	ldrb	r3, [r0, #13]
    3342:	06db      	lsls	r3, r3, #27
    3344:	d103      	bne.n	334e <z_impl_k_mutex_unlock+0x5a>
	if (z_is_thread_ready(thread)) {
    3346:	6983      	ldr	r3, [r0, #24]
    3348:	b90b      	cbnz	r3, 334e <z_impl_k_mutex_unlock+0x5a>
		z_add_thread_to_ready_q(thread);
    334a:	f000 f8c9 	bl	34e0 <z_add_thread_to_ready_q>
	__asm__ volatile(
    334e:	f386 8811 	msr	BASEPRI, r6
    3352:	f3bf 8f6f 	isb	sy
}

static ALWAYS_INLINE void
z_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3356:	2300      	movs	r3, #0
    3358:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
    335a:	f995 300e 	ldrsb.w	r3, [r5, #14]
    335e:	6123      	str	r3, [r4, #16]
    3360:	e7d4      	b.n	330c <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0;
    3362:	60e0      	str	r0, [r4, #12]
    3364:	f386 8811 	msr	BASEPRI, r6
    3368:	f3bf 8f6f 	isb	sy
    336c:	e7ce      	b.n	330c <z_impl_k_mutex_unlock+0x18>
    336e:	bf00      	nop
    3370:	20000264 	.word	0x20000264

00003374 <resched>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3374:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    3378:	280d      	cmp	r0, #13
    337a:	d809      	bhi.n	3390 <resched+0x1c>
    337c:	b128      	cbz	r0, 338a <resched+0x16>
    337e:	4b05      	ldr	r3, [pc, #20]	; (3394 <resched+0x20>)
    3380:	6858      	ldr	r0, [r3, #4]
    3382:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    3386:	f3c0 20c0 	ubfx	r0, r0, #11, #1
	}
	_current_cpu->swap_ok = 0;
#endif

	return !z_is_in_isr();
}
    338a:	f080 0001 	eor.w	r0, r0, #1
    338e:	4770      	bx	lr
    3390:	2001      	movs	r0, #1
    3392:	e7fa      	b.n	338a <resched+0x16>
    3394:	e000ed00 	.word	0xe000ed00

00003398 <reset_time_slice>:
{
    3398:	b508      	push	{r3, lr}
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    339a:	f7fe fa5d 	bl	1858 <z_clock_elapsed>
    339e:	4b05      	ldr	r3, [pc, #20]	; (33b4 <reset_time_slice+0x1c>)
    33a0:	4a05      	ldr	r2, [pc, #20]	; (33b8 <reset_time_slice+0x20>)
    33a2:	681b      	ldr	r3, [r3, #0]
    33a4:	4418      	add	r0, r3
    33a6:	6110      	str	r0, [r2, #16]
	z_set_timeout_expiry(slice_time, false);
    33a8:	2100      	movs	r1, #0
    33aa:	4618      	mov	r0, r3
}
    33ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_set_timeout_expiry(slice_time, false);
    33b0:	f001 bd70 	b.w	4e94 <z_set_timeout_expiry>
    33b4:	2000029c 	.word	0x2000029c
    33b8:	20000264 	.word	0x20000264

000033bc <k_sched_time_slice_set>:
{
    33bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33be:	460d      	mov	r5, r1
	__asm__ volatile(
    33c0:	f04f 0320 	mov.w	r3, #32
    33c4:	f3ef 8411 	mrs	r4, BASEPRI
    33c8:	f383 8811 	msr	BASEPRI, r3
    33cc:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction(
    33d0:	4e0d      	ldr	r6, [pc, #52]	; (3408 <k_sched_time_slice_set+0x4c>)
		_current_cpu->slice_ticks = 0;
    33d2:	4b0e      	ldr	r3, [pc, #56]	; (340c <k_sched_time_slice_set+0x50>)
    33d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    33d8:	2700      	movs	r7, #0
    33da:	fbc1 6700 	smlal	r6, r7, r1, r0
    33de:	2200      	movs	r2, #0
    33e0:	611a      	str	r2, [r3, #16]
    33e2:	4630      	mov	r0, r6
    33e4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    33e8:	2300      	movs	r3, #0
    33ea:	4639      	mov	r1, r7
    33ec:	f7fc fe76 	bl	dc <__aeabi_ldivmod>
    33f0:	4b07      	ldr	r3, [pc, #28]	; (3410 <k_sched_time_slice_set+0x54>)
    33f2:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    33f4:	4b07      	ldr	r3, [pc, #28]	; (3414 <k_sched_time_slice_set+0x58>)
    33f6:	601d      	str	r5, [r3, #0]
		reset_time_slice();
    33f8:	f7ff ffce 	bl	3398 <reset_time_slice>
	__asm__ volatile(
    33fc:	f384 8811 	msr	BASEPRI, r4
    3400:	f3bf 8f6f 	isb	sy
}
    3404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3406:	bf00      	nop
    3408:	0004ffff 	.word	0x0004ffff
    340c:	20000264 	.word	0x20000264
    3410:	2000029c 	.word	0x2000029c
    3414:	20000298 	.word	0x20000298

00003418 <k_sched_lock>:
	__asm__ volatile(
    3418:	f04f 0320 	mov.w	r3, #32
    341c:	f3ef 8111 	mrs	r1, BASEPRI
    3420:	f383 8811 	msr	BASEPRI, r3
    3424:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    3428:	4b04      	ldr	r3, [pc, #16]	; (343c <k_sched_lock+0x24>)
    342a:	689a      	ldr	r2, [r3, #8]
    342c:	7bd3      	ldrb	r3, [r2, #15]
    342e:	3b01      	subs	r3, #1
    3430:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3432:	f381 8811 	msr	BASEPRI, r1
    3436:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    343a:	4770      	bx	lr
    343c:	20000264 	.word	0x20000264

00003440 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    3440:	4b09      	ldr	r3, [pc, #36]	; (3468 <z_priq_dumb_remove+0x28>)
    3442:	f103 0228 	add.w	r2, r3, #40	; 0x28
    3446:	4282      	cmp	r2, r0
    3448:	d105      	bne.n	3456 <z_priq_dumb_remove+0x16>
    344a:	689b      	ldr	r3, [r3, #8]
    344c:	428b      	cmp	r3, r1
    344e:	d102      	bne.n	3456 <z_priq_dumb_remove+0x16>
    3450:	7b4b      	ldrb	r3, [r1, #13]
    3452:	06db      	lsls	r3, r3, #27
    3454:	d107      	bne.n	3466 <z_priq_dumb_remove+0x26>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    3456:	e9d1 2300 	ldrd	r2, r3, [r1]
    345a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    345c:	680a      	ldr	r2, [r1, #0]
    345e:	6053      	str	r3, [r2, #4]
	node->next = NULL;
    3460:	2300      	movs	r3, #0
	node->prev = NULL;
    3462:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    3466:	4770      	bx	lr
    3468:	20000264 	.word	0x20000264

0000346c <update_cache>:
{
    346c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    346e:	4c0d      	ldr	r4, [pc, #52]	; (34a4 <update_cache+0x38>)
{
    3470:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    3472:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3476:	f001 fc51 	bl	4d1c <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    347a:	4605      	mov	r5, r0
    347c:	b900      	cbnz	r0, 3480 <update_cache+0x14>
    347e:	68e5      	ldr	r5, [r4, #12]
    3480:	68a3      	ldr	r3, [r4, #8]
	if (preempt_ok != 0) {
    3482:	b94a      	cbnz	r2, 3498 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    3484:	7b5a      	ldrb	r2, [r3, #13]
    3486:	06d2      	lsls	r2, r2, #27
    3488:	d106      	bne.n	3498 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    348a:	69aa      	ldr	r2, [r5, #24]
    348c:	b922      	cbnz	r2, 3498 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
    348e:	89da      	ldrh	r2, [r3, #14]
    3490:	2a7f      	cmp	r2, #127	; 0x7f
    3492:	d901      	bls.n	3498 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    3494:	6263      	str	r3, [r4, #36]	; 0x24
}
    3496:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
    3498:	429d      	cmp	r5, r3
    349a:	d001      	beq.n	34a0 <update_cache+0x34>
			reset_time_slice();
    349c:	f7ff ff7c 	bl	3398 <reset_time_slice>
		_kernel.ready_q.cache = th;
    34a0:	6265      	str	r5, [r4, #36]	; 0x24
}
    34a2:	e7f8      	b.n	3496 <update_cache+0x2a>
    34a4:	20000264 	.word	0x20000264

000034a8 <k_sched_unlock>:
{
    34a8:	b510      	push	{r4, lr}
	__asm__ volatile(
    34aa:	f04f 0320 	mov.w	r3, #32
    34ae:	f3ef 8411 	mrs	r4, BASEPRI
    34b2:	f383 8811 	msr	BASEPRI, r3
    34b6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    34ba:	4b08      	ldr	r3, [pc, #32]	; (34dc <k_sched_unlock+0x34>)
    34bc:	689a      	ldr	r2, [r3, #8]
    34be:	7bd3      	ldrb	r3, [r2, #15]
    34c0:	3301      	adds	r3, #1
    34c2:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
    34c4:	2001      	movs	r0, #1
    34c6:	f7ff ffd1 	bl	346c <update_cache>
	__asm__ volatile(
    34ca:	f384 8811 	msr	BASEPRI, r4
    34ce:	f3bf 8f6f 	isb	sy
}
    34d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    34d6:	f001 bc17 	b.w	4d08 <z_reschedule_unlocked>
    34da:	bf00      	nop
    34dc:	20000264 	.word	0x20000264

000034e0 <z_add_thread_to_ready_q>:
{
    34e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    34e2:	f04f 0320 	mov.w	r3, #32
    34e6:	f3ef 8411 	mrs	r4, BASEPRI
    34ea:	f383 8811 	msr	BASEPRI, r3
    34ee:	f3bf 8f6f 	isb	sy
	return list->head == list;
    34f2:	4a16      	ldr	r2, [pc, #88]	; (354c <z_add_thread_to_ready_q+0x6c>)
    34f4:	4611      	mov	r1, r2
    34f6:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    34fa:	428b      	cmp	r3, r1
    34fc:	d00c      	beq.n	3518 <z_add_thread_to_ready_q+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    34fe:	b15b      	cbz	r3, 3518 <z_add_thread_to_ready_q+0x38>
    3500:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    3502:	f990 500e 	ldrsb.w	r5, [r0, #14]
    3506:	f993 700e 	ldrsb.w	r7, [r3, #14]
    350a:	42af      	cmp	r7, r5
    350c:	dc0b      	bgt.n	3526 <z_add_thread_to_ready_q+0x46>
	return (node == list->tail) ? NULL : node->next;
    350e:	42b3      	cmp	r3, r6
    3510:	d002      	beq.n	3518 <z_add_thread_to_ready_q+0x38>
    3512:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3514:	2b00      	cmp	r3, #0
    3516:	d1f6      	bne.n	3506 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    3518:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    351a:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    351c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    351e:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
    3520:	6018      	str	r0, [r3, #0]
	list->tail = node;
    3522:	62d0      	str	r0, [r2, #44]	; 0x2c
    3524:	e005      	b.n	3532 <z_add_thread_to_ready_q+0x52>
	node->prev = successor->prev;
    3526:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3528:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    352c:	685a      	ldr	r2, [r3, #4]
    352e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3530:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    3532:	7b43      	ldrb	r3, [r0, #13]
    3534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3538:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    353a:	2000      	movs	r0, #0
    353c:	f7ff ff96 	bl	346c <update_cache>
	__asm__ volatile(
    3540:	f384 8811 	msr	BASEPRI, r4
    3544:	f3bf 8f6f 	isb	sy
}
    3548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    354a:	bf00      	nop
    354c:	20000264 	.word	0x20000264

00003550 <z_move_thread_to_end_of_prio_q>:
{
    3550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3552:	4604      	mov	r4, r0
	__asm__ volatile(
    3554:	f04f 0320 	mov.w	r3, #32
    3558:	f3ef 8611 	mrs	r6, BASEPRI
    355c:	f383 8811 	msr	BASEPRI, r3
    3560:	f3bf 8f6f 	isb	sy
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    3564:	4f19      	ldr	r7, [pc, #100]	; (35cc <z_move_thread_to_end_of_prio_q+0x7c>)
    3566:	f107 0528 	add.w	r5, r7, #40	; 0x28
    356a:	4601      	mov	r1, r0
    356c:	4628      	mov	r0, r5
    356e:	f7ff ff67 	bl	3440 <z_priq_dumb_remove>
	return list->head == list;
    3572:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3574:	42ab      	cmp	r3, r5
    3576:	463a      	mov	r2, r7
    3578:	d00c      	beq.n	3594 <z_move_thread_to_end_of_prio_q+0x44>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    357a:	b15b      	cbz	r3, 3594 <z_move_thread_to_end_of_prio_q+0x44>
    357c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    357e:	f994 100e 	ldrsb.w	r1, [r4, #14]
    3582:	f993 700e 	ldrsb.w	r7, [r3, #14]
    3586:	428f      	cmp	r7, r1
    3588:	dc0b      	bgt.n	35a2 <z_move_thread_to_end_of_prio_q+0x52>
	return (node == list->tail) ? NULL : node->next;
    358a:	4283      	cmp	r3, r0
    358c:	d002      	beq.n	3594 <z_move_thread_to_end_of_prio_q+0x44>
    358e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3590:	2b00      	cmp	r3, #0
    3592:	d1f6      	bne.n	3582 <z_move_thread_to_end_of_prio_q+0x32>
	node->prev = list->tail;
    3594:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    3596:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    3598:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    359a:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    359c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    359e:	62d4      	str	r4, [r2, #44]	; 0x2c
    35a0:	e005      	b.n	35ae <z_move_thread_to_end_of_prio_q+0x5e>
	node->prev = successor->prev;
    35a2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    35a4:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    35a8:	6859      	ldr	r1, [r3, #4]
    35aa:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    35ac:	605c      	str	r4, [r3, #4]
    35ae:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    35b0:	6890      	ldr	r0, [r2, #8]
    35b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    35b6:	7363      	strb	r3, [r4, #13]
    35b8:	1b03      	subs	r3, r0, r4
    35ba:	4258      	negs	r0, r3
    35bc:	4158      	adcs	r0, r3
    35be:	f7ff ff55 	bl	346c <update_cache>
	__asm__ volatile(
    35c2:	f386 8811 	msr	BASEPRI, r6
    35c6:	f3bf 8f6f 	isb	sy
}
    35ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35cc:	20000264 	.word	0x20000264

000035d0 <z_time_slice>:
	if (pending_current == _current) {
    35d0:	4914      	ldr	r1, [pc, #80]	; (3624 <z_time_slice+0x54>)
    35d2:	4a15      	ldr	r2, [pc, #84]	; (3628 <z_time_slice+0x58>)
    35d4:	688b      	ldr	r3, [r1, #8]
{
    35d6:	b510      	push	{r4, lr}
	if (pending_current == _current) {
    35d8:	6814      	ldr	r4, [r2, #0]
    35da:	42a3      	cmp	r3, r4
    35dc:	d103      	bne.n	35e6 <z_time_slice+0x16>
}
    35de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			reset_time_slice();
    35e2:	f7ff bed9 	b.w	3398 <reset_time_slice>
	pending_current = NULL;
    35e6:	2400      	movs	r4, #0
    35e8:	6014      	str	r4, [r2, #0]
	if (slice_time && sliceable(_current)) {
    35ea:	4a10      	ldr	r2, [pc, #64]	; (362c <z_time_slice+0x5c>)
    35ec:	6812      	ldr	r2, [r2, #0]
    35ee:	b1ba      	cbz	r2, 3620 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
    35f0:	89da      	ldrh	r2, [r3, #14]
    35f2:	2a7f      	cmp	r2, #127	; 0x7f
    35f4:	d814      	bhi.n	3620 <z_time_slice+0x50>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
    35f6:	4a0e      	ldr	r2, [pc, #56]	; (3630 <z_time_slice+0x60>)
    35f8:	f993 400e 	ldrsb.w	r4, [r3, #14]
    35fc:	6812      	ldr	r2, [r2, #0]
    35fe:	4294      	cmp	r4, r2
    3600:	db0e      	blt.n	3620 <z_time_slice+0x50>
	return thread == _idle_thread;
    3602:	4a0c      	ldr	r2, [pc, #48]	; (3634 <z_time_slice+0x64>)
		&& !is_idle(t)
    3604:	6812      	ldr	r2, [r2, #0]
    3606:	4293      	cmp	r3, r2
    3608:	d00a      	beq.n	3620 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
    360a:	699a      	ldr	r2, [r3, #24]
    360c:	b942      	cbnz	r2, 3620 <z_time_slice+0x50>
		if (ticks >= _current_cpu->slice_ticks) {
    360e:	690a      	ldr	r2, [r1, #16]
    3610:	4282      	cmp	r2, r0
    3612:	dc03      	bgt.n	361c <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    3614:	4618      	mov	r0, r3
    3616:	f7ff ff9b 	bl	3550 <z_move_thread_to_end_of_prio_q>
    361a:	e7e0      	b.n	35de <z_time_slice+0xe>
			_current_cpu->slice_ticks -= ticks;
    361c:	1a12      	subs	r2, r2, r0
    361e:	610a      	str	r2, [r1, #16]
}
    3620:	bd10      	pop	{r4, pc}
    3622:	bf00      	nop
    3624:	20000264 	.word	0x20000264
    3628:	20000294 	.word	0x20000294
    362c:	2000029c 	.word	0x2000029c
    3630:	20000298 	.word	0x20000298
    3634:	000051ac 	.word	0x000051ac

00003638 <z_remove_thread_from_ready_q>:
{
    3638:	b538      	push	{r3, r4, r5, lr}
    363a:	4604      	mov	r4, r0
	__asm__ volatile(
    363c:	f04f 0320 	mov.w	r3, #32
    3640:	f3ef 8511 	mrs	r5, BASEPRI
    3644:	f383 8811 	msr	BASEPRI, r3
    3648:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    364c:	7b43      	ldrb	r3, [r0, #13]
    364e:	065a      	lsls	r2, r3, #25
    3650:	d507      	bpl.n	3662 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    3652:	4601      	mov	r1, r0
    3654:	4809      	ldr	r0, [pc, #36]	; (367c <z_remove_thread_from_ready_q+0x44>)
    3656:	f7ff fef3 	bl	3440 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    365a:	7b63      	ldrb	r3, [r4, #13]
    365c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    3660:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    3662:	4b07      	ldr	r3, [pc, #28]	; (3680 <z_remove_thread_from_ready_q+0x48>)
    3664:	6898      	ldr	r0, [r3, #8]
    3666:	1b03      	subs	r3, r0, r4
    3668:	4258      	negs	r0, r3
    366a:	4158      	adcs	r0, r3
    366c:	f7ff fefe 	bl	346c <update_cache>
	__asm__ volatile(
    3670:	f385 8811 	msr	BASEPRI, r5
    3674:	f3bf 8f6f 	isb	sy
}
    3678:	bd38      	pop	{r3, r4, r5, pc}
    367a:	bf00      	nop
    367c:	2000028c 	.word	0x2000028c
    3680:	20000264 	.word	0x20000264

00003684 <pend>:
{
    3684:	b570      	push	{r4, r5, r6, lr}
    3686:	4604      	mov	r4, r0
    3688:	460d      	mov	r5, r1
    368a:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
    368c:	f7ff ffd4 	bl	3638 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    3690:	7b63      	ldrb	r3, [r4, #13]
    3692:	f043 0302 	orr.w	r3, r3, #2
    3696:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    3698:	b1ed      	cbz	r5, 36d6 <pend+0x52>
	return list->head == list;
    369a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    369c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    369e:	429d      	cmp	r5, r3
    36a0:	d00c      	beq.n	36bc <pend+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    36a2:	b15b      	cbz	r3, 36bc <pend+0x38>
	if (t1->base.prio < t2->base.prio) {
    36a4:	f994 200e 	ldrsb.w	r2, [r4, #14]
    36a8:	f993 100e 	ldrsb.w	r1, [r3, #14]
    36ac:	4291      	cmp	r1, r2
    36ae:	dc0c      	bgt.n	36ca <pend+0x46>
	return (node == list->tail) ? NULL : node->next;
    36b0:	6869      	ldr	r1, [r5, #4]
    36b2:	428b      	cmp	r3, r1
    36b4:	d002      	beq.n	36bc <pend+0x38>
    36b6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    36b8:	2b00      	cmp	r3, #0
    36ba:	d1f5      	bne.n	36a8 <pend+0x24>
	node->prev = list->tail;
    36bc:	686b      	ldr	r3, [r5, #4]
    36be:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    36c0:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    36c2:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    36c4:	601c      	str	r4, [r3, #0]
	list->tail = node;
    36c6:	606c      	str	r4, [r5, #4]
    36c8:	e005      	b.n	36d6 <pend+0x52>
	node->prev = successor->prev;
    36ca:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    36cc:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    36d0:	685a      	ldr	r2, [r3, #4]
    36d2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    36d4:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
    36d6:	1c73      	adds	r3, r6, #1
    36d8:	d012      	beq.n	3700 <pend+0x7c>
    36da:	480a      	ldr	r0, [pc, #40]	; (3704 <pend+0x80>)
    36dc:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    36e0:	2100      	movs	r1, #0
    36e2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    36e6:	fbc5 0106 	smlal	r0, r1, r5, r6
    36ea:	2300      	movs	r3, #0
    36ec:	f7fc fcf6 	bl	dc <__aeabi_ldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    36f0:	4905      	ldr	r1, [pc, #20]	; (3708 <pend+0x84>)
    36f2:	1c42      	adds	r2, r0, #1
    36f4:	f104 0018 	add.w	r0, r4, #24
}
    36f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    36fc:	f000 ba54 	b.w	3ba8 <z_add_timeout>
    3700:	bd70      	pop	{r4, r5, r6, pc}
    3702:	bf00      	nop
    3704:	0004ffff 	.word	0x0004ffff
    3708:	00004d29 	.word	0x00004d29

0000370c <z_pend_curr>:
{
    370c:	b510      	push	{r4, lr}
    370e:	460c      	mov	r4, r1
    3710:	4611      	mov	r1, r2
	pending_current = _current;
    3712:	4a06      	ldr	r2, [pc, #24]	; (372c <z_pend_curr+0x20>)
    3714:	6890      	ldr	r0, [r2, #8]
    3716:	4a06      	ldr	r2, [pc, #24]	; (3730 <z_pend_curr+0x24>)
    3718:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
    371a:	461a      	mov	r2, r3
    371c:	f7ff ffb2 	bl	3684 <pend>
    3720:	4620      	mov	r0, r4
}
    3722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3726:	f7fe b8cf 	b.w	18c8 <__swap>
    372a:	bf00      	nop
    372c:	20000264 	.word	0x20000264
    3730:	20000294 	.word	0x20000294

00003734 <z_thread_priority_set>:
{
    3734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3738:	4604      	mov	r4, r0
	__asm__ volatile(
    373a:	f04f 0320 	mov.w	r3, #32
    373e:	f3ef 8911 	mrs	r9, BASEPRI
    3742:	f383 8811 	msr	BASEPRI, r3
    3746:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
    374a:	f001 fa9e 	bl	4c8a <z_is_thread_ready>
    374e:	b24e      	sxtb	r6, r1
		if (need_sched) {
    3750:	4680      	mov	r8, r0
    3752:	2800      	cmp	r0, #0
    3754:	d035      	beq.n	37c2 <z_thread_priority_set+0x8e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    3756:	4d1d      	ldr	r5, [pc, #116]	; (37cc <z_thread_priority_set+0x98>)
    3758:	f105 0728 	add.w	r7, r5, #40	; 0x28
    375c:	4621      	mov	r1, r4
    375e:	4638      	mov	r0, r7
    3760:	f7ff fe6e 	bl	3440 <z_priq_dumb_remove>
	return list->head == list;
    3764:	6aab      	ldr	r3, [r5, #40]	; 0x28
			thread->base.prio = prio;
    3766:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3768:	42bb      	cmp	r3, r7
    376a:	462a      	mov	r2, r5
    376c:	d00a      	beq.n	3784 <z_thread_priority_set+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    376e:	b14b      	cbz	r3, 3784 <z_thread_priority_set+0x50>
    3770:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    3772:	f993 000e 	ldrsb.w	r0, [r3, #14]
    3776:	42b0      	cmp	r0, r6
    3778:	dc0b      	bgt.n	3792 <z_thread_priority_set+0x5e>
	return (node == list->tail) ? NULL : node->next;
    377a:	4299      	cmp	r1, r3
    377c:	d002      	beq.n	3784 <z_thread_priority_set+0x50>
    377e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3780:	2b00      	cmp	r3, #0
    3782:	d1f6      	bne.n	3772 <z_thread_priority_set+0x3e>
	node->prev = list->tail;
    3784:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    3786:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    3788:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    378a:	6027      	str	r7, [r4, #0]
	list->tail->next = node;
    378c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    378e:	62d4      	str	r4, [r2, #44]	; 0x2c
    3790:	e005      	b.n	379e <z_thread_priority_set+0x6a>
	node->prev = successor->prev;
    3792:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3794:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    3798:	685a      	ldr	r2, [r3, #4]
    379a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    379c:	605c      	str	r4, [r3, #4]
			update_cache(1);
    379e:	2001      	movs	r0, #1
    37a0:	f7ff fe64 	bl	346c <update_cache>
	__asm__ volatile(
    37a4:	f389 8811 	msr	BASEPRI, r9
    37a8:	f3bf 8f6f 	isb	sy
	if (need_sched && _current->base.sched_locked == 0) {
    37ac:	f1b8 0f00 	cmp.w	r8, #0
    37b0:	d009      	beq.n	37c6 <z_thread_priority_set+0x92>
    37b2:	4b06      	ldr	r3, [pc, #24]	; (37cc <z_thread_priority_set+0x98>)
    37b4:	689b      	ldr	r3, [r3, #8]
    37b6:	7bdb      	ldrb	r3, [r3, #15]
    37b8:	b92b      	cbnz	r3, 37c6 <z_thread_priority_set+0x92>
}
    37ba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		z_reschedule_unlocked();
    37be:	f001 baa3 	b.w	4d08 <z_reschedule_unlocked>
			thread->base.prio = prio;
    37c2:	73a6      	strb	r6, [r4, #14]
    37c4:	e7ee      	b.n	37a4 <z_thread_priority_set+0x70>
}
    37c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    37ca:	bf00      	nop
    37cc:	20000264 	.word	0x20000264

000037d0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    37d0:	4b04      	ldr	r3, [pc, #16]	; (37e4 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    37d2:	2100      	movs	r1, #0
    37d4:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    37d8:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    37dc:	4608      	mov	r0, r1
    37de:	f7ff bded 	b.w	33bc <k_sched_time_slice_set>
    37e2:	bf00      	nop
    37e4:	20000264 	.word	0x20000264

000037e8 <z_impl_k_yield>:
}
#endif
#endif

void z_impl_k_yield(void)
{
    37e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(!z_is_in_isr(), "");

	if (!is_idle(_current)) {
    37ea:	4c22      	ldr	r4, [pc, #136]	; (3874 <z_impl_k_yield+0x8c>)
    37ec:	4b22      	ldr	r3, [pc, #136]	; (3878 <z_impl_k_yield+0x90>)
    37ee:	68a2      	ldr	r2, [r4, #8]
    37f0:	681b      	ldr	r3, [r3, #0]
    37f2:	429a      	cmp	r2, r3
    37f4:	d032      	beq.n	385c <z_impl_k_yield+0x74>
	__asm__ volatile(
    37f6:	f04f 0320 	mov.w	r3, #32
    37fa:	f3ef 8611 	mrs	r6, BASEPRI
    37fe:	f383 8811 	msr	BASEPRI, r3
    3802:	f3bf 8f6f 	isb	sy
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
    3806:	f104 0528 	add.w	r5, r4, #40	; 0x28
    380a:	68a1      	ldr	r1, [r4, #8]
    380c:	4628      	mov	r0, r5
    380e:	f7ff fe17 	bl	3440 <z_priq_dumb_remove>
	return list->head == list;
    3812:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						 _current);
				_priq_run_add(&_kernel.ready_q.runq,
    3814:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3816:	42ab      	cmp	r3, r5
    3818:	d00c      	beq.n	3834 <z_impl_k_yield+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    381a:	b15b      	cbz	r3, 3834 <z_impl_k_yield+0x4c>
    381c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    381e:	f992 000e 	ldrsb.w	r0, [r2, #14]
    3822:	f993 700e 	ldrsb.w	r7, [r3, #14]
    3826:	4287      	cmp	r7, r0
    3828:	dc0b      	bgt.n	3842 <z_impl_k_yield+0x5a>
	return (node == list->tail) ? NULL : node->next;
    382a:	4299      	cmp	r1, r3
    382c:	d002      	beq.n	3834 <z_impl_k_yield+0x4c>
    382e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3830:	2b00      	cmp	r3, #0
    3832:	d1f6      	bne.n	3822 <z_impl_k_yield+0x3a>
	node->prev = list->tail;
    3834:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3836:	6053      	str	r3, [r2, #4]
	list->tail->next = node;
    3838:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	node->next = list;
    383a:	6015      	str	r5, [r2, #0]
	list->tail->next = node;
    383c:	601a      	str	r2, [r3, #0]
	list->tail = node;
    383e:	62e2      	str	r2, [r4, #44]	; 0x2c
    3840:	e005      	b.n	384e <z_impl_k_yield+0x66>
	node->prev = successor->prev;
    3842:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    3844:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    3848:	6859      	ldr	r1, [r3, #4]
    384a:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    384c:	605a      	str	r2, [r3, #4]
					      _current);
			}
			update_cache(1);
    384e:	2001      	movs	r0, #1
    3850:	f7ff fe0c 	bl	346c <update_cache>
	__asm__ volatile(
    3854:	f386 8811 	msr	BASEPRI, r6
    3858:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    385c:	f04f 0320 	mov.w	r3, #32
    3860:	f3ef 8011 	mrs	r0, BASEPRI
    3864:	f383 8811 	msr	BASEPRI, r3
    3868:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
    386c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3870:	f7fe b82a 	b.w	18c8 <__swap>
    3874:	20000264 	.word	0x20000264
    3878:	000051ac 	.word	0x000051ac

0000387c <z_impl_k_sleep>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

s32_t z_impl_k_sleep(s32_t duration)
{
    387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
    387e:	4604      	mov	r4, r0
    3880:	b918      	cbnz	r0, 388a <z_impl_k_sleep+0xe>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    3882:	f7ff ffb1 	bl	37e8 <z_impl_k_yield>
		return __ticks_to_ms(ticks);
	}
#endif

	return 0;
}
    3886:	4620      	mov	r0, r4
    3888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    388a:	481e      	ldr	r0, [pc, #120]	; (3904 <z_impl_k_sleep+0x88>)
    388c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    3890:	2100      	movs	r1, #0
    3892:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    3896:	2300      	movs	r3, #0
    3898:	fbc5 0104 	smlal	r0, r1, r5, r4
    389c:	f7fc fc1e 	bl	dc <__aeabi_ldivmod>
	ticks = _TICK_ALIGN + z_ms_to_ticks(duration);
    38a0:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
    38a2:	f001 fb11 	bl	4ec8 <z_tick_get_32>
    38a6:	1834      	adds	r4, r6, r0
    38a8:	f04f 0320 	mov.w	r3, #32
    38ac:	f3ef 8711 	mrs	r7, BASEPRI
    38b0:	f383 8811 	msr	BASEPRI, r3
    38b4:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    38b8:	4d13      	ldr	r5, [pc, #76]	; (3908 <z_impl_k_sleep+0x8c>)
    38ba:	4b14      	ldr	r3, [pc, #80]	; (390c <z_impl_k_sleep+0x90>)
    38bc:	68a8      	ldr	r0, [r5, #8]
    38be:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
    38c0:	f7ff feba 	bl	3638 <z_remove_thread_from_ready_q>
    38c4:	68a8      	ldr	r0, [r5, #8]
    38c6:	4912      	ldr	r1, [pc, #72]	; (3910 <z_impl_k_sleep+0x94>)
    38c8:	4632      	mov	r2, r6
    38ca:	3018      	adds	r0, #24
    38cc:	f000 f96c 	bl	3ba8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    38d0:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    38d2:	7b53      	ldrb	r3, [r2, #13]
    38d4:	f043 0310 	orr.w	r3, r3, #16
    38d8:	7353      	strb	r3, [r2, #13]
    38da:	4638      	mov	r0, r7
    38dc:	f7fd fff4 	bl	18c8 <__swap>
	ticks = expected_wakeup_time - z_tick_get_32();
    38e0:	f001 faf2 	bl	4ec8 <z_tick_get_32>
    38e4:	1a20      	subs	r0, r4, r0
	if (ticks > 0) {
    38e6:	2800      	cmp	r0, #0
    38e8:	dd09      	ble.n	38fe <z_impl_k_sleep+0x82>
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    38ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    38ee:	2264      	movs	r2, #100	; 0x64
    38f0:	2300      	movs	r3, #0
    38f2:	fb80 0101 	smull	r0, r1, r0, r1
    38f6:	f7fc fc41 	bl	17c <__aeabi_uldivmod>
    38fa:	4604      	mov	r4, r0
		return __ticks_to_ms(ticks);
    38fc:	e7c3      	b.n	3886 <z_impl_k_sleep+0xa>
	return 0;
    38fe:	2400      	movs	r4, #0
    3900:	e7c1      	b.n	3886 <z_impl_k_sleep+0xa>
    3902:	bf00      	nop
    3904:	0004ffff 	.word	0x0004ffff
    3908:	20000264 	.word	0x20000264
    390c:	20000294 	.word	0x20000294
    3910:	00004d29 	.word	0x00004d29

00003914 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    3914:	4b01      	ldr	r3, [pc, #4]	; (391c <z_impl_k_current_get+0x8>)
    3916:	6898      	ldr	r0, [r3, #8]
    3918:	4770      	bx	lr
    391a:	bf00      	nop
    391c:	20000264 	.word	0x20000264

00003920 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3920:	b570      	push	{r4, r5, r6, lr}
    3922:	4604      	mov	r4, r0
    3924:	f04f 0320 	mov.w	r3, #32
    3928:	f3ef 8611 	mrs	r6, BASEPRI
    392c:	f383 8811 	msr	BASEPRI, r3
    3930:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    3934:	f001 fa29 	bl	4d8a <z_unpend_first_thread>
	if (thread != NULL) {
    3938:	4605      	mov	r5, r0
    393a:	b170      	cbz	r0, 395a <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    393c:	7b43      	ldrb	r3, [r0, #13]
    393e:	06db      	lsls	r3, r3, #27
    3940:	d103      	bne.n	394a <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
    3942:	6983      	ldr	r3, [r0, #24]
    3944:	b90b      	cbnz	r3, 394a <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
    3946:	f7ff fdcb 	bl	34e0 <z_add_thread_to_ready_q>
    394a:	2300      	movs	r3, #0
    394c:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    394e:	4631      	mov	r1, r6
    3950:	4805      	ldr	r0, [pc, #20]	; (3968 <z_impl_k_sem_give+0x48>)
}
    3952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    3956:	f001 b9ba 	b.w	4cce <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
    395a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    395e:	429a      	cmp	r2, r3
    3960:	bf18      	it	ne
    3962:	3301      	addne	r3, #1
    3964:	60a3      	str	r3, [r4, #8]
    3966:	e7f2      	b.n	394e <z_impl_k_sem_give+0x2e>
    3968:	20000937 	.word	0x20000937

0000396c <z_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    396c:	b410      	push	{r4}
    396e:	4602      	mov	r2, r0
    3970:	460b      	mov	r3, r1
    3972:	f04f 0020 	mov.w	r0, #32
    3976:	f3ef 8111 	mrs	r1, BASEPRI
    397a:	f380 8811 	msr	BASEPRI, r0
    397e:	f3bf 8f6f 	isb	sy
	__ASSERT(((z_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    3982:	6894      	ldr	r4, [r2, #8]
    3984:	b144      	cbz	r4, 3998 <z_impl_k_sem_take+0x2c>
		sem->count--;
    3986:	3c01      	subs	r4, #1
    3988:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
    398a:	f381 8811 	msr	BASEPRI, r1
    398e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
    3992:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
    3994:	bc10      	pop	{r4}
    3996:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
    3998:	b933      	cbnz	r3, 39a8 <z_impl_k_sem_take+0x3c>
    399a:	f381 8811 	msr	BASEPRI, r1
    399e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    39a2:	f06f 000f 	mvn.w	r0, #15
    39a6:	e7f5      	b.n	3994 <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    39a8:	4801      	ldr	r0, [pc, #4]	; (39b0 <z_impl_k_sem_take+0x44>)
}
    39aa:	bc10      	pop	{r4}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    39ac:	f7ff beae 	b.w	370c <z_pend_curr>
    39b0:	20000937 	.word	0x20000937

000039b4 <k_is_in_isr>:
    39b4:	f3ef 8005 	mrs	r0, IPSR
    39b8:	280d      	cmp	r0, #13
    39ba:	d807      	bhi.n	39cc <k_is_in_isr+0x18>
    39bc:	b138      	cbz	r0, 39ce <k_is_in_isr+0x1a>
    39be:	4b04      	ldr	r3, [pc, #16]	; (39d0 <k_is_in_isr+0x1c>)
    39c0:	6858      	ldr	r0, [r3, #4]
    39c2:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    39c6:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    39ca:	4770      	bx	lr
    39cc:	2001      	movs	r0, #1
}

bool k_is_in_isr(void)
{
	return z_is_in_isr();
}
    39ce:	4770      	bx	lr
    39d0:	e000ed00 	.word	0xe000ed00

000039d4 <z_is_thread_essential>:
 *
 * Returns true if current thread is essential, false if it is not.
 */
bool z_is_thread_essential(void)
{
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
    39d4:	4b02      	ldr	r3, [pc, #8]	; (39e0 <z_is_thread_essential+0xc>)
    39d6:	689b      	ldr	r3, [r3, #8]
    39d8:	7b18      	ldrb	r0, [r3, #12]
}
    39da:	f000 0001 	and.w	r0, r0, #1
    39de:	4770      	bx	lr
    39e0:	20000264 	.word	0x20000264

000039e4 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    39e4:	b510      	push	{r4, lr}
    39e6:	4602      	mov	r2, r0
	__asm__ volatile(
    39e8:	f04f 0320 	mov.w	r3, #32
    39ec:	f3ef 8411 	mrs	r4, BASEPRI
    39f0:	f383 8811 	msr	BASEPRI, r3
    39f4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    39f8:	7b43      	ldrb	r3, [r0, #13]
    39fa:	0759      	lsls	r1, r3, #29
    39fc:	d404      	bmi.n	3a08 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
    39fe:	f384 8811 	msr	BASEPRI, r4
    3a02:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    3a06:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3a08:	f023 0304 	bic.w	r3, r3, #4
    3a0c:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
    3a0e:	f001 f9e9 	bl	4de4 <z_is_thread_ready>
    3a12:	b110      	cbz	r0, 3a1a <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    3a14:	4610      	mov	r0, r2
    3a16:	f7ff fd63 	bl	34e0 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    3a1a:	4621      	mov	r1, r4
    3a1c:	4802      	ldr	r0, [pc, #8]	; (3a28 <z_impl_k_thread_start+0x44>)
}
    3a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    3a22:	f001 b954 	b.w	4cce <z_reschedule>
    3a26:	bf00      	nop
    3a28:	20000937 	.word	0x20000937

00003a2c <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    3a2c:	b530      	push	{r4, r5, lr}
    3a2e:	b087      	sub	sp, #28
    3a30:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    3a32:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    3a34:	9504      	str	r5, [sp, #16]
    3a36:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    3a38:	9503      	str	r5, [sp, #12]
    3a3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    3a3c:	9502      	str	r5, [sp, #8]
    3a3e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3a40:	9501      	str	r5, [sp, #4]
    3a42:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    3a44:	9500      	str	r5, [sp, #0]
    3a46:	f7fe f91d 	bl	1c84 <z_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    3a4a:	4b04      	ldr	r3, [pc, #16]	; (3a5c <z_setup_new_thread+0x30>)
    3a4c:	689b      	ldr	r3, [r3, #8]
    3a4e:	b913      	cbnz	r3, 3a56 <z_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    3a50:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    3a52:	b007      	add	sp, #28
    3a54:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
    3a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    3a58:	e7fa      	b.n	3a50 <z_setup_new_thread+0x24>
    3a5a:	bf00      	nop
    3a5c:	20000264 	.word	0x20000264

00003a60 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    3a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    3a64:	4e28      	ldr	r6, [pc, #160]	; (3b08 <z_init_static_threads+0xa8>)
    3a66:	4d29      	ldr	r5, [pc, #164]	; (3b0c <z_init_static_threads+0xac>)
{
    3a68:	b087      	sub	sp, #28
    3a6a:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    3a6c:	42b5      	cmp	r5, r6
    3a6e:	f105 0430 	add.w	r4, r5, #48	; 0x30
    3a72:	d30f      	bcc.n	3a94 <z_init_static_threads+0x34>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    3a74:	f7ff fcd0 	bl	3418 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3a78:	4c24      	ldr	r4, [pc, #144]	; (3b0c <z_init_static_threads+0xac>)
	return (s32_t)ceiling_fraction(
    3a7a:	4e25      	ldr	r6, [pc, #148]	; (3b10 <z_init_static_threads+0xb0>)
    3a7c:	f8df a094 	ldr.w	sl, [pc, #148]	; 3b14 <z_init_static_threads+0xb4>
    3a80:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    3a84:	2700      	movs	r7, #0
    3a86:	4544      	cmp	r4, r8
    3a88:	d321      	bcc.n	3ace <z_init_static_threads+0x6e>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    3a8a:	b007      	add	sp, #28
    3a8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    3a90:	f7ff bd0a 	b.w	34a8 <k_sched_unlock>
		z_setup_new_thread(
    3a94:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3a98:	9305      	str	r3, [sp, #20]
    3a9a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3a9e:	9304      	str	r3, [sp, #16]
    3aa0:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3aa4:	9303      	str	r3, [sp, #12]
    3aa6:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3aaa:	9302      	str	r3, [sp, #8]
    3aac:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3ab0:	9301      	str	r3, [sp, #4]
    3ab2:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3ab6:	9300      	str	r3, [sp, #0]
    3ab8:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3abc:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    3ac0:	f7ff ffb4 	bl	3a2c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3ac4:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3ac8:	64dd      	str	r5, [r3, #76]	; 0x4c
    3aca:	4625      	mov	r5, r4
    3acc:	e7ce      	b.n	3a6c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    3ace:	6a61      	ldr	r1, [r4, #36]	; 0x24
    3ad0:	1c4b      	adds	r3, r1, #1
    3ad2:	d004      	beq.n	3ade <z_init_static_threads+0x7e>
			schedule_new_thread(thread_data->init_thread,
    3ad4:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    3ad6:	b921      	cbnz	r1, 3ae2 <z_init_static_threads+0x82>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
    3ad8:	4628      	mov	r0, r5
    3ada:	f7ff ff83 	bl	39e4 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    3ade:	3430      	adds	r4, #48	; 0x30
    3ae0:	e7d1      	b.n	3a86 <z_init_static_threads+0x26>
    3ae2:	46b3      	mov	fp, r6
    3ae4:	46bc      	mov	ip, r7
    3ae6:	fbc9 bc01 	smlal	fp, ip, r9, r1
    3aea:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    3aee:	2300      	movs	r3, #0
    3af0:	4658      	mov	r0, fp
    3af2:	4661      	mov	r1, ip
    3af4:	f7fc faf2 	bl	dc <__aeabi_ldivmod>
    3af8:	4651      	mov	r1, sl
    3afa:	1c42      	adds	r2, r0, #1
    3afc:	f105 0018 	add.w	r0, r5, #24
    3b00:	f000 f852 	bl	3ba8 <z_add_timeout>
    3b04:	e7eb      	b.n	3ade <z_init_static_threads+0x7e>
    3b06:	bf00      	nop
    3b08:	20001784 	.word	0x20001784
    3b0c:	20001784 	.word	0x20001784
    3b10:	0004ffff 	.word	0x0004ffff
    3b14:	00004d29 	.word	0x00004d29

00003b18 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    3b18:	4b03      	ldr	r3, [pc, #12]	; (3b28 <elapsed+0x10>)
    3b1a:	681b      	ldr	r3, [r3, #0]
    3b1c:	b90b      	cbnz	r3, 3b22 <elapsed+0xa>
    3b1e:	f7fd be9b 	b.w	1858 <z_clock_elapsed>
}
    3b22:	2000      	movs	r0, #0
    3b24:	4770      	bx	lr
    3b26:	bf00      	nop
    3b28:	200002a0 	.word	0x200002a0

00003b2c <remove_timeout>:
{
    3b2c:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3b2e:	b140      	cbz	r0, 3b42 <remove_timeout+0x16>
    3b30:	4a08      	ldr	r2, [pc, #32]	; (3b54 <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
    3b32:	6852      	ldr	r2, [r2, #4]
    3b34:	4290      	cmp	r0, r2
    3b36:	d004      	beq.n	3b42 <remove_timeout+0x16>
	if (next(t) != NULL) {
    3b38:	b11b      	cbz	r3, 3b42 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    3b3a:	689a      	ldr	r2, [r3, #8]
    3b3c:	6881      	ldr	r1, [r0, #8]
    3b3e:	440a      	add	r2, r1
    3b40:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    3b42:	6842      	ldr	r2, [r0, #4]
    3b44:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    3b46:	6803      	ldr	r3, [r0, #0]
    3b48:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3b4a:	2300      	movs	r3, #0
	node->prev = NULL;
    3b4c:	e9c0 3300 	strd	r3, r3, [r0]
}
    3b50:	4770      	bx	lr
    3b52:	bf00      	nop
    3b54:	200016e0 	.word	0x200016e0

00003b58 <next_timeout>:

static s32_t next_timeout(void)
{
    3b58:	b538      	push	{r3, r4, r5, lr}
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
    3b5a:	4b10      	ldr	r3, [pc, #64]	; (3b9c <next_timeout+0x44>)
    3b5c:	781b      	ldrb	r3, [r3, #0]
    3b5e:	2b00      	cmp	r3, #0
	return list->head == list;
    3b60:	4b0f      	ldr	r3, [pc, #60]	; (3ba0 <next_timeout+0x48>)
    3b62:	681c      	ldr	r4, [r3, #0]
    3b64:	bf14      	ite	ne
    3b66:	f04f 30ff 	movne.w	r0, #4294967295
    3b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3b6e:	429c      	cmp	r4, r3
    3b70:	d00a      	beq.n	3b88 <next_timeout+0x30>
	struct _timeout *to = first();
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
    3b72:	b14c      	cbz	r4, 3b88 <next_timeout+0x30>
    3b74:	68a5      	ldr	r5, [r4, #8]
    3b76:	f7ff ffcf 	bl	3b18 <elapsed>
    3b7a:	1a28      	subs	r0, r5, r0
    3b7c:	2800      	cmp	r0, #0
    3b7e:	db0a      	blt.n	3b96 <next_timeout+0x3e>
    3b80:	68a4      	ldr	r4, [r4, #8]
    3b82:	f7ff ffc9 	bl	3b18 <elapsed>
    3b86:	1a20      	subs	r0, r4, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    3b88:	4b06      	ldr	r3, [pc, #24]	; (3ba4 <next_timeout+0x4c>)
    3b8a:	691b      	ldr	r3, [r3, #16]
    3b8c:	b113      	cbz	r3, 3b94 <next_timeout+0x3c>
    3b8e:	4298      	cmp	r0, r3
    3b90:	bfa8      	it	ge
    3b92:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    3b94:	bd38      	pop	{r3, r4, r5, pc}
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
    3b96:	2000      	movs	r0, #0
    3b98:	e7f6      	b.n	3b88 <next_timeout+0x30>
    3b9a:	bf00      	nop
    3b9c:	20000937 	.word	0x20000937
    3ba0:	200016e0 	.word	0x200016e0
    3ba4:	20000264 	.word	0x20000264

00003ba8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    3ba8:	b570      	push	{r4, r5, r6, lr}
    3baa:	4604      	mov	r4, r0
    3bac:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    3bae:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    3bb0:	f04f 0320 	mov.w	r3, #32
    3bb4:	f3ef 8511 	mrs	r5, BASEPRI
    3bb8:	f383 8811 	msr	BASEPRI, r3
    3bbc:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    3bc0:	f7ff ffaa 	bl	3b18 <elapsed>
	return list->head == list;
    3bc4:	4b19      	ldr	r3, [pc, #100]	; (3c2c <z_add_timeout+0x84>)
    3bc6:	681a      	ldr	r2, [r3, #0]
    3bc8:	2e01      	cmp	r6, #1
    3bca:	bfac      	ite	ge
    3bcc:	1980      	addge	r0, r0, r6
    3bce:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3bd0:	429a      	cmp	r2, r3
    3bd2:	60a0      	str	r0, [r4, #8]
    3bd4:	d001      	beq.n	3bda <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3bd6:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    3bd8:	b932      	cbnz	r2, 3be8 <z_add_timeout+0x40>
	node->prev = list->tail;
    3bda:	685a      	ldr	r2, [r3, #4]
    3bdc:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    3bde:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    3be0:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
    3be2:	6014      	str	r4, [r2, #0]
	list->tail = node;
    3be4:	605c      	str	r4, [r3, #4]
    3be6:	e00b      	b.n	3c00 <z_add_timeout+0x58>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    3be8:	6890      	ldr	r0, [r2, #8]
    3bea:	68a1      	ldr	r1, [r4, #8]
    3bec:	4288      	cmp	r0, r1
    3bee:	dd16      	ble.n	3c1e <z_add_timeout+0x76>
				t->dticks -= to->dticks;
    3bf0:	1a41      	subs	r1, r0, r1
    3bf2:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    3bf4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    3bf6:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    3bfa:	6851      	ldr	r1, [r2, #4]
    3bfc:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    3bfe:	6054      	str	r4, [r2, #4]
	return list->head == list;
    3c00:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3c02:	429a      	cmp	r2, r3
    3c04:	d006      	beq.n	3c14 <z_add_timeout+0x6c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    3c06:	4294      	cmp	r4, r2
    3c08:	d104      	bne.n	3c14 <z_add_timeout+0x6c>
			z_clock_set_timeout(next_timeout(), false);
    3c0a:	f7ff ffa5 	bl	3b58 <next_timeout>
    3c0e:	2100      	movs	r1, #0
    3c10:	f7fd fde8 	bl	17e4 <z_clock_set_timeout>
	__asm__ volatile(
    3c14:	f385 8811 	msr	BASEPRI, r5
    3c18:	f3bf 8f6f 	isb	sy
		}
	}
}
    3c1c:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    3c1e:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    3c20:	4296      	cmp	r6, r2
    3c22:	60a1      	str	r1, [r4, #8]
    3c24:	d0d9      	beq.n	3bda <z_add_timeout+0x32>
    3c26:	6812      	ldr	r2, [r2, #0]
    3c28:	e7d6      	b.n	3bd8 <z_add_timeout+0x30>
    3c2a:	bf00      	nop
    3c2c:	200016e0 	.word	0x200016e0

00003c30 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    3c30:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    3c34:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    3c36:	f7ff fccb 	bl	35d0 <z_time_slice>
	__asm__ volatile(
    3c3a:	f04f 0320 	mov.w	r3, #32
    3c3e:	f3ef 8511 	mrs	r5, BASEPRI
    3c42:	f383 8811 	msr	BASEPRI, r3
    3c46:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    3c4a:	4e21      	ldr	r6, [pc, #132]	; (3cd0 <z_clock_announce+0xa0>)
    3c4c:	4f21      	ldr	r7, [pc, #132]	; (3cd4 <z_clock_announce+0xa4>)
	return list->head == list;
    3c4e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3cd8 <z_clock_announce+0xa8>
    3c52:	6034      	str	r4, [r6, #0]
    3c54:	46b8      	mov	r8, r7
    3c56:	f8d9 4000 	ldr.w	r4, [r9]
    3c5a:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3c5c:	454c      	cmp	r4, r9
    3c5e:	e9d7 bc00 	ldrd	fp, ip, [r7]
    3c62:	d005      	beq.n	3c70 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    3c64:	b124      	cbz	r4, 3c70 <z_clock_announce+0x40>
    3c66:	68a3      	ldr	r3, [r4, #8]
    3c68:	4293      	cmp	r3, r2
    3c6a:	dd14      	ble.n	3c96 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    3c6c:	1a9b      	subs	r3, r3, r2
    3c6e:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
    3c70:	eb1b 0002 	adds.w	r0, fp, r2
    3c74:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
    3c78:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    3c7a:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    3c7e:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    3c80:	f7ff ff6a 	bl	3b58 <next_timeout>
    3c84:	4621      	mov	r1, r4
    3c86:	f7fd fdad 	bl	17e4 <z_clock_set_timeout>
	__asm__ volatile(
    3c8a:	f385 8811 	msr	BASEPRI, r5
    3c8e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    3c92:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    3c96:	eb1b 0003 	adds.w	r0, fp, r3
    3c9a:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    3c9e:	1ad3      	subs	r3, r2, r3
    3ca0:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    3ca2:	2300      	movs	r3, #0
		curr_tick += dt;
    3ca4:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    3ca8:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    3caa:	4620      	mov	r0, r4
    3cac:	f7ff ff3e 	bl	3b2c <remove_timeout>
    3cb0:	f385 8811 	msr	BASEPRI, r5
    3cb4:	f3bf 8f6f 	isb	sy
		t->fn(t);
    3cb8:	68e3      	ldr	r3, [r4, #12]
    3cba:	4798      	blx	r3
	__asm__ volatile(
    3cbc:	f04f 0320 	mov.w	r3, #32
    3cc0:	f3ef 8511 	mrs	r5, BASEPRI
    3cc4:	f383 8811 	msr	BASEPRI, r3
    3cc8:	f3bf 8f6f 	isb	sy
    3ccc:	e7c3      	b.n	3c56 <z_clock_announce+0x26>
    3cce:	bf00      	nop
    3cd0:	200002a0 	.word	0x200002a0
    3cd4:	20000000 	.word	0x20000000
    3cd8:	200016e0 	.word	0x200016e0

00003cdc <z_tick_get>:
{
	can_wait_forever = 1;
}

s64_t z_tick_get(void)
{
    3cdc:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
    3ce0:	f04f 0320 	mov.w	r3, #32
    3ce4:	f3ef 8411 	mrs	r4, BASEPRI
    3ce8:	f383 8811 	msr	BASEPRI, r3
    3cec:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    3cf0:	f7fd fdb2 	bl	1858 <z_clock_elapsed>
    3cf4:	4b07      	ldr	r3, [pc, #28]	; (3d14 <z_tick_get+0x38>)
    3cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
    3cfa:	eb12 0b00 	adds.w	fp, r2, r0
    3cfe:	f143 0c00 	adc.w	ip, r3, #0
    3d02:	4658      	mov	r0, fp
    3d04:	4661      	mov	r1, ip
	__asm__ volatile(
    3d06:	f384 8811 	msr	BASEPRI, r4
    3d0a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    3d0e:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
    3d12:	bf00      	nop
    3d14:	20000000 	.word	0x20000000

00003d18 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    3d18:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    3d1a:	4c07      	ldr	r4, [pc, #28]	; (3d38 <init_static_pools+0x20>)
    3d1c:	4d07      	ldr	r5, [pc, #28]	; (3d3c <init_static_pools+0x24>)
    3d1e:	42ac      	cmp	r4, r5
    3d20:	d301      	bcc.n	3d26 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    3d22:	2000      	movs	r0, #0
    3d24:	bd38      	pop	{r3, r4, r5, pc}
    3d26:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    3d2a:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
    3d2c:	e9c4 3305 	strd	r3, r3, [r4, #20]
    3d30:	f000 fa58 	bl	41e4 <z_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    3d34:	341c      	adds	r4, #28
    3d36:	e7f2      	b.n	3d1e <init_static_pools+0x6>
    3d38:	20001784 	.word	0x20001784
    3d3c:	20001784 	.word	0x20001784

00003d40 <main>:
extern int dw_main(void);

int main(void)
{
    3d40:	b508      	push	{r3, lr}
  dw_main();
    3d42:	f7fc fb9b 	bl	47c <dw_main>
    3d46:	e7fe      	b.n	3d46 <main+0x6>

00003d48 <dwt_writetodevice>:
{
    3d48:	b507      	push	{r0, r1, r2, lr}
    3d4a:	b2c0      	uxtb	r0, r0
    if (index == 0) // For index of 0, no sub-index is required
    3d4c:	b951      	cbnz	r1, 3d64 <dwt_writetodevice+0x1c>
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
    3d4e:	f060 007f 	orn	r0, r0, #127	; 0x7f
    3d52:	f88d 0004 	strb.w	r0, [sp, #4]
    3d56:	2001      	movs	r0, #1
    writetospi(cnt,header,length,buffer);
    3d58:	a901      	add	r1, sp, #4
    3d5a:	f7fc fec9 	bl	af0 <writetospi>
} // end dwt_writetodevice()
    3d5e:	b003      	add	sp, #12
    3d60:	f85d fb04 	ldr.w	pc, [sp], #4
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
    3d64:	f060 003f 	orn	r0, r0, #63	; 0x3f
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
    3d68:	297f      	cmp	r1, #127	; 0x7f
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
    3d6a:	f88d 0004 	strb.w	r0, [sp, #4]
    3d6e:	b2c8      	uxtb	r0, r1
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
    3d70:	bf85      	ittet	hi
    3d72:	f060 007f 	ornhi	r0, r0, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
    3d76:	09c9      	lsrhi	r1, r1, #7
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
    3d78:	f88d 0005 	strbls.w	r0, [sp, #5]
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
    3d7c:	f88d 0005 	strbhi.w	r0, [sp, #5]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
    3d80:	bf92      	itee	ls
    3d82:	2002      	movls	r0, #2
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
    3d84:	f88d 1006 	strbhi.w	r1, [sp, #6]
    3d88:	2003      	movhi	r0, #3
    3d8a:	e7e5      	b.n	3d58 <dwt_writetodevice+0x10>

00003d8c <dwt_readfromdevice>:
{
    3d8c:	b507      	push	{r0, r1, r2, lr}
    3d8e:	b2c0      	uxtb	r0, r0
    if (index == 0) // For index of 0, no sub-index is required
    3d90:	b941      	cbnz	r1, 3da4 <dwt_readfromdevice+0x18>
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
    3d92:	f88d 0004 	strb.w	r0, [sp, #4]
    3d96:	2001      	movs	r0, #1
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
    3d98:	a901      	add	r1, sp, #4
    3d9a:	f7fc fedd 	bl	b58 <readfromspi>
} // end dwt_readfromdevice()
    3d9e:	b003      	add	sp, #12
    3da0:	f85d fb04 	ldr.w	pc, [sp], #4
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
    3da4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
    3da8:	297f      	cmp	r1, #127	; 0x7f
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
    3daa:	f88d 0004 	strb.w	r0, [sp, #4]
    3dae:	b2c8      	uxtb	r0, r1
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
    3db0:	bf85      	ittet	hi
    3db2:	f060 007f 	ornhi	r0, r0, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
    3db6:	09c9      	lsrhi	r1, r1, #7
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
    3db8:	f88d 0005 	strbls.w	r0, [sp, #5]
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
    3dbc:	f88d 0005 	strbhi.w	r0, [sp, #5]
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
    3dc0:	bf92      	itee	ls
    3dc2:	2002      	movls	r0, #2
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
    3dc4:	f88d 1006 	strbhi.w	r1, [sp, #6]
    3dc8:	2003      	movhi	r0, #3
    3dca:	e7e5      	b.n	3d98 <dwt_readfromdevice+0xc>

00003dcc <dwt_readrxdata>:
{
    3dcc:	b410      	push	{r4}
    3dce:	4614      	mov	r4, r2
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
    3dd0:	4603      	mov	r3, r0
    3dd2:	460a      	mov	r2, r1
    3dd4:	2011      	movs	r0, #17
    3dd6:	4621      	mov	r1, r4
}
    3dd8:	bc10      	pop	{r4}
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
    3dda:	f7ff bfd7 	b.w	3d8c <dwt_readfromdevice>

00003dde <dwt_read32bitoffsetreg>:
{
    3dde:	b513      	push	{r0, r1, r4, lr}
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
    3de0:	ac01      	add	r4, sp, #4
    3de2:	4623      	mov	r3, r4
    3de4:	b280      	uxth	r0, r0
    3de6:	2204      	movs	r2, #4
    3de8:	b289      	uxth	r1, r1
    3dea:	f7ff ffcf 	bl	3d8c <dwt_readfromdevice>
    for (j = 3 ; j >= 0 ; j --)
    3dee:	2303      	movs	r3, #3
    uint32  regval = 0 ;
    3df0:	2000      	movs	r0, #0
        regval = (regval << 8) + buffer[j] ;
    3df2:	5ce2      	ldrb	r2, [r4, r3]
    for (j = 3 ; j >= 0 ; j --)
    3df4:	f113 33ff 	adds.w	r3, r3, #4294967295
        regval = (regval << 8) + buffer[j] ;
    3df8:	eb02 2000 	add.w	r0, r2, r0, lsl #8
    for (j = 3 ; j >= 0 ; j --)
    3dfc:	d2f9      	bcs.n	3df2 <dwt_read32bitoffsetreg+0x14>
} // end dwt_read32bitoffsetreg()
    3dfe:	b002      	add	sp, #8
    3e00:	bd10      	pop	{r4, pc}

00003e02 <dwt_readdevid>:
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
    3e02:	2100      	movs	r1, #0
    3e04:	4608      	mov	r0, r1
    3e06:	f7ff bfea 	b.w	3dde <dwt_read32bitoffsetreg>

00003e0a <dwt_read16bitoffsetreg>:
{
    3e0a:	b507      	push	{r0, r1, r2, lr}
    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
    3e0c:	2202      	movs	r2, #2
    3e0e:	ab01      	add	r3, sp, #4
    3e10:	b289      	uxth	r1, r1
    3e12:	b280      	uxth	r0, r0
    3e14:	f7ff ffba 	bl	3d8c <dwt_readfromdevice>
    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
    3e18:	f89d 3005 	ldrb.w	r3, [sp, #5]
    3e1c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    3e20:	eb00 2003 	add.w	r0, r0, r3, lsl #8
} // end dwt_read16bitoffsetreg()
    3e24:	b280      	uxth	r0, r0
    3e26:	b003      	add	sp, #12
    3e28:	f85d fb04 	ldr.w	pc, [sp], #4

00003e2c <dwt_read8bitoffsetreg>:
{
    3e2c:	b507      	push	{r0, r1, r2, lr}
    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
    3e2e:	2201      	movs	r2, #1
    3e30:	f10d 0307 	add.w	r3, sp, #7
    3e34:	b289      	uxth	r1, r1
    3e36:	b280      	uxth	r0, r0
    3e38:	f7ff ffa8 	bl	3d8c <dwt_readfromdevice>
}
    3e3c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3e40:	b003      	add	sp, #12
    3e42:	f85d fb04 	ldr.w	pc, [sp], #4

00003e46 <dwt_write8bitoffsetreg>:
{
    3e46:	b507      	push	{r0, r1, r2, lr}
    3e48:	ab02      	add	r3, sp, #8
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
    3e4a:	b289      	uxth	r1, r1
{
    3e4c:	f803 2d01 	strb.w	r2, [r3, #-1]!
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
    3e50:	b280      	uxth	r0, r0
    3e52:	2201      	movs	r2, #1
    3e54:	f7ff ff78 	bl	3d48 <dwt_writetodevice>
}
    3e58:	b003      	add	sp, #12
    3e5a:	f85d fb04 	ldr.w	pc, [sp], #4

00003e5e <dwt_write16bitoffsetreg>:
{
    3e5e:	b507      	push	{r0, r1, r2, lr}
    buffer[0] = regval & 0xFF;
    3e60:	f88d 2004 	strb.w	r2, [sp, #4]
    buffer[1] = regval >> 8 ;
    3e64:	0a12      	lsrs	r2, r2, #8
    3e66:	f88d 2005 	strb.w	r2, [sp, #5]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
    3e6a:	ab01      	add	r3, sp, #4
    3e6c:	2202      	movs	r2, #2
    3e6e:	b289      	uxth	r1, r1
    3e70:	b280      	uxth	r0, r0
    3e72:	f7ff ff69 	bl	3d48 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
    3e76:	b003      	add	sp, #12
    3e78:	f85d fb04 	ldr.w	pc, [sp], #4

00003e7c <dwt_write32bitoffsetreg>:
{
    3e7c:	b507      	push	{r0, r1, r2, lr}
        regval >>= 8 ;
    3e7e:	0a13      	lsrs	r3, r2, #8
        buffer[j] = regval & 0xff ;
    3e80:	f88d 2004 	strb.w	r2, [sp, #4]
    3e84:	f88d 3005 	strb.w	r3, [sp, #5]
        regval >>= 8 ;
    3e88:	0c13      	lsrs	r3, r2, #16
    3e8a:	0e12      	lsrs	r2, r2, #24
        buffer[j] = regval & 0xff ;
    3e8c:	f88d 3006 	strb.w	r3, [sp, #6]
    3e90:	f88d 2007 	strb.w	r2, [sp, #7]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
    3e94:	ab01      	add	r3, sp, #4
    3e96:	2204      	movs	r2, #4
    3e98:	b289      	uxth	r1, r1
    3e9a:	b280      	uxth	r0, r0
    3e9c:	f7ff ff54 	bl	3d48 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
    3ea0:	b003      	add	sp, #12
    3ea2:	f85d fb04 	ldr.w	pc, [sp], #4

00003ea6 <_dwt_otpread>:
{
    3ea6:	b508      	push	{r3, lr}
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
    3ea8:	4602      	mov	r2, r0
    3eaa:	2104      	movs	r1, #4
    3eac:	202d      	movs	r0, #45	; 0x2d
    3eae:	f7ff ffd6 	bl	3e5e <dwt_write16bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
    3eb2:	2203      	movs	r2, #3
    3eb4:	2106      	movs	r1, #6
    3eb6:	202d      	movs	r0, #45	; 0x2d
    3eb8:	f7ff ffc5 	bl	3e46 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
    3ebc:	2106      	movs	r1, #6
    3ebe:	202d      	movs	r0, #45	; 0x2d
    3ec0:	2200      	movs	r2, #0
    3ec2:	f7ff ffc0 	bl	3e46 <dwt_write8bitoffsetreg>
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
    3ec6:	210a      	movs	r1, #10
    3ec8:	202d      	movs	r0, #45	; 0x2d
}
    3eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
    3ece:	f7ff bf86 	b.w	3dde <dwt_read32bitoffsetreg>

00003ed2 <_dwt_aonarrayupload>:
{
    3ed2:	b508      	push	{r3, lr}
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
    3ed4:	2200      	movs	r2, #0
    3ed6:	2102      	movs	r1, #2
    3ed8:	202c      	movs	r0, #44	; 0x2c
    3eda:	f7ff ffb4 	bl	3e46 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
    3ede:	2202      	movs	r2, #2
    3ee0:	4611      	mov	r1, r2
    3ee2:	202c      	movs	r0, #44	; 0x2c
}
    3ee4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
    3ee8:	f7ff bfad 	b.w	3e46 <dwt_write8bitoffsetreg>

00003eec <_dwt_configlde>:
{
    3eec:	b510      	push	{r4, lr}
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
    3eee:	226d      	movs	r2, #109	; 0x6d
{
    3ef0:	4604      	mov	r4, r0
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
    3ef2:	f640 0106 	movw	r1, #2054	; 0x806
    3ef6:	202e      	movs	r0, #46	; 0x2e
    3ef8:	f7ff ffa5 	bl	3e46 <dwt_write8bitoffsetreg>
    if(prfIndex)
    3efc:	b144      	cbz	r4, 3f10 <_dwt_configlde+0x24>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
    3efe:	f240 6207 	movw	r2, #1543	; 0x607
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    3f02:	f641 0106 	movw	r1, #6150	; 0x1806
    3f06:	202e      	movs	r0, #46	; 0x2e
}
    3f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    3f0c:	f7ff bfa7 	b.w	3e5e <dwt_write16bitoffsetreg>
    3f10:	f241 6207 	movw	r2, #5639	; 0x1607
    3f14:	e7f5      	b.n	3f02 <_dwt_configlde+0x16>

00003f16 <_dwt_enableclocks>:
{
    3f16:	b513      	push	{r0, r1, r4, lr}
    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
    3f18:	2202      	movs	r2, #2
{
    3f1a:	4604      	mov	r4, r0
    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
    3f1c:	ab01      	add	r3, sp, #4
    3f1e:	2100      	movs	r1, #0
    3f20:	2036      	movs	r0, #54	; 0x36
    3f22:	f7ff ff33 	bl	3d8c <dwt_readfromdevice>
    switch(clocks)
    3f26:	2c0e      	cmp	r4, #14
    3f28:	d812      	bhi.n	3f50 <_dwt_enableclocks+0x3a>
    3f2a:	e8df f004 	tbb	[pc, r4]
    3f2e:	0820      	.short	0x0820
    3f30:	11111129 	.word	0x11111129
    3f34:	113d3011 	.word	0x113d3011
    3f38:	524d4811 	.word	0x524d4811
    3f3c:	59          	.byte	0x59
    3f3d:	00          	.byte	0x00
            reg[0] = 0x00 ;
    3f3e:	2300      	movs	r3, #0
    3f40:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = reg[1] & 0xfe;
    3f44:	f89d 3005 	ldrb.w	r3, [sp, #5]
    3f48:	f023 0301 	bic.w	r3, r3, #1
            reg[1] = 0x80 | reg[1];
    3f4c:	f88d 3005 	strb.w	r3, [sp, #5]
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
    3f50:	ab01      	add	r3, sp, #4
    3f52:	2201      	movs	r2, #1
    3f54:	2100      	movs	r1, #0
    3f56:	2036      	movs	r0, #54	; 0x36
    3f58:	f7ff fef6 	bl	3d48 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
    3f5c:	2201      	movs	r2, #1
    3f5e:	f10d 0305 	add.w	r3, sp, #5
    3f62:	4611      	mov	r1, r2
    3f64:	2036      	movs	r0, #54	; 0x36
    3f66:	f7ff feef 	bl	3d48 <dwt_writetodevice>
} // end _dwt_enableclocks()
    3f6a:	b002      	add	sp, #8
    3f6c:	bd10      	pop	{r4, pc}
            reg[0] = 0x01 | (reg[0] & 0xfc);
    3f6e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3f72:	f023 0303 	bic.w	r3, r3, #3
    3f76:	f043 0301 	orr.w	r3, r3, #1
            reg[0] = 0x20 | (reg[0] & 0xcf);
    3f7a:	f88d 3004 	strb.w	r3, [sp, #4]
        break;
    3f7e:	e7e7      	b.n	3f50 <_dwt_enableclocks+0x3a>
            reg[0] = 0x02 | (reg[0] & 0xfc);
    3f80:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3f84:	f023 0303 	bic.w	r3, r3, #3
    3f88:	f043 0302 	orr.w	r3, r3, #2
    3f8c:	e7f5      	b.n	3f7a <_dwt_enableclocks+0x64>
            reg[0] = 0x48 | (reg[0] & 0xb3);
    3f8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3f92:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
    3f96:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    3f9a:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x80 | reg[1];
    3f9e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    3fa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3fa6:	e7d1      	b.n	3f4c <_dwt_enableclocks+0x36>
            reg[0] = reg[0] & 0xb3;
    3fa8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3fac:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
    3fb0:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x7f & reg[1];
    3fb4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    3fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3fbc:	e7c6      	b.n	3f4c <_dwt_enableclocks+0x36>
            reg[1] = 0x02 | reg[1];
    3fbe:	f89d 3005 	ldrb.w	r3, [sp, #5]
    3fc2:	f043 0302 	orr.w	r3, r3, #2
    3fc6:	e7c1      	b.n	3f4c <_dwt_enableclocks+0x36>
            reg[1] = reg[1] & 0xfd;
    3fc8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    3fcc:	f023 0302 	bic.w	r3, r3, #2
    3fd0:	e7bc      	b.n	3f4c <_dwt_enableclocks+0x36>
            reg[0] = 0x20 | (reg[0] & 0xcf);
    3fd2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3fd6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3fda:	f043 0320 	orr.w	r3, r3, #32
    3fde:	e7cc      	b.n	3f7a <_dwt_enableclocks+0x64>
            reg[0] = 0x01;
    3fe0:	f240 3301 	movw	r3, #769	; 0x301
    3fe4:	f8ad 3004 	strh.w	r3, [sp, #4]
        break;
    3fe8:	e7b2      	b.n	3f50 <_dwt_enableclocks+0x3a>

00003fea <_dwt_loaducodefromrom>:
{
    3fea:	b508      	push	{r3, lr}
    _dwt_enableclocks(FORCE_LDE);
    3fec:	200e      	movs	r0, #14
    3fee:	f7ff ff92 	bl	3f16 <_dwt_enableclocks>
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
    3ff2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3ff6:	2106      	movs	r1, #6
    3ff8:	202d      	movs	r0, #45	; 0x2d
    3ffa:	f7ff ff30 	bl	3e5e <dwt_write16bitoffsetreg>
    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
    3ffe:	2001      	movs	r0, #1
    4000:	f000 f8cb 	bl	419a <deca_sleep>
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
    4004:	2001      	movs	r0, #1
}
    4006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
    400a:	f7ff bf84 	b.w	3f16 <_dwt_enableclocks>

0000400e <_dwt_disablesequencing>:
{
    400e:	b508      	push	{r3, lr}
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
    4010:	2000      	movs	r0, #0
    4012:	f7ff ff80 	bl	3f16 <_dwt_enableclocks>
    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
    4016:	2200      	movs	r2, #0
    4018:	2104      	movs	r1, #4
    401a:	2036      	movs	r0, #54	; 0x36
}
    401c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
    4020:	f7ff bf1d 	b.w	3e5e <dwt_write16bitoffsetreg>

00004024 <dwt_syncrxbufptrs>:
{
    4024:	b508      	push	{r3, lr}
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
    4026:	2103      	movs	r1, #3
    4028:	200f      	movs	r0, #15
    402a:	f7ff feff 	bl	3e2c <dwt_read8bitoffsetreg>
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
    402e:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
    4032:	0603      	lsls	r3, r0, #24
    4034:	d506      	bpl.n	4044 <dwt_syncrxbufptrs+0x20>
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
    4036:	2201      	movs	r2, #1
    4038:	2103      	movs	r1, #3
    403a:	200d      	movs	r0, #13
}
    403c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
    4040:	f7ff bf01 	b.w	3e46 <dwt_write8bitoffsetreg>
}
    4044:	bd08      	pop	{r3, pc}

00004046 <dwt_rxenable>:
    if ((mode & DWT_NO_SYNC_PTRS) == 0)
    4046:	0741      	lsls	r1, r0, #29
{
    4048:	b538      	push	{r3, r4, r5, lr}
    404a:	4604      	mov	r4, r0
    if ((mode & DWT_NO_SYNC_PTRS) == 0)
    404c:	d401      	bmi.n	4052 <dwt_rxenable+0xc>
        dwt_syncrxbufptrs();
    404e:	f7ff ffe9 	bl	4024 <dwt_syncrxbufptrs>
        temp |= (uint16)SYS_CTRL_RXDLYE ;
    4052:	f014 0501 	ands.w	r5, r4, #1
    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
    4056:	bf0c      	ite	eq
    4058:	f44f 7280 	moveq.w	r2, #256	; 0x100
    405c:	f44f 7240 	movne.w	r2, #768	; 0x300
    4060:	2100      	movs	r1, #0
    4062:	200d      	movs	r0, #13
    4064:	f7ff fefb 	bl	3e5e <dwt_write16bitoffsetreg>
    if (mode & DWT_START_RX_DELAYED) // check for errors
    4068:	b90d      	cbnz	r5, 406e <dwt_rxenable+0x28>
    return DWT_SUCCESS;
    406a:	2000      	movs	r0, #0
} // end dwt_rxenable()
    406c:	bd38      	pop	{r3, r4, r5, pc}
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
    406e:	2103      	movs	r1, #3
    4070:	200f      	movs	r0, #15
    4072:	f7ff fedb 	bl	3e2c <dwt_read8bitoffsetreg>
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
    4076:	0703      	lsls	r3, r0, #28
    4078:	d5f7      	bpl.n	406a <dwt_rxenable+0x24>
            dwt_forcetrxoff(); // turn the delayed receive off
    407a:	f7fc fb9d 	bl	7b8 <dwt_forcetrxoff>
            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
    407e:	f014 0102 	ands.w	r1, r4, #2
    4082:	d104      	bne.n	408e <dwt_rxenable+0x48>
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
    4084:	f44f 7280 	mov.w	r2, #256	; 0x100
    4088:	200d      	movs	r0, #13
    408a:	f7ff fee8 	bl	3e5e <dwt_write16bitoffsetreg>
            return DWT_ERROR; // return warning indication
    408e:	f04f 30ff 	mov.w	r0, #4294967295
    4092:	e7eb      	b.n	406c <dwt_rxenable+0x26>

00004094 <dwt_setxtaltrim>:
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
    4094:	f000 021f 	and.w	r2, r0, #31
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
    4098:	f042 0260 	orr.w	r2, r2, #96	; 0x60
    409c:	210e      	movs	r1, #14
    409e:	202b      	movs	r0, #43	; 0x2b
    40a0:	f7ff bed1 	b.w	3e46 <dwt_write8bitoffsetreg>

000040a4 <k_sleep>:
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    40a4:	f7ff bbea 	b.w	387c <z_impl_k_sleep>

000040a8 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(unsigned long usec)
{
    40a8:	b480      	push	{r7}
    40aa:	b085      	sub	sp, #20
    40ac:	af00      	add	r7, sp, #0
    40ae:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
    40b0:	2300      	movs	r3, #0
    40b2:	60fb      	str	r3, [r7, #12]
    40b4:	e010      	b.n	40d8 <usleep+0x30>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
    40b6:	2300      	movs	r3, #0
    40b8:	60bb      	str	r3, [r7, #8]
    40ba:	e002      	b.n	40c2 <usleep+0x1a>
    40bc:	68bb      	ldr	r3, [r7, #8]
    40be:	3301      	adds	r3, #1
    40c0:	60bb      	str	r3, [r7, #8]
    40c2:	68bb      	ldr	r3, [r7, #8]
    40c4:	2b01      	cmp	r3, #1
    40c6:	bfd4      	ite	le
    40c8:	2301      	movle	r3, #1
    40ca:	2300      	movgt	r3, #0
    40cc:	b2db      	uxtb	r3, r3
    40ce:	2b00      	cmp	r3, #0
    40d0:	d1f4      	bne.n	40bc <usleep+0x14>
    for(i=0;i<usec;i++)
    40d2:	68fb      	ldr	r3, [r7, #12]
    40d4:	3301      	adds	r3, #1
    40d6:	60fb      	str	r3, [r7, #12]
    40d8:	68fb      	ldr	r3, [r7, #12]
    40da:	687a      	ldr	r2, [r7, #4]
    40dc:	429a      	cmp	r2, r3
    40de:	bf8c      	ite	hi
    40e0:	2301      	movhi	r3, #1
    40e2:	2300      	movls	r3, #0
    40e4:	b2db      	uxtb	r3, r3
    40e6:	2b00      	cmp	r3, #0
    40e8:	d1e5      	bne.n	40b6 <usleep+0xe>
        {
            // __NOP();
            // __NOP();
        }
    }
    return 0;
    40ea:	2300      	movs	r3, #0
}
    40ec:	4618      	mov	r0, r3
    40ee:	3714      	adds	r7, #20
    40f0:	46bd      	mov	sp, r7
    40f2:	bc80      	pop	{r7}
    40f4:	4770      	bx	lr

000040f6 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
void
Sleep(uint32_t x)
{
    40f6:	b580      	push	{r7, lr}
    40f8:	b082      	sub	sp, #8
    40fa:	af00      	add	r7, sp, #0
    40fc:	6078      	str	r0, [r7, #4]
    k_sleep(x);
    40fe:	687b      	ldr	r3, [r7, #4]
    4100:	4618      	mov	r0, r3
    4102:	f7ff ffcf 	bl	40a4 <k_sleep>
}
    4106:	bf00      	nop
    4108:	3708      	adds	r7, #8
    410a:	46bd      	mov	sp, r7
    410c:	bd80      	pop	{r7, pc}

0000410e <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
    410e:	b580      	push	{r7, lr}
    4110:	af00      	add	r7, sp, #0
    //TODO:drive the RSTn pin low
 
    usleep(1);
    4112:	2001      	movs	r0, #1
    4114:	f7ff ffc8 	bl	40a8 <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
    4118:	2000      	movs	r0, #0
    411a:	f000 f805 	bl	4128 <setup_DW1000RSTnIRQ>

    Sleep(2);
    411e:	2002      	movs	r0, #2
    4120:	f7ff ffe9 	bl	40f6 <Sleep>
}
    4124:	bf00      	nop
    4126:	bd80      	pop	{r7, pc}

00004128 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
    4128:	b480      	push	{r7}
    412a:	b083      	sub	sp, #12
    412c:	af00      	add	r7, sp, #0
    412e:	6078      	str	r0, [r7, #4]
    //TODO
}
    4130:	bf00      	nop
    4132:	370c      	adds	r7, #12
    4134:	46bd      	mov	sp, r7
    4136:	bc80      	pop	{r7}
    4138:	4770      	bx	lr

0000413a <port_wakeup_dw1000>:

/* @fn      port_wakeup_dw1000
 * @brief   "slow" waking up of DW1000 using DW_CS only
 * */
void port_wakeup_dw1000(void)
{
    413a:	b480      	push	{r7}
    413c:	af00      	add	r7, sp, #0
    //TODO
}
    413e:	bf00      	nop
    4140:	46bd      	mov	sp, r7
    4142:	bc80      	pop	{r7}
    4144:	4770      	bx	lr

00004146 <port_set_dw1000_slowrate>:

/* @fn      port_set_dw1000_slowrate
 * @brief   set 2MHz
 * */
void port_set_dw1000_slowrate(void)
{
    4146:	b580      	push	{r7, lr}
    4148:	af00      	add	r7, sp, #0
    set_spi_speed_slow();
    414a:	f7fc fc8f 	bl	a6c <set_spi_speed_slow>
}
    414e:	bf00      	nop
    4150:	bd80      	pop	{r7, pc}

00004152 <port_set_dw1000_fastrate>:

/* @fn      port_set_dw1000_fastrate
 * @brief   set 8MHz
 * */
void port_set_dw1000_fastrate(void)
{
    4152:	b580      	push	{r7, lr}
    4154:	af00      	add	r7, sp, #0
    //TODO
    set_spi_speed_fast();
    4156:	f7fc fca9 	bl	aac <set_spi_speed_fast>
}
    415a:	bf00      	nop
    415c:	bd80      	pop	{r7, pc}

0000415e <port_DisableEXT_IRQ>:
    415e:	b580      	push	{r7, lr}
    4160:	af00      	add	r7, sp, #0
    4162:	f7ff ffea 	bl	413a <port_wakeup_dw1000>
    4166:	bd80      	pop	{r7, pc}

00004168 <port_EnableEXT_IRQ>:
    4168:	b580      	push	{r7, lr}
    416a:	af00      	add	r7, sp, #0
    416c:	f7ff ffe5 	bl	413a <port_wakeup_dw1000>
    4170:	bd80      	pop	{r7, pc}

00004172 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
uint32_t port_GetEXT_IRQStatus(void)
{
    4172:	b480      	push	{r7}
    4174:	af00      	add	r7, sp, #0
    //TODO
    return 0;
    4176:	2300      	movs	r3, #0
}
    4178:	4618      	mov	r0, r3
    417a:	46bd      	mov	sp, r7
    417c:	bc80      	pop	{r7}
    417e:	4770      	bx	lr

00004180 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
    4180:	b510      	push	{r4, lr}
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
    4182:	f7ff fff6 	bl	4172 <port_GetEXT_IRQStatus>

	if(s) {
    4186:	4604      	mov	r4, r0
    4188:	b108      	cbz	r0, 418e <decamutexon+0xe>
		port_DisableEXT_IRQ(); //disable the external interrupt line
    418a:	f7ff ffe8 	bl	415e <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
}
    418e:	4620      	mov	r0, r4
    4190:	bd10      	pop	{r4, pc}

00004192 <decamutexoff>:
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
    4192:	b108      	cbz	r0, 4198 <decamutexoff+0x6>
		port_EnableEXT_IRQ();
    4194:	f7ff bfe8 	b.w	4168 <port_EnableEXT_IRQ>
	}
}
    4198:	4770      	bx	lr

0000419a <deca_sleep>:
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
	Sleep(time_ms);
    419a:	f7ff bfac 	b.w	40f6 <Sleep>

0000419e <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
    419e:	b570      	push	{r4, r5, r6, lr}
    41a0:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
    41a2:	f990 000b 	ldrsb.w	r0, [r0, #11]
    41a6:	250c      	movs	r5, #12
    41a8:	434d      	muls	r5, r1
		&p->levels[level].bits : p->levels[level].bits_p;
    41aa:	4288      	cmp	r0, r1
    41ac:	eb06 0405 	add.w	r4, r6, r5
    41b0:	bfb4      	ite	lt
    41b2:	5971      	ldrlt	r1, [r6, r5]
    41b4:	4621      	movge	r1, r4

	*word = &bitarray[bn / 32];
    41b6:	2420      	movs	r4, #32
    41b8:	fb92 f4f4 	sdiv	r4, r2, r4
    41bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    41c0:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
    41c2:	f002 001f 	and.w	r0, r2, #31
    41c6:	bd70      	pop	{r4, r5, r6, pc}

000041c8 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
    41c8:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
    41ca:	ab01      	add	r3, sp, #4
    41cc:	f7ff ffe7 	bl	419e <get_bit_ptr>

	*word |= (1<<bit);
    41d0:	9a01      	ldr	r2, [sp, #4]
    41d2:	2301      	movs	r3, #1
    41d4:	fa03 f000 	lsl.w	r0, r3, r0
    41d8:	6813      	ldr	r3, [r2, #0]
    41da:	4303      	orrs	r3, r0
    41dc:	6013      	str	r3, [r2, #0]
}
    41de:	b003      	add	sp, #12
    41e0:	f85d fb04 	ldr.w	pc, [sp], #4

000041e4 <z_sys_mem_pool_base_init>:
{
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
}

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
    41e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    41e8:	4604      	mov	r4, r0
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    41ea:	6843      	ldr	r3, [r0, #4]
    41ec:	8905      	ldrh	r5, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    41ee:	6800      	ldr	r0, [r0, #0]

	p->max_inline_level = -1;

	for (i = 0; i < p->n_levels; i++) {
    41f0:	f894 c00a 	ldrb.w	ip, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    41f4:	435d      	muls	r5, r3
	p->max_inline_level = -1;
    41f6:	22ff      	movs	r2, #255	; 0xff
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    41f8:	4428      	add	r0, r5
	p->max_inline_level = -1;
    41fa:	72e2      	strb	r2, [r4, #11]
	for (i = 0; i < p->n_levels; i++) {
    41fc:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
    41fe:	f04f 0e0c 	mov.w	lr, #12
	for (i = 0; i < p->n_levels; i++) {
    4202:	458c      	cmp	ip, r1
    4204:	dc05      	bgt.n	4212 <z_sys_mem_pool_base_init+0x2e>
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
    4206:	2500      	movs	r5, #0
    4208:	8923      	ldrh	r3, [r4, #8]
    420a:	42ab      	cmp	r3, r5
    420c:	dc22      	bgt.n	4254 <z_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
    420e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sys_dlist_init(&p->levels[i].free_list);
    4212:	f8d4 800c 	ldr.w	r8, [r4, #12]
		int nblocks = buflen / sz;
    4216:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
    421a:	fb0e f701 	mul.w	r7, lr, r1
		if (nblocks < 32) {
    421e:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
    4220:	eb08 0607 	add.w	r6, r8, r7
			bits += (nblocks + 31)/32;
    4224:	bfc8      	it	gt
    4226:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
    4228:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
    422c:	f106 0904 	add.w	r9, r6, #4
			bits += (nblocks + 31)/32;
    4230:	bfc8      	it	gt
    4232:	0952      	lsrgt	r2, r2, #5
		sz = _ALIGN4(sz / 4);
    4234:	f103 0303 	add.w	r3, r3, #3
    4238:	e9c6 9901 	strd	r9, r9, [r6, #4]
    423c:	f023 0303 	bic.w	r3, r3, #3
			p->max_inline_level = i;
    4240:	bfd4      	ite	le
    4242:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
    4244:	f848 0007 	strgt.w	r0, [r8, r7]
	for (i = 0; i < p->n_levels; i++) {
    4248:	f101 0101 	add.w	r1, r1, #1
			bits += (nblocks + 31)/32;
    424c:	bfc8      	it	gt
    424e:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
    4252:	e7d6      	b.n	4202 <z_sys_mem_pool_base_init+0x1e>
	return (u8_t *)p->buf + lsz * block;
    4254:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
    4256:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
    4258:	6820      	ldr	r0, [r4, #0]
    425a:	436a      	muls	r2, r5
    425c:	1881      	adds	r1, r0, r2
		sys_dlist_append(&p->levels[0].free_list, block);
    425e:	1d1e      	adds	r6, r3, #4
	node->next = list;
    4260:	5086      	str	r6, [r0, r2]
	node->prev = list->tail;
    4262:	689a      	ldr	r2, [r3, #8]
    4264:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
    4266:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
    4268:	4620      	mov	r0, r4
    426a:	6011      	str	r1, [r2, #0]
	list->tail = node;
    426c:	6099      	str	r1, [r3, #8]
    426e:	462a      	mov	r2, r5
    4270:	2100      	movs	r1, #0
    4272:	f7ff ffa9 	bl	41c8 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
    4276:	3501      	adds	r5, #1
    4278:	e7c6      	b.n	4208 <z_sys_mem_pool_base_init+0x24>

0000427a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    427a:	b508      	push	{r3, lr}
    427c:	4604      	mov	r4, r0
    427e:	4608      	mov	r0, r1
    4280:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    4282:	461a      	mov	r2, r3
    4284:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    4286:	f7ff fb45 	bl	3914 <z_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    428a:	f7fd fda3 	bl	1dd4 <z_impl_k_thread_abort>

0000428e <z_arch_printk_char_out>:
}
    428e:	2000      	movs	r0, #0
    4290:	4770      	bx	lr

00004292 <print_err>:
{
    4292:	b570      	push	{r4, r5, r6, lr}
    4294:	4604      	mov	r4, r0
    4296:	460d      	mov	r5, r1
	out('E', ctx);
    4298:	2045      	movs	r0, #69	; 0x45
    429a:	47a0      	blx	r4
	out('R', ctx);
    429c:	4629      	mov	r1, r5
    429e:	2052      	movs	r0, #82	; 0x52
    42a0:	47a0      	blx	r4
	out('R', ctx);
    42a2:	4629      	mov	r1, r5
    42a4:	4623      	mov	r3, r4
    42a6:	2052      	movs	r0, #82	; 0x52
}
    42a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    42ac:	4718      	bx	r3

000042ae <_vprintk>:
{
    42ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42b2:	b089      	sub	sp, #36	; 0x24
    42b4:	461c      	mov	r4, r3
	int long_ctr = 0;
    42b6:	f04f 0a00 	mov.w	sl, #0
    42ba:	1e53      	subs	r3, r2, #1
{
    42bc:	4606      	mov	r6, r0
    42be:	460f      	mov	r7, r1
    42c0:	9303      	str	r3, [sp, #12]
	int min_width = -1;
    42c2:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
    42c6:	46d0      	mov	r8, sl
			might_format = 0;
    42c8:	2500      	movs	r5, #0
						break;
    42ca:	e005      	b.n	42d8 <_vprintk+0x2a>
		if (!might_format) {
    42cc:	b96d      	cbnz	r5, 42ea <_vprintk+0x3c>
			if (*fmt != '%') {
    42ce:	2825      	cmp	r0, #37	; 0x25
    42d0:	f000 813d 	beq.w	454e <_vprintk+0x2a0>
				out((int)*fmt, ctx);
    42d4:	4639      	mov	r1, r7
    42d6:	47b0      	blx	r6
	while (*fmt) {
    42d8:	9b03      	ldr	r3, [sp, #12]
    42da:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    42de:	9303      	str	r3, [sp, #12]
    42e0:	2800      	cmp	r0, #0
    42e2:	d1f3      	bne.n	42cc <_vprintk+0x1e>
}
    42e4:	b009      	add	sp, #36	; 0x24
    42e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    42ea:	2864      	cmp	r0, #100	; 0x64
    42ec:	d062      	beq.n	43b4 <_vprintk+0x106>
    42ee:	d819      	bhi.n	4324 <_vprintk+0x76>
    42f0:	2839      	cmp	r0, #57	; 0x39
    42f2:	d80a      	bhi.n	430a <_vprintk+0x5c>
    42f4:	2831      	cmp	r0, #49	; 0x31
    42f6:	d251      	bcs.n	439c <_vprintk+0xee>
    42f8:	282d      	cmp	r0, #45	; 0x2d
    42fa:	d03d      	beq.n	4378 <_vprintk+0xca>
    42fc:	2830      	cmp	r0, #48	; 0x30
    42fe:	d03e      	beq.n	437e <_vprintk+0xd0>
    4300:	2825      	cmp	r0, #37	; 0x25
    4302:	d108      	bne.n	4316 <_vprintk+0x68>
				out((int)'%', ctx);
    4304:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
    4306:	47b0      	blx	r6
    4308:	e7de      	b.n	42c8 <_vprintk+0x1a>
			switch (*fmt) {
    430a:	2858      	cmp	r0, #88	; 0x58
    430c:	f000 80a8 	beq.w	4460 <_vprintk+0x1b2>
    4310:	2863      	cmp	r0, #99	; 0x63
    4312:	f000 8116 	beq.w	4542 <_vprintk+0x294>
				out((int)'%', ctx);
    4316:	4639      	mov	r1, r7
    4318:	2025      	movs	r0, #37	; 0x25
    431a:	47b0      	blx	r6
				out((int)*fmt, ctx);
    431c:	9b03      	ldr	r3, [sp, #12]
    431e:	4639      	mov	r1, r7
    4320:	7818      	ldrb	r0, [r3, #0]
    4322:	e7f0      	b.n	4306 <_vprintk+0x58>
			switch (*fmt) {
    4324:	2870      	cmp	r0, #112	; 0x70
    4326:	f000 8091 	beq.w	444c <_vprintk+0x19e>
    432a:	d806      	bhi.n	433a <_vprintk+0x8c>
    432c:	2869      	cmp	r0, #105	; 0x69
    432e:	d041      	beq.n	43b4 <_vprintk+0x106>
    4330:	286c      	cmp	r0, #108	; 0x6c
    4332:	d03c      	beq.n	43ae <_vprintk+0x100>
    4334:	2868      	cmp	r0, #104	; 0x68
    4336:	d0cf      	beq.n	42d8 <_vprintk+0x2a>
    4338:	e7ed      	b.n	4316 <_vprintk+0x68>
    433a:	2875      	cmp	r0, #117	; 0x75
    433c:	d06d      	beq.n	441a <_vprintk+0x16c>
    433e:	d817      	bhi.n	4370 <_vprintk+0xc2>
    4340:	2873      	cmp	r0, #115	; 0x73
    4342:	d1e8      	bne.n	4316 <_vprintk+0x68>
				char *s = va_arg(ap, char *);
    4344:	6825      	ldr	r5, [r4, #0]
    4346:	f104 0b04 	add.w	fp, r4, #4
    434a:	462b      	mov	r3, r5
				while (*s)
    434c:	461c      	mov	r4, r3
    434e:	f814 0b01 	ldrb.w	r0, [r4], #1
    4352:	2800      	cmp	r0, #0
    4354:	f040 80ec 	bne.w	4530 <_vprintk+0x282>
				if (padding == PAD_SPACE_AFTER) {
    4358:	f1b8 0f03 	cmp.w	r8, #3
    435c:	f040 8100 	bne.w	4560 <_vprintk+0x2b2>
					int remaining = min_width - (s - start);
    4360:	1b5c      	subs	r4, r3, r5
    4362:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    4366:	2c00      	cmp	r4, #0
    4368:	f300 80e6 	bgt.w	4538 <_vprintk+0x28a>
				char *s = va_arg(ap, char *);
    436c:	465c      	mov	r4, fp
    436e:	e7ab      	b.n	42c8 <_vprintk+0x1a>
			switch (*fmt) {
    4370:	2878      	cmp	r0, #120	; 0x78
    4372:	d075      	beq.n	4460 <_vprintk+0x1b2>
    4374:	287a      	cmp	r0, #122	; 0x7a
    4376:	e7de      	b.n	4336 <_vprintk+0x88>
				padding = PAD_SPACE_AFTER;
    4378:	f04f 0803 	mov.w	r8, #3
    437c:	e7ac      	b.n	42d8 <_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
    437e:	f1b9 0f00 	cmp.w	r9, #0
    4382:	da0e      	bge.n	43a2 <_vprintk+0xf4>
    4384:	f1b8 0f00 	cmp.w	r8, #0
    4388:	f000 80e7 	beq.w	455a <_vprintk+0x2ac>
					min_width = *fmt - '0';
    438c:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    4390:	f1b8 0f00 	cmp.w	r8, #0
    4394:	bf08      	it	eq
    4396:	f04f 0802 	moveq.w	r8, #2
    439a:	e79d      	b.n	42d8 <_vprintk+0x2a>
				if (min_width < 0) {
    439c:	f1b9 0f00 	cmp.w	r9, #0
    43a0:	dbf4      	blt.n	438c <_vprintk+0xde>
					min_width = 10 * min_width + *fmt - '0';
    43a2:	230a      	movs	r3, #10
    43a4:	fb03 0909 	mla	r9, r3, r9, r0
    43a8:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    43ac:	e7f0      	b.n	4390 <_vprintk+0xe2>
				long_ctr++;
    43ae:	f10a 0a01 	add.w	sl, sl, #1
    43b2:	e791      	b.n	42d8 <_vprintk+0x2a>
				if (long_ctr == 0) {
    43b4:	f1ba 0f00 	cmp.w	sl, #0
    43b8:	d112      	bne.n	43e0 <_vprintk+0x132>
					long ld = va_arg(ap, long);
    43ba:	6825      	ldr	r5, [r4, #0]
    43bc:	3404      	adds	r4, #4
				if (d < 0) {
    43be:	2d00      	cmp	r5, #0
    43c0:	da05      	bge.n	43ce <_vprintk+0x120>
					out((int)'-', ctx);
    43c2:	4639      	mov	r1, r7
    43c4:	202d      	movs	r0, #45	; 0x2d
    43c6:	47b0      	blx	r6
					d = -d;
    43c8:	426d      	negs	r5, r5
					min_width--;
    43ca:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
    43ce:	f8cd 9000 	str.w	r9, [sp]
    43d2:	4643      	mov	r3, r8
    43d4:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
    43d6:	4639      	mov	r1, r7
    43d8:	4630      	mov	r0, r6
    43da:	f7fc fc01 	bl	be0 <_printk_dec_ulong>
    43de:	e773      	b.n	42c8 <_vprintk+0x1a>
				} else if (long_ctr == 1) {
    43e0:	f1ba 0f01 	cmp.w	sl, #1
    43e4:	d0e9      	beq.n	43ba <_vprintk+0x10c>
					long long lld = va_arg(ap, long long);
    43e6:	3407      	adds	r4, #7
    43e8:	f024 0307 	bic.w	r3, r4, #7
    43ec:	f103 0408 	add.w	r4, r3, #8
    43f0:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (lld > INT32_MAX ||
    43f4:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
    43f8:	f143 0100 	adc.w	r1, r3, #0
    43fc:	f04f 0c00 	mov.w	ip, #0
    4400:	f04f 3bff 	mov.w	fp, #4294967295
    4404:	458c      	cmp	ip, r1
    4406:	bf08      	it	eq
    4408:	4583      	cmpeq	fp, r0
    440a:	d204      	bcs.n	4416 <_vprintk+0x168>
						print_err(out, ctx);
    440c:	4639      	mov	r1, r7
    440e:	4630      	mov	r0, r6
    4410:	f7ff ff3f 	bl	4292 <print_err>
    4414:	e758      	b.n	42c8 <_vprintk+0x1a>
					d = (s32_t)lld;
    4416:	4615      	mov	r5, r2
    4418:	e7d1      	b.n	43be <_vprintk+0x110>
				if (long_ctr == 0) {
    441a:	f1ba 0f00 	cmp.w	sl, #0
    441e:	d105      	bne.n	442c <_vprintk+0x17e>
					long lu = va_arg(ap, unsigned long);
    4420:	6822      	ldr	r2, [r4, #0]
    4422:	3404      	adds	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
    4424:	f8cd 9000 	str.w	r9, [sp]
    4428:	4643      	mov	r3, r8
    442a:	e7d4      	b.n	43d6 <_vprintk+0x128>
				} else if (long_ctr == 1) {
    442c:	f1ba 0f01 	cmp.w	sl, #1
    4430:	d0f6      	beq.n	4420 <_vprintk+0x172>
					unsigned long long llu =
    4432:	3407      	adds	r4, #7
    4434:	f024 0307 	bic.w	r3, r4, #7
    4438:	f103 0408 	add.w	r4, r3, #8
    443c:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > INT32_MAX) {
    4440:	2b00      	cmp	r3, #0
    4442:	bf08      	it	eq
    4444:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
    4448:	d3ec      	bcc.n	4424 <_vprintk+0x176>
    444a:	e7df      	b.n	440c <_vprintk+0x15e>
				  out('0', ctx);
    444c:	4639      	mov	r1, r7
    444e:	2030      	movs	r0, #48	; 0x30
    4450:	47b0      	blx	r6
				  out('x', ctx);
    4452:	4639      	mov	r1, r7
    4454:	2078      	movs	r0, #120	; 0x78
    4456:	47b0      	blx	r6
				  min_width = 8;
    4458:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    445c:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
    4460:	f1ba 0f01 	cmp.w	sl, #1
    4464:	dc27      	bgt.n	44b6 <_vprintk+0x208>
					x = va_arg(ap, unsigned long);
    4466:	6823      	ldr	r3, [r4, #0]
    4468:	9307      	str	r3, [sp, #28]
    446a:	2300      	movs	r3, #0
    446c:	9304      	str	r3, [sp, #16]
    446e:	3404      	adds	r4, #4
	int digits = 0;
    4470:	2300      	movs	r3, #0
	int remaining = 16; /* 16 digits max */
    4472:	2210      	movs	r2, #16
	int digits = 0;
    4474:	9302      	str	r3, [sp, #8]
	int found_largest_digit = 0;
    4476:	9306      	str	r3, [sp, #24]
	int size = sizeof(num) * 2;
    4478:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    447a:	9b07      	ldr	r3, [sp, #28]
    447c:	f10b 3bff 	add.w	fp, fp, #4294967295
    4480:	ea4f 008b 	mov.w	r0, fp, lsl #2
    4484:	f1c0 0c20 	rsb	ip, r0, #32
    4488:	f1a0 0120 	sub.w	r1, r0, #32
    448c:	fa23 f000 	lsr.w	r0, r3, r0
    4490:	9b04      	ldr	r3, [sp, #16]
    4492:	fa03 fc0c 	lsl.w	ip, r3, ip
    4496:	ea40 000c 	orr.w	r0, r0, ip
    449a:	fa23 f101 	lsr.w	r1, r3, r1
    449e:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || size == 1) {
    44a0:	f010 000f 	ands.w	r0, r0, #15
    44a4:	d113      	bne.n	44ce <_vprintk+0x220>
    44a6:	9b06      	ldr	r3, [sp, #24]
    44a8:	b913      	cbnz	r3, 44b0 <_vprintk+0x202>
    44aa:	f1bb 0f00 	cmp.w	fp, #0
    44ae:	d12e      	bne.n	450e <_vprintk+0x260>
			nibble += nibble > 9 ? 87 : 48;
    44b0:	f04f 0c30 	mov.w	ip, #48	; 0x30
    44b4:	e011      	b.n	44da <_vprintk+0x22c>
					x = va_arg(ap, unsigned long long);
    44b6:	3407      	adds	r4, #7
    44b8:	f024 0307 	bic.w	r3, r4, #7
    44bc:	f103 0408 	add.w	r4, r3, #8
    44c0:	681a      	ldr	r2, [r3, #0]
    44c2:	685b      	ldr	r3, [r3, #4]
    44c4:	9207      	str	r2, [sp, #28]
    44c6:	9304      	str	r3, [sp, #16]
    44c8:	e7d2      	b.n	4470 <_vprintk+0x1c2>
	for (; size != 0; size--) {
    44ca:	9a05      	ldr	r2, [sp, #20]
    44cc:	e7d5      	b.n	447a <_vprintk+0x1cc>
			nibble += nibble > 9 ? 87 : 48;
    44ce:	2809      	cmp	r0, #9
    44d0:	bf8c      	ite	hi
    44d2:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    44d6:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
    44da:	4639      	mov	r1, r7
    44dc:	4460      	add	r0, ip
    44de:	9205      	str	r2, [sp, #20]
    44e0:	47b0      	blx	r6
			digits++;
    44e2:	9b02      	ldr	r3, [sp, #8]
			found_largest_digit = 1;
    44e4:	9506      	str	r5, [sp, #24]
			digits++;
    44e6:	3301      	adds	r3, #1
    44e8:	9302      	str	r3, [sp, #8]
	for (; size != 0; size--) {
    44ea:	f1bb 0f00 	cmp.w	fp, #0
    44ee:	d1ec      	bne.n	44ca <_vprintk+0x21c>
	if (padding == PAD_SPACE_AFTER) {
    44f0:	f1b8 0f03 	cmp.w	r8, #3
    44f4:	f47f aee8 	bne.w	42c8 <_vprintk+0x1a>
		remaining = min_width * 2 - digits;
    44f8:	9b02      	ldr	r3, [sp, #8]
    44fa:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
    44fe:	2d00      	cmp	r5, #0
    4500:	f77f aee2 	ble.w	42c8 <_vprintk+0x1a>
			out(' ', ctx);
    4504:	4639      	mov	r1, r7
    4506:	2020      	movs	r0, #32
    4508:	47b0      	blx	r6
    450a:	3d01      	subs	r5, #1
    450c:	e7f7      	b.n	44fe <_vprintk+0x250>
		if (remaining-- <= min_width) {
    450e:	1e53      	subs	r3, r2, #1
    4510:	4591      	cmp	r9, r2
    4512:	9305      	str	r3, [sp, #20]
    4514:	dbe9      	blt.n	44ea <_vprintk+0x23c>
			if (padding == PAD_ZERO_BEFORE) {
    4516:	f1b8 0f01 	cmp.w	r8, #1
    451a:	d103      	bne.n	4524 <_vprintk+0x276>
				out('0', ctx);
    451c:	4639      	mov	r1, r7
    451e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    4520:	47b0      	blx	r6
    4522:	e7e2      	b.n	44ea <_vprintk+0x23c>
			} else if (padding == PAD_SPACE_BEFORE) {
    4524:	f1b8 0f02 	cmp.w	r8, #2
    4528:	d1df      	bne.n	44ea <_vprintk+0x23c>
				out(' ', ctx);
    452a:	4639      	mov	r1, r7
    452c:	2020      	movs	r0, #32
    452e:	e7f7      	b.n	4520 <_vprintk+0x272>
					out((int)(*s++), ctx);
    4530:	4639      	mov	r1, r7
    4532:	47b0      	blx	r6
    4534:	4623      	mov	r3, r4
    4536:	e709      	b.n	434c <_vprintk+0x9e>
						out(' ', ctx);
    4538:	4639      	mov	r1, r7
    453a:	2020      	movs	r0, #32
    453c:	47b0      	blx	r6
    453e:	3c01      	subs	r4, #1
    4540:	e711      	b.n	4366 <_vprintk+0xb8>
				out(c, ctx);
    4542:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    4544:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    4546:	4639      	mov	r1, r7
    4548:	47b0      	blx	r6
				int c = va_arg(ap, int);
    454a:	462c      	mov	r4, r5
    454c:	e6bc      	b.n	42c8 <_vprintk+0x1a>
				long_ctr = 0;
    454e:	46aa      	mov	sl, r5
				padding = PAD_NONE;
    4550:	46a8      	mov	r8, r5
				min_width = -1;
    4552:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
    4556:	2501      	movs	r5, #1
    4558:	e6be      	b.n	42d8 <_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
    455a:	f04f 0801 	mov.w	r8, #1
    455e:	e6bb      	b.n	42d8 <_vprintk+0x2a>
				char *s = va_arg(ap, char *);
    4560:	465c      	mov	r4, fp
			might_format = 0;
    4562:	4605      	mov	r5, r0
    4564:	e6b8      	b.n	42d8 <_vprintk+0x2a>

00004566 <printk>:
{
    4566:	b40f      	push	{r0, r1, r2, r3}
    4568:	b507      	push	{r0, r1, r2, lr}
    456a:	a904      	add	r1, sp, #16
    456c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    4570:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    4572:	f7fc fb8b 	bl	c8c <vprintk>
}
    4576:	b003      	add	sp, #12
    4578:	f85d eb04 	ldr.w	lr, [sp], #4
    457c:	b004      	add	sp, #16
    457e:	4770      	bx	lr

00004580 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);

GEN_ABS_SYM_END
    4580:	4770      	bx	lr

00004582 <nrfx_isr>:

#include <nrfx.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    4582:	4700      	bx	r0

00004584 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    4584:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    4586:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
    4588:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    458a:	bf9d      	ittte	ls
    458c:	6882      	ldrls	r2, [r0, #8]
    458e:	18d2      	addls	r2, r2, r3
    4590:	f102 32ff 	addls.w	r2, r2, #4294967295
    r = RdOff - WrOff - 1u;
    4594:	f103 33ff 	addhi.w	r3, r3, #4294967295
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    4598:	bf94      	ite	ls
    459a:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
    459c:	1a58      	subhi	r0, r3, r1
}
    459e:	4770      	bx	lr

000045a0 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    45a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    45a4:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    45a8:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    45aa:	1bf6      	subs	r6, r6, r7
    45ac:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    45ae:	4296      	cmp	r6, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    45b0:	4688      	mov	r8, r1
    45b2:	4615      	mov	r5, r2
    45b4:	4438      	add	r0, r7
  if (Rem > NumBytes) {
    45b6:	d905      	bls.n	45c4 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    45b8:	f000 f8a1 	bl	46fe <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    45bc:	443d      	add	r5, r7
    pRing->WrOff = NumBytesAtOnce;
    45be:	60e5      	str	r5, [r4, #12]
}
    45c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    45c4:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
    45c6:	1bad      	subs	r5, r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    45c8:	f000 f899 	bl	46fe <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    45cc:	462a      	mov	r2, r5
    45ce:	eb08 0106 	add.w	r1, r8, r6
    45d2:	6860      	ldr	r0, [r4, #4]
    45d4:	f000 f893 	bl	46fe <memcpy>
    45d8:	e7f1      	b.n	45be <_WriteNoCheck+0x1e>

000045da <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    45da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    45de:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    45e0:	4606      	mov	r6, r0
    45e2:	4689      	mov	r9, r1
    45e4:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    45e6:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    45ea:	6934      	ldr	r4, [r6, #16]
    45ec:	68b3      	ldr	r3, [r6, #8]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    45ee:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    45f0:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    45f2:	bf28      	it	cs
    45f4:	18e4      	addcs	r4, r4, r3
    45f6:	3c01      	subs	r4, #1
    45f8:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    45fa:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    45fc:	42bc      	cmp	r4, r7
    45fe:	bf28      	it	cs
    4600:	463c      	movcs	r4, r7
    4602:	4294      	cmp	r4, r2
    4604:	bf28      	it	cs
    4606:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    4608:	4649      	mov	r1, r9
    460a:	4428      	add	r0, r5
    460c:	4622      	mov	r2, r4
    460e:	f000 f876 	bl	46fe <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    4612:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    4614:	4425      	add	r5, r4
      WrOff = 0u;
    4616:	42ab      	cmp	r3, r5
    4618:	bf08      	it	eq
    461a:	2500      	moveq	r5, #0
  } while (NumBytes);
    461c:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    461e:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    4620:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    4622:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    4624:	d1e1      	bne.n	45ea <_WriteBlocking+0x10>
}
    4626:	4640      	mov	r0, r8
    4628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000462c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    462c:	f7fc be34 	b.w	1298 <_DoInit>

00004630 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
    4630:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    4632:	f7ff fffb 	bl	462c <SEGGER_RTT_Init>

	return 0;
}
    4636:	2000      	movs	r0, #0
    4638:	bd08      	pop	{r3, pc}

0000463a <_clock_control_init>:

static int _clock_control_init(struct device *dev)
{
    463a:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(DT_NORDIC_NRF_CLOCK_0_IRQ_0,
    463c:	2200      	movs	r2, #0
    463e:	4610      	mov	r0, r2
    4640:	2101      	movs	r1, #1
    4642:	f7fd fb07 	bl	1c54 <z_irq_priority_set>
		    DT_NORDIC_NRF_CLOCK_0_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    4646:	2000      	movs	r0, #0
    4648:	f7fd fae0 	bl	1c0c <z_arch_irq_enable>

	return 0;
}
    464c:	2000      	movs	r0, #0
    464e:	bd08      	pop	{r3, pc}

00004650 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    4650:	4770      	bx	lr

00004652 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    4652:	4770      	bx	lr

00004654 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    4654:	f7fd bb4c 	b.w	1cf0 <__bus_fault>

00004658 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    4658:	4601      	mov	r1, r0
	z_NanoFatalErrorHandler(esf->r0, esf);
    465a:	6800      	ldr	r0, [r0, #0]
    465c:	f7fd bb5c 	b.w	1d18 <z_NanoFatalErrorHandler>

00004660 <lock_interrupts>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
    4660:	2320      	movs	r3, #32
    4662:	f383 8811 	msr	BASEPRI, r3
}
    4666:	4770      	bx	lr

00004668 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    4668:	b508      	push	{r3, lr}
	handler();
    466a:	f7fd fbfd 	bl	1e68 <_SysNmiOnReset>
	z_ExcExit();
}
    466e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_ExcExit();
    4672:	f7fd b90f 	b.w	1894 <_IntExit>

00004676 <z_arch_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    4676:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    4678:	2100      	movs	r1, #0
    467a:	a801      	add	r0, sp, #4
    467c:	f7fd fcc6 	bl	200c <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    4680:	b003      	add	sp, #12
    4682:	f85d fb04 	ldr.w	pc, [sp], #4

00004686 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    4686:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    4688:	4603      	mov	r3, r0
    468a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    468e:	b90a      	cbnz	r2, 4694 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    4690:	701a      	strb	r2, [r3, #0]

	return dest;
}
    4692:	4770      	bx	lr
		*d = *s;
    4694:	f803 2b01 	strb.w	r2, [r3], #1
    4698:	e7f7      	b.n	468a <strcpy+0x4>

0000469a <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    469a:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0'))
    469c:	7802      	ldrb	r2, [r0, #0]
    469e:	428a      	cmp	r2, r1
    46a0:	4603      	mov	r3, r0
    46a2:	f100 0001 	add.w	r0, r0, #1
    46a6:	d004      	beq.n	46b2 <strchr+0x18>
    46a8:	2a00      	cmp	r2, #0
    46aa:	d1f7      	bne.n	469c <strchr+0x2>
		s++;

	return (*s == tmp) ? (char *) s : NULL;
    46ac:	2900      	cmp	r1, #0
    46ae:	bf18      	it	ne
    46b0:	2300      	movne	r3, #0
}
    46b2:	4618      	mov	r0, r3
    46b4:	4770      	bx	lr

000046b6 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    46b6:	3801      	subs	r0, #1
    46b8:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    46ba:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    46be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    46c2:	4293      	cmp	r3, r2
    46c4:	d102      	bne.n	46cc <strcmp+0x16>
    46c6:	2b00      	cmp	r3, #0
    46c8:	d1f7      	bne.n	46ba <strcmp+0x4>
    46ca:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    46cc:	1a98      	subs	r0, r3, r2
    46ce:	4770      	bx	lr

000046d0 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    46d0:	1a43      	subs	r3, r0, r1
    46d2:	4293      	cmp	r3, r2
{
    46d4:	b510      	push	{r4, lr}
    46d6:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    46da:	d308      	bcc.n	46ee <memmove+0x1e>
    46dc:	3901      	subs	r1, #1
	char *dest = d;
    46de:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    46e0:	429a      	cmp	r2, r3
    46e2:	d00b      	beq.n	46fc <memmove+0x2c>
			*dest = *src;
    46e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    46e8:	f802 4b01 	strb.w	r4, [r2], #1
    46ec:	e7f8      	b.n	46e0 <memmove+0x10>
    46ee:	440a      	add	r2, r1
			dest[n] = src[n];
    46f0:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    46f4:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    46f8:	428a      	cmp	r2, r1
    46fa:	d1f9      	bne.n	46f0 <memmove+0x20>
			n--;
		}
	}

	return d;
}
    46fc:	bd10      	pop	{r4, pc}

000046fe <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    46fe:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    4700:	ea81 0400 	eor.w	r4, r1, r0
    4704:	07a5      	lsls	r5, r4, #30
    4706:	4603      	mov	r3, r0
    4708:	d00b      	beq.n	4722 <memcpy+0x24>
    470a:	3b01      	subs	r3, #1
    470c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    470e:	4291      	cmp	r1, r2
    4710:	d11d      	bne.n	474e <memcpy+0x50>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4712:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    4714:	2a00      	cmp	r2, #0
    4716:	d0fc      	beq.n	4712 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    4718:	f811 4b01 	ldrb.w	r4, [r1], #1
    471c:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    4720:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    4722:	079c      	lsls	r4, r3, #30
    4724:	d1f6      	bne.n	4714 <memcpy+0x16>
    4726:	1f1d      	subs	r5, r3, #4
    4728:	460c      	mov	r4, r1
    472a:	188f      	adds	r7, r1, r2
		while (n >= sizeof(unsigned int)) {
    472c:	1b3e      	subs	r6, r7, r4
    472e:	2e03      	cmp	r6, #3
    4730:	d808      	bhi.n	4744 <memcpy+0x46>
    4732:	0894      	lsrs	r4, r2, #2
    4734:	f06f 0503 	mvn.w	r5, #3
    4738:	fb05 2204 	mla	r2, r5, r4, r2
    473c:	00a4      	lsls	r4, r4, #2
    473e:	4423      	add	r3, r4
    4740:	4421      	add	r1, r4
    4742:	e7e2      	b.n	470a <memcpy+0xc>
			*(d_word++) = *(s_word++);
    4744:	f854 6b04 	ldr.w	r6, [r4], #4
    4748:	f845 6f04 	str.w	r6, [r5, #4]!
    474c:	e7ee      	b.n	472c <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    474e:	f811 4b01 	ldrb.w	r4, [r1], #1
    4752:	f803 4f01 	strb.w	r4, [r3, #1]!
    4756:	e7da      	b.n	470e <memcpy+0x10>

00004758 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    4758:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    475a:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    475c:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    475e:	079c      	lsls	r4, r3, #30
    4760:	d10f      	bne.n	4782 <memset+0x2a>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    4762:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    4766:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    476a:	461d      	mov	r5, r3
    476c:	189f      	adds	r7, r3, r2
    476e:	1b7e      	subs	r6, r7, r5
    4770:	2e03      	cmp	r6, #3
    4772:	d80c      	bhi.n	478e <memset+0x36>
    4774:	0894      	lsrs	r4, r2, #2
    4776:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    477a:	4413      	add	r3, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    477c:	429c      	cmp	r4, r3
    477e:	d109      	bne.n	4794 <memset+0x3c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    4780:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (n == 0) {
    4782:	2a00      	cmp	r2, #0
    4784:	d0fc      	beq.n	4780 <memset+0x28>
		*(d_byte++) = c_byte;
    4786:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    478a:	3a01      	subs	r2, #1
    478c:	e7e7      	b.n	475e <memset+0x6>
		*(d_word++) = c_word;
    478e:	f845 4b04 	str.w	r4, [r5], #4
    4792:	e7ec      	b.n	476e <memset+0x16>
		*(d_byte++) = c_byte;
    4794:	f804 1b01 	strb.w	r1, [r4], #1
    4798:	e7f0      	b.n	477c <memset+0x24>

0000479a <_to_x>:
{
    479a:	b570      	push	{r4, r5, r6, lr}
    479c:	4604      	mov	r4, r0
		int d = n % base;
    479e:	fbb1 f6f2 	udiv	r6, r1, r2
    47a2:	fb02 1116 	mls	r1, r2, r6, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    47a6:	b2cd      	uxtb	r5, r1
    47a8:	2909      	cmp	r1, #9
    47aa:	bf8c      	ite	hi
    47ac:	2127      	movhi	r1, #39	; 0x27
    47ae:	2100      	movls	r1, #0
    47b0:	3530      	adds	r5, #48	; 0x30
    47b2:	4429      	add	r1, r5
    47b4:	f804 1b01 	strb.w	r1, [r4], #1
	} while (n);
    47b8:	4631      	mov	r1, r6
    47ba:	2e00      	cmp	r6, #0
    47bc:	d1ef      	bne.n	479e <_to_x+0x4>
		*end++ = '0';
    47be:	2130      	movs	r1, #48	; 0x30
    47c0:	1a22      	subs	r2, r4, r0
	while (end - start < minlen) {
    47c2:	4293      	cmp	r3, r2
    47c4:	dc07      	bgt.n	47d6 <_to_x+0x3c>
	*end = 0;
    47c6:	4623      	mov	r3, r4
    47c8:	2100      	movs	r1, #0
    47ca:	f803 1901 	strb.w	r1, [r3], #-1
	for (end--; end > start; end--, start++) {
    47ce:	4283      	cmp	r3, r0
    47d0:	d804      	bhi.n	47dc <_to_x+0x42>
}
    47d2:	4610      	mov	r0, r2
    47d4:	bd70      	pop	{r4, r5, r6, pc}
		*end++ = '0';
    47d6:	f804 1b01 	strb.w	r1, [r4], #1
    47da:	e7f1      	b.n	47c0 <_to_x+0x26>
		char tmp = *end;
    47dc:	7819      	ldrb	r1, [r3, #0]
		*end = *start;
    47de:	7804      	ldrb	r4, [r0, #0]
    47e0:	f803 4901 	strb.w	r4, [r3], #-1
		*start = tmp;
    47e4:	f800 1b01 	strb.w	r1, [r0], #1
    47e8:	e7f1      	b.n	47ce <_to_x+0x34>

000047ea <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
    47ea:	e9d0 2300 	ldrd	r2, r3, [r0]
{
    47ee:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	*v = (*v & 1) + (*v >> 1);
    47f2:	ea5f 0c53 	movs.w	ip, r3, lsr #1
    47f6:	ea4f 0b32 	mov.w	fp, r2, rrx
    47fa:	f002 0401 	and.w	r4, r2, #1
    47fe:	eb1b 0204 	adds.w	r2, fp, r4
    4802:	f04f 0500 	mov.w	r5, #0
    4806:	eb4c 0305 	adc.w	r3, ip, r5
    480a:	e9c0 2300 	strd	r2, r3, [r0]
}
    480e:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

00004812 <_ldiv5>:
	uint64_t rem = *v, quot = 0U, q;
    4812:	e9d0 2300 	ldrd	r2, r3, [r0]
{
    4816:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		q = (uint64_t)(hi / 5) << shifts[i];
    481a:	2105      	movs	r1, #5
	rem += 2;
    481c:	f112 0802 	adds.w	r8, r2, #2
		rem -= q * 5;
    4820:	f04f 0600 	mov.w	r6, #0
	rem += 2;
    4824:	f143 0900 	adc.w	r9, r3, #0
		rem -= q * 5;
    4828:	ebb8 0806 	subs.w	r8, r8, r6
		q = (uint64_t)(hi / 5) << shifts[i];
    482c:	fbb9 f5f1 	udiv	r5, r9, r1
		rem -= q * 5;
    4830:	fb01 f705 	mul.w	r7, r1, r5
    4834:	eb69 0907 	sbc.w	r9, r9, r7
		hi = rem >> shifts[i];
    4838:	ea4f 06d8 	mov.w	r6, r8, lsr #3
    483c:	ea46 7649 	orr.w	r6, r6, r9, lsl #29
		q = (uint64_t)(hi / 5) << shifts[i];
    4840:	2400      	movs	r4, #0
    4842:	fbb6 fcf1 	udiv	ip, r6, r1
    4846:	ea4f 06cc 	mov.w	r6, ip, lsl #3
		quot += q;
    484a:	19a2      	adds	r2, r4, r6
		q = (uint64_t)(hi / 5) << shifts[i];
    484c:	ea4f 775c 	mov.w	r7, ip, lsr #29
		rem -= q * 5;
    4850:	46c2      	mov	sl, r8
		quot += q;
    4852:	eb45 0307 	adc.w	r3, r5, r7
    4856:	4614      	mov	r4, r2
		rem -= q * 5;
    4858:	fba6 8901 	umull	r8, r9, r6, r1
    485c:	ebba 0208 	subs.w	r2, sl, r8
		quot += q;
    4860:	461d      	mov	r5, r3
		q = (uint64_t)(hi / 5) << shifts[i];
    4862:	fbb2 f2f1 	udiv	r2, r2, r1
		quot += q;
    4866:	18a4      	adds	r4, r4, r2
    4868:	f145 0500 	adc.w	r5, r5, #0
	*v = quot;
    486c:	e9c0 4500 	strd	r4, r5, [r0]
}
    4870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004874 <_get_digit>:
	if (*digit_count > 0) {
    4874:	680b      	ldr	r3, [r1, #0]
    4876:	2b00      	cmp	r3, #0
{
    4878:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
	if (*digit_count > 0) {
    487c:	dd13      	ble.n	48a6 <_get_digit+0x32>
		*fr = *fr * 10;
    487e:	6802      	ldr	r2, [r0, #0]
    4880:	6844      	ldr	r4, [r0, #4]
		*digit_count -= 1;
    4882:	3b01      	subs	r3, #1
    4884:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10;
    4886:	210a      	movs	r1, #10
    4888:	fba2 bc01 	umull	fp, ip, r2, r1
    488c:	fb01 cc04 	mla	ip, r1, r4, ip
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    4890:	465a      	mov	r2, fp
    4892:	f02c 4370 	bic.w	r3, ip, #4026531840	; 0xf0000000
    4896:	e9c0 2300 	strd	r2, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
    489a:	ea4f 711c 	mov.w	r1, ip, lsr #28
    489e:	3130      	adds	r1, #48	; 0x30
}
    48a0:	b2c8      	uxtb	r0, r1
    48a2:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
		rval = '0';
    48a6:	2130      	movs	r1, #48	; 0x30
    48a8:	e7fa      	b.n	48a0 <_get_digit+0x2c>

000048aa <_stdout_hook_default>:
}
    48aa:	f04f 30ff 	mov.w	r0, #4294967295
    48ae:	4770      	bx	lr

000048b0 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    48b0:	684b      	ldr	r3, [r1, #4]
    48b2:	2b01      	cmp	r3, #1
    48b4:	dd07      	ble.n	48c6 <sprintf_out+0x16>
		*(p->ptr) = c;
    48b6:	680b      	ldr	r3, [r1, #0]
    48b8:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    48ba:	680b      	ldr	r3, [r1, #0]
    48bc:	3301      	adds	r3, #1
    48be:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    48c0:	684b      	ldr	r3, [r1, #4]
    48c2:	3b01      	subs	r3, #1
    48c4:	604b      	str	r3, [r1, #4]
}
    48c6:	2000      	movs	r0, #0
    48c8:	4770      	bx	lr

000048ca <nrf_gpio_cfg_sense_set>:
{
    48ca:	0080      	lsls	r0, r0, #2
    48cc:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    48d0:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    48d4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    48d8:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    48dc:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    48e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    48e4:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
    48e8:	4770      	bx	lr

000048ea <gpio_nrfx_write>:
{
    48ea:	b510      	push	{r4, lr}
	return port->config->config_info;
    48ec:	6804      	ldr	r4, [r0, #0]
    48ee:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    48f0:	68a4      	ldr	r4, [r4, #8]
    48f2:	69c0      	ldr	r0, [r0, #28]
    48f4:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    48f6:	2901      	cmp	r1, #1
    48f8:	d104      	bne.n	4904 <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    48fa:	4058      	eors	r0, r3
    p_reg->OUT = value;
    48fc:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
}
    4900:	2000      	movs	r0, #0
    4902:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    4904:	3300      	adds	r3, #0
    4906:	fa20 f002 	lsr.w	r0, r0, r2
    490a:	f04f 0101 	mov.w	r1, #1
    490e:	bf18      	it	ne
    4910:	2301      	movne	r3, #1
    4912:	f000 0001 	and.w	r0, r0, #1
    4916:	4091      	lsls	r1, r2
    4918:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
    491a:	bf14      	ite	ne
    491c:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    4920:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
    4924:	e7ec      	b.n	4900 <gpio_nrfx_write+0x16>

00004926 <gpio_nrfx_read>:
{
    4926:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
    4928:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    492a:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    492c:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    492e:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4930:	6825      	ldr	r5, [r4, #0]
    return p_reg->DIR;
    4932:	f8d5 6514 	ldr.w	r6, [r5, #1300]	; 0x514
    return p_reg->IN;
    4936:	f8d5 4510 	ldr.w	r4, [r5, #1296]	; 0x510
    return p_reg->OUT;
    493a:	f8d5 5504 	ldr.w	r5, [r5, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    493e:	4060      	eors	r0, r4
    4940:	406c      	eors	r4, r5
    4942:	4034      	ands	r4, r6
    4944:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    4946:	2901      	cmp	r1, #1
		*value = (port_val & BIT(pin)) ? 1 : 0;
    4948:	bf1c      	itt	ne
    494a:	40d0      	lsrne	r0, r2
    494c:	f000 0001 	andne.w	r0, r0, #1
    4950:	6018      	str	r0, [r3, #0]
}
    4952:	2000      	movs	r0, #0
    4954:	bd70      	pop	{r4, r5, r6, pc}

00004956 <gpio_nrfx_manage_callback>:
	return _gpio_manage_callback(&get_port_data(port)->callbacks,
    4956:	6883      	ldr	r3, [r0, #8]
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
    4958:	6818      	ldr	r0, [r3, #0]
{
    495a:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    495c:	b158      	cbz	r0, 4976 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    495e:	2400      	movs	r4, #0
    4960:	4281      	cmp	r1, r0
    4962:	d113      	bne.n	498c <gpio_nrfx_manage_callback+0x36>
    4964:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    4966:	b95c      	cbnz	r4, 4980 <gpio_nrfx_manage_callback+0x2a>
    4968:	685c      	ldr	r4, [r3, #4]
	list->head = node;
    496a:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    496c:	42a1      	cmp	r1, r4
    496e:	d100      	bne.n	4972 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    4970:	6058      	str	r0, [r3, #4]
	parent->next = child;
    4972:	2000      	movs	r0, #0
    4974:	6008      	str	r0, [r1, #0]
	if (set) {
    4976:	b972      	cbnz	r2, 4996 <gpio_nrfx_manage_callback+0x40>
	return 0;
    4978:	2000      	movs	r0, #0
}
    497a:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    497c:	4628      	mov	r0, r5
    497e:	e7ef      	b.n	4960 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
    4980:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    4982:	6858      	ldr	r0, [r3, #4]
    4984:	4281      	cmp	r1, r0
	list->tail = node;
    4986:	bf08      	it	eq
    4988:	605c      	streq	r4, [r3, #4]
    498a:	e7f2      	b.n	4972 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    498c:	6805      	ldr	r5, [r0, #0]
    498e:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4990:	2d00      	cmp	r5, #0
    4992:	d1f3      	bne.n	497c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    4994:	b13a      	cbz	r2, 49a6 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    4996:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    4998:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    499a:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    499c:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    499e:	2800      	cmp	r0, #0
    49a0:	d1ea      	bne.n	4978 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    49a2:	6059      	str	r1, [r3, #4]
    49a4:	e7e9      	b.n	497a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    49a6:	f06f 0015 	mvn.w	r0, #21
	return _gpio_manage_callback(&get_port_data(port)->callbacks,
    49aa:	e7e6      	b.n	497a <gpio_nrfx_manage_callback+0x24>

000049ac <gpio_nrfx_config>:
{
    49ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    49b0:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    49b2:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    49b4:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    49b8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    49bc:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    49be:	d04a      	beq.n	4a56 <gpio_nrfx_config+0xaa>
    49c0:	dc2d      	bgt.n	4a1e <gpio_nrfx_config+0x72>
    49c2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    49c6:	d03e      	beq.n	4a46 <gpio_nrfx_config+0x9a>
    49c8:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    49cc:	d03f      	beq.n	4a4e <gpio_nrfx_config+0xa2>
    49ce:	bb68      	cbnz	r0, 4a2c <gpio_nrfx_config+0x80>
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    49d0:	f406 7740 	and.w	r7, r6, #768	; 0x300
    49d4:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    49d8:	d03f      	beq.n	4a5a <gpio_nrfx_config+0xae>
		pull = NRF_GPIO_PIN_PULLUP;
    49da:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    49de:	4263      	negs	r3, r4
    49e0:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    49e2:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    49e6:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
    49ea:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    49ec:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
    49f0:	bf18      	it	ne
    49f2:	b2d4      	uxtbne	r4, r2
    49f4:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    49f8:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
    49fc:	bf12      	itee	ne
    49fe:	46a1      	movne	r9, r4
		to_pin   = 31U;
    4a00:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
    4a04:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    4a06:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
    4a0a:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    4a0e:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    4a12:	45a1      	cmp	r9, r4
    4a14:	d223      	bcs.n	4a5e <gpio_nrfx_config+0xb2>
	return 0;
    4a16:	2000      	movs	r0, #0
}
    4a18:	b003      	add	sp, #12
    4a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    4a1e:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    4a22:	d016      	beq.n	4a52 <gpio_nrfx_config+0xa6>
    4a24:	dc05      	bgt.n	4a32 <gpio_nrfx_config+0x86>
    4a26:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    4a2a:	d00e      	beq.n	4a4a <gpio_nrfx_config+0x9e>
		return -EINVAL;
    4a2c:	f06f 0015 	mvn.w	r0, #21
    4a30:	e7f2      	b.n	4a18 <gpio_nrfx_config+0x6c>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    4a32:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    4a36:	d004      	beq.n	4a42 <gpio_nrfx_config+0x96>
    4a38:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    4a3c:	d1f6      	bne.n	4a2c <gpio_nrfx_config+0x80>
		drive = NRF_GPIO_PIN_H0D1;
    4a3e:	2007      	movs	r0, #7
		break;
    4a40:	e7c6      	b.n	49d0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0D1;
    4a42:	2006      	movs	r0, #6
		break;
    4a44:	e7c4      	b.n	49d0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0S1;
    4a46:	2001      	movs	r0, #1
		break;
    4a48:	e7c2      	b.n	49d0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    4a4a:	2003      	movs	r0, #3
		break;
    4a4c:	e7c0      	b.n	49d0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0S1;
    4a4e:	2004      	movs	r0, #4
		break;
    4a50:	e7be      	b.n	49d0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0H1;
    4a52:	2005      	movs	r0, #5
		break;
    4a54:	e7bc      	b.n	49d0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0H1;
    4a56:	2002      	movs	r0, #2
    4a58:	e7ba      	b.n	49d0 <gpio_nrfx_config+0x24>
		pull = NRF_GPIO_PIN_PULLUP;
    4a5a:	2303      	movs	r3, #3
    4a5c:	e7c1      	b.n	49e2 <gpio_nrfx_config+0x36>
	return port->config->config_info;
    4a5e:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    4a62:	6892      	ldr	r2, [r2, #8]
    4a64:	7911      	ldrb	r1, [r2, #4]
    4a66:	f004 021f 	and.w	r2, r4, #31
    4a6a:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    4a6e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    4a72:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
    4a76:	fa0b f204 	lsl.w	r2, fp, r4
    4a7a:	68a9      	ldr	r1, [r5, #8]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    4a7c:	2b00      	cmp	r3, #0
    4a7e:	d025      	beq.n	4acc <gpio_nrfx_config+0x120>
    4a80:	4311      	orrs	r1, r2
    4a82:	60a9      	str	r1, [r5, #8]
    4a84:	6969      	ldr	r1, [r5, #20]
    4a86:	9301      	str	r3, [sp, #4]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    4a88:	06b0      	lsls	r0, r6, #26
    4a8a:	bf4c      	ite	mi
    4a8c:	4311      	orrmi	r1, r2
    4a8e:	4391      	bicpl	r1, r2
    4a90:	6169      	str	r1, [r5, #20]
    4a92:	69a9      	ldr	r1, [r5, #24]
		WRITE_BIT(data->double_edge, curr_pin,
    4a94:	0670      	lsls	r0, r6, #25
    4a96:	bf4c      	ite	mi
    4a98:	4311      	orrmi	r1, r2
    4a9a:	4391      	bicpl	r1, r2
    4a9c:	61a9      	str	r1, [r5, #24]
    4a9e:	6929      	ldr	r1, [r5, #16]
		WRITE_BIT(data->active_level, curr_pin,
    4aa0:	0770      	lsls	r0, r6, #29
    4aa2:	bf4c      	ite	mi
    4aa4:	4311      	orrmi	r1, r2
    4aa6:	4391      	bicpl	r1, r2
    4aa8:	6129      	str	r1, [r5, #16]
    4aaa:	69e9      	ldr	r1, [r5, #28]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    4aac:	0630      	lsls	r0, r6, #24
    4aae:	bf4c      	ite	mi
    4ab0:	430a      	orrmi	r2, r1
    4ab2:	ea21 0202 	bicpl.w	r2, r1, r2
    4ab6:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    4ab8:	4621      	mov	r1, r4
    4aba:	4640      	mov	r0, r8
    4abc:	f7fd ff86 	bl	29cc <gpiote_pin_int_cfg>
		if (res != 0) {
    4ac0:	2800      	cmp	r0, #0
    4ac2:	d1a9      	bne.n	4a18 <gpio_nrfx_config+0x6c>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    4ac4:	3401      	adds	r4, #1
    4ac6:	b2e4      	uxtb	r4, r4
    4ac8:	9b01      	ldr	r3, [sp, #4]
    4aca:	e7a2      	b.n	4a12 <gpio_nrfx_config+0x66>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    4acc:	ea21 0102 	bic.w	r1, r1, r2
    4ad0:	e7d7      	b.n	4a82 <gpio_nrfx_config+0xd6>

00004ad2 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    4ad2:	2901      	cmp	r1, #1
{
    4ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    4ad8:	bf18      	it	ne
    4ada:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    4adc:	6887      	ldr	r7, [r0, #8]
{
    4ade:	4606      	mov	r6, r0
		to_pin   = pin;
    4ae0:	bf12      	itee	ne
    4ae2:	4625      	movne	r5, r4
		to_pin   = 31U;
    4ae4:	251f      	moveq	r5, #31
		from_pin = 0U;
    4ae6:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    4ae8:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    4aec:	42ac      	cmp	r4, r5
    4aee:	d902      	bls.n	4af6 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
    4af0:	2000      	movs	r0, #0
}
    4af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    4af6:	68fb      	ldr	r3, [r7, #12]
    4af8:	fa08 f204 	lsl.w	r2, r8, r4
    4afc:	ea23 0302 	bic.w	r3, r3, r2
    4b00:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    4b02:	4621      	mov	r1, r4
    4b04:	4630      	mov	r0, r6
    4b06:	f7fd ff61 	bl	29cc <gpiote_pin_int_cfg>
		if (res != 0) {
    4b0a:	2800      	cmp	r0, #0
    4b0c:	d1f1      	bne.n	4af2 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    4b0e:	3401      	adds	r4, #1
    4b10:	b2e4      	uxtb	r4, r4
    4b12:	e7eb      	b.n	4aec <gpio_nrfx_pin_disable_callback+0x1a>

00004b14 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    4b14:	2901      	cmp	r1, #1
{
    4b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    4b1a:	bf18      	it	ne
    4b1c:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    4b1e:	6887      	ldr	r7, [r0, #8]
{
    4b20:	4606      	mov	r6, r0
		to_pin   = pin;
    4b22:	bf12      	itee	ne
    4b24:	4625      	movne	r5, r4
		to_pin   = 31U;
    4b26:	251f      	moveq	r5, #31
		from_pin = 0U;
    4b28:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    4b2a:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    4b2e:	42ac      	cmp	r4, r5
    4b30:	d902      	bls.n	4b38 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
    4b32:	2000      	movs	r0, #0
}
    4b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    4b38:	68fb      	ldr	r3, [r7, #12]
    4b3a:	fa08 f204 	lsl.w	r2, r8, r4
    4b3e:	4313      	orrs	r3, r2
    4b40:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    4b42:	4621      	mov	r1, r4
    4b44:	4630      	mov	r0, r6
    4b46:	f7fd ff41 	bl	29cc <gpiote_pin_int_cfg>
		if (res != 0) {
    4b4a:	2800      	cmp	r0, #0
    4b4c:	d1f2      	bne.n	4b34 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    4b4e:	3401      	adds	r4, #1
    4b50:	b2e4      	uxtb	r4, r4
    4b52:	e7ec      	b.n	4b2e <gpio_nrfx_pin_enable_callback+0x1a>

00004b54 <gpio_pin_write>:
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
    4b54:	6843      	ldr	r3, [r0, #4]
 * @param value Value set on the pin.
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_write(struct device *port, u32_t pin,
				 u32_t value)
{
    4b56:	b410      	push	{r4}
	return api->write(port, access_op, pin, value);
    4b58:	685c      	ldr	r4, [r3, #4]
    4b5a:	4613      	mov	r3, r2
    4b5c:	46a4      	mov	ip, r4
    4b5e:	460a      	mov	r2, r1
	return gpio_write(port, GPIO_ACCESS_BY_PIN, pin, value);
}
    4b60:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
    4b62:	2100      	movs	r1, #0
    4b64:	4760      	bx	ip

00004b66 <_spi_context_cs_control.isra.7>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
    4b66:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
    4b68:	6804      	ldr	r4, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
    4b6a:	4605      	mov	r5, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
    4b6c:	b324      	cbz	r4, 4bb8 <_spi_context_cs_control.isra.7+0x52>
    4b6e:	68a3      	ldr	r3, [r4, #8]
    4b70:	b313      	cbz	r3, 4bb8 <_spi_context_cs_control.isra.7+0x52>
    4b72:	6818      	ldr	r0, [r3, #0]
    4b74:	b300      	cbz	r0, 4bb8 <_spi_context_cs_control.isra.7+0x52>
		if (on) {
    4b76:	b161      	cbz	r1, 4b92 <_spi_context_cs_control.isra.7+0x2c>
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
    4b78:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
    4b7c:	6859      	ldr	r1, [r3, #4]
    4b7e:	0fd2      	lsrs	r2, r2, #31
    4b80:	f7ff ffe8 	bl	4b54 <gpio_pin_write>
			k_busy_wait(ctx->config->cs->delay);
    4b84:	682b      	ldr	r3, [r5, #0]
    4b86:	689b      	ldr	r3, [r3, #8]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_BUSY_WAIT, k_busy_wait, u32_t, usec_to_wait)
    4b88:	6898      	ldr	r0, [r3, #8]
}
    4b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4b8e:	f000 b932 	b.w	4df6 <z_impl_k_busy_wait>
			if (!force_off &&
    4b92:	b912      	cbnz	r2, 4b9a <_spi_context_cs_control.isra.7+0x34>
    4b94:	88a2      	ldrh	r2, [r4, #4]
    4b96:	0492      	lsls	r2, r2, #18
    4b98:	d40e      	bmi.n	4bb8 <_spi_context_cs_control.isra.7+0x52>
    4b9a:	6898      	ldr	r0, [r3, #8]
    4b9c:	f000 f92b 	bl	4df6 <z_impl_k_busy_wait>
			gpio_pin_write(ctx->config->cs->gpio_dev,
    4ba0:	682a      	ldr	r2, [r5, #0]
    4ba2:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
    4ba4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
    4ba8:	43d2      	mvns	r2, r2
    4baa:	e9d3 0100 	ldrd	r0, r1, [r3]
    4bae:	0fd2      	lsrs	r2, r2, #31
}
    4bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_write(ctx->config->cs->gpio_dev,
    4bb4:	f7ff bfce 	b.w	4b54 <gpio_pin_write>
}
    4bb8:	bd38      	pop	{r3, r4, r5, pc}

00004bba <spi_context_unlock_unconditionally>:
{
    4bba:	b510      	push	{r4, lr}
    4bbc:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    4bbe:	2201      	movs	r2, #1
    4bc0:	2100      	movs	r1, #0
    4bc2:	f7ff ffd0 	bl	4b66 <_spi_context_cs_control.isra.7>
	if (!k_sem_count_get(&ctx->lock)) {
    4bc6:	68e3      	ldr	r3, [r4, #12]
    4bc8:	b923      	cbnz	r3, 4bd4 <spi_context_unlock_unconditionally+0x1a>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    4bca:	1d20      	adds	r0, r4, #4
}
    4bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4bd0:	f7fe bea6 	b.w	3920 <z_impl_k_sem_give>
    4bd4:	bd10      	pop	{r4, pc}

00004bd6 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    4bd6:	6880      	ldr	r0, [r0, #8]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    4bd8:	6803      	ldr	r3, [r0, #0]
    4bda:	428b      	cmp	r3, r1
{
    4bdc:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    4bde:	d106      	bne.n	4bee <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    4be0:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
    4be4:	b934      	cbnz	r4, 4bf4 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    4be6:	f7ff ffe8 	bl	4bba <spi_context_unlock_unconditionally>
	return 0;
    4bea:	4620      	mov	r0, r4
}
    4bec:	bd10      	pop	{r4, pc}
		return -EINVAL;
    4bee:	f06f 0015 	mvn.w	r0, #21
    4bf2:	e7fb      	b.n	4bec <spi_nrfx_release+0x16>
		return -EBUSY;
    4bf4:	f06f 000f 	mvn.w	r0, #15
    4bf8:	e7f8      	b.n	4bec <spi_nrfx_release+0x16>

00004bfa <event_handler>:
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    4bfa:	7803      	ldrb	r3, [r0, #0]
{
    4bfc:	b410      	push	{r4}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    4bfe:	2b00      	cmp	r3, #0
    4c00:	d137      	bne.n	4c72 <event_handler+0x78>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    4c02:	688b      	ldr	r3, [r1, #8]
	if (!ctx->tx_len) {
    4c04:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    4c06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4c08:	b180      	cbz	r0, 4c2c <event_handler+0x32>
	if (len > ctx->tx_len) {
    4c0a:	4282      	cmp	r2, r0
    4c0c:	d80e      	bhi.n	4c2c <event_handler+0x32>
	ctx->tx_len -= len;
    4c0e:	1a80      	subs	r0, r0, r2
    4c10:	63d8      	str	r0, [r3, #60]	; 0x3c
	if (!ctx->tx_len) {
    4c12:	bb10      	cbnz	r0, 4c5a <event_handler+0x60>
		ctx->tx_count--;
    4c14:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    4c16:	3801      	subs	r0, #1
    4c18:	62d8      	str	r0, [r3, #44]	; 0x2c
		if (ctx->tx_count) {
    4c1a:	b310      	cbz	r0, 4c62 <event_handler+0x68>
			ctx->current_tx++;
    4c1c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4c1e:	f100 0408 	add.w	r4, r0, #8
    4c22:	629c      	str	r4, [r3, #40]	; 0x28
			ctx->tx_buf = ctx->current_tx->buf;
    4c24:	6884      	ldr	r4, [r0, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
    4c26:	68c0      	ldr	r0, [r0, #12]
			ctx->tx_buf = ctx->current_tx->buf;
    4c28:	639c      	str	r4, [r3, #56]	; 0x38
			ctx->tx_len = ctx->current_tx->len / dfs;
    4c2a:	63d8      	str	r0, [r3, #60]	; 0x3c
	if (!ctx->rx_len) {
    4c2c:	6c58      	ldr	r0, [r3, #68]	; 0x44
    4c2e:	b180      	cbz	r0, 4c52 <event_handler+0x58>
	if (len > ctx->rx_len) {
    4c30:	4282      	cmp	r2, r0
    4c32:	d80e      	bhi.n	4c52 <event_handler+0x58>
	ctx->rx_len -= len;
    4c34:	1a80      	subs	r0, r0, r2
    4c36:	6458      	str	r0, [r3, #68]	; 0x44
	if (!ctx->rx_len) {
    4c38:	b9a8      	cbnz	r0, 4c66 <event_handler+0x6c>
		ctx->rx_count--;
    4c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    4c3c:	3a01      	subs	r2, #1
    4c3e:	635a      	str	r2, [r3, #52]	; 0x34
		if (ctx->rx_count) {
    4c40:	b1aa      	cbz	r2, 4c6e <event_handler+0x74>
			ctx->current_rx++;
    4c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4c44:	f102 0008 	add.w	r0, r2, #8
    4c48:	6318      	str	r0, [r3, #48]	; 0x30
			ctx->rx_buf = ctx->current_rx->buf;
    4c4a:	6890      	ldr	r0, [r2, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
    4c4c:	68d2      	ldr	r2, [r2, #12]
			ctx->rx_buf = ctx->current_rx->buf;
    4c4e:	6418      	str	r0, [r3, #64]	; 0x40
			ctx->rx_len = ctx->current_rx->len / dfs;
    4c50:	645a      	str	r2, [r3, #68]	; 0x44
		transfer_next_chunk(dev);
    4c52:	4608      	mov	r0, r1
}
    4c54:	bc10      	pop	{r4}
		transfer_next_chunk(dev);
    4c56:	f7fd bf87 	b.w	2b68 <transfer_next_chunk>
	} else if (ctx->tx_buf) {
    4c5a:	6b98      	ldr	r0, [r3, #56]	; 0x38
    4c5c:	2800      	cmp	r0, #0
    4c5e:	d0e5      	beq.n	4c2c <event_handler+0x32>
		ctx->tx_buf += dfs * len;
    4c60:	4410      	add	r0, r2
    4c62:	6398      	str	r0, [r3, #56]	; 0x38
    4c64:	e7e2      	b.n	4c2c <event_handler+0x32>
	} else if (ctx->rx_buf) {
    4c66:	6c18      	ldr	r0, [r3, #64]	; 0x40
    4c68:	2800      	cmp	r0, #0
    4c6a:	d0f2      	beq.n	4c52 <event_handler+0x58>
		ctx->rx_buf += dfs * len;
    4c6c:	4402      	add	r2, r0
    4c6e:	641a      	str	r2, [r3, #64]	; 0x40
    4c70:	e7ef      	b.n	4c52 <event_handler+0x58>
}
    4c72:	bc10      	pop	{r4}
    4c74:	4770      	bx	lr

00004c76 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    4c76:	6882      	ldr	r2, [r0, #8]
{
    4c78:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    4c7a:	e892 0003 	ldmia.w	r2, {r0, r1}
    4c7e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4c82:	2000      	movs	r0, #0
    4c84:	4770      	bx	lr

00004c86 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    4c86:	f7ff bce4 	b.w	4652 <z_clock_idle_exit>

00004c8a <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    4c8a:	7b43      	ldrb	r3, [r0, #13]
    4c8c:	06db      	lsls	r3, r3, #27
    4c8e:	bf03      	ittte	eq
    4c90:	6980      	ldreq	r0, [r0, #24]
    4c92:	fab0 f080 	clzeq	r0, r0
    4c96:	0940      	lsreq	r0, r0, #5
    4c98:	2000      	movne	r0, #0
}
    4c9a:	4770      	bx	lr

00004c9c <z_unpend_thread_no_timeout>:
{
    4c9c:	b538      	push	{r3, r4, r5, lr}
    4c9e:	4604      	mov	r4, r0
	__asm__ volatile(
    4ca0:	f04f 0320 	mov.w	r3, #32
    4ca4:	f3ef 8511 	mrs	r5, BASEPRI
    4ca8:	f383 8811 	msr	BASEPRI, r3
    4cac:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    4cb0:	4601      	mov	r1, r0
    4cb2:	6880      	ldr	r0, [r0, #8]
    4cb4:	f7fe fbc4 	bl	3440 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4cb8:	7b63      	ldrb	r3, [r4, #13]
    4cba:	f023 0302 	bic.w	r3, r3, #2
    4cbe:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    4cc0:	f385 8811 	msr	BASEPRI, r5
    4cc4:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    4cc8:	2300      	movs	r3, #0
    4cca:	60a3      	str	r3, [r4, #8]
}
    4ccc:	bd38      	pop	{r3, r4, r5, pc}

00004cce <z_reschedule>:
{
    4cce:	b508      	push	{r3, lr}
	if (resched()) {
    4cd0:	f7fe fb50 	bl	3374 <resched>
    4cd4:	b120      	cbz	r0, 4ce0 <z_reschedule+0x12>
    4cd6:	4608      	mov	r0, r1
}
    4cd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4cdc:	f7fc bdf4 	b.w	18c8 <__swap>
    4ce0:	f381 8811 	msr	BASEPRI, r1
    4ce4:	f3bf 8f6f 	isb	sy
    4ce8:	bd08      	pop	{r3, pc}

00004cea <z_reschedule_irqlock>:
{
    4cea:	b508      	push	{r3, lr}
    4cec:	4602      	mov	r2, r0
	if (resched()) {
    4cee:	f7fe fb41 	bl	3374 <resched>
    4cf2:	b120      	cbz	r0, 4cfe <z_reschedule_irqlock+0x14>
    4cf4:	4610      	mov	r0, r2
}
    4cf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4cfa:	f7fc bde5 	b.w	18c8 <__swap>
    4cfe:	f382 8811 	msr	BASEPRI, r2
    4d02:	f3bf 8f6f 	isb	sy
    4d06:	bd08      	pop	{r3, pc}

00004d08 <z_reschedule_unlocked>:
	__asm__ volatile(
    4d08:	f04f 0320 	mov.w	r3, #32
    4d0c:	f3ef 8011 	mrs	r0, BASEPRI
    4d10:	f383 8811 	msr	BASEPRI, r3
    4d14:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
    4d18:	f7ff bfe7 	b.w	4cea <z_reschedule_irqlock>

00004d1c <z_priq_dumb_best>:
	return list->head == list;
    4d1c:	6803      	ldr	r3, [r0, #0]
}
    4d1e:	4298      	cmp	r0, r3
    4d20:	bf14      	ite	ne
    4d22:	4618      	movne	r0, r3
    4d24:	2000      	moveq	r0, #0
    4d26:	4770      	bx	lr

00004d28 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
    4d28:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    4d2c:	b570      	push	{r4, r5, r6, lr}
    4d2e:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    4d30:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    4d34:	b1cb      	cbz	r3, 4d6a <z_thread_timeout+0x42>
    4d36:	f04f 0320 	mov.w	r3, #32
    4d3a:	f3ef 8611 	mrs	r6, BASEPRI
    4d3e:	f383 8811 	msr	BASEPRI, r3
    4d42:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    4d46:	4629      	mov	r1, r5
    4d48:	f850 0c10 	ldr.w	r0, [r0, #-16]
    4d4c:	f7fe fb78 	bl	3440 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4d50:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    4d54:	f023 0302 	bic.w	r3, r3, #2
    4d58:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    4d5c:	f386 8811 	msr	BASEPRI, r6
    4d60:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    4d64:	2300      	movs	r3, #0
    4d66:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4d6a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    4d6e:	f023 0314 	bic.w	r3, r3, #20
    4d72:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    4d76:	4628      	mov	r0, r5
    4d78:	f7ff ff87 	bl	4c8a <z_is_thread_ready>
    4d7c:	b120      	cbz	r0, 4d88 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
    4d7e:	4628      	mov	r0, r5
}
    4d80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4d84:	f7fe bbac 	b.w	34e0 <z_add_thread_to_ready_q>
    4d88:	bd70      	pop	{r4, r5, r6, pc}

00004d8a <z_unpend_first_thread>:
{
    4d8a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4d8c:	f04f 0320 	mov.w	r3, #32
    4d90:	f3ef 8211 	mrs	r2, BASEPRI
    4d94:	f383 8811 	msr	BASEPRI, r3
    4d98:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    4d9c:	f7ff ffbe 	bl	4d1c <z_priq_dumb_best>
    4da0:	4604      	mov	r4, r0
	__asm__ volatile(
    4da2:	f382 8811 	msr	BASEPRI, r2
    4da6:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    4daa:	b1c8      	cbz	r0, 4de0 <z_unpend_first_thread+0x56>
	__asm__ volatile(
    4dac:	f04f 0320 	mov.w	r3, #32
    4db0:	f3ef 8511 	mrs	r5, BASEPRI
    4db4:	f383 8811 	msr	BASEPRI, r3
    4db8:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    4dbc:	4601      	mov	r1, r0
    4dbe:	6880      	ldr	r0, [r0, #8]
    4dc0:	f7fe fb3e 	bl	3440 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4dc4:	7b63      	ldrb	r3, [r4, #13]
    4dc6:	f023 0302 	bic.w	r3, r3, #2
    4dca:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    4dcc:	f385 8811 	msr	BASEPRI, r5
    4dd0:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    4dd4:	2300      	movs	r3, #0
    4dd6:	60a3      	str	r3, [r4, #8]
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4dd8:	f104 0018 	add.w	r0, r4, #24
    4ddc:	f000 f834 	bl	4e48 <z_abort_timeout>
}
    4de0:	4620      	mov	r0, r4
    4de2:	bd38      	pop	{r3, r4, r5, pc}

00004de4 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    4de4:	7b43      	ldrb	r3, [r0, #13]
    4de6:	06db      	lsls	r3, r3, #27
    4de8:	bf03      	ittte	eq
    4dea:	6980      	ldreq	r0, [r0, #24]
    4dec:	fab0 f080 	clzeq	r0, r0
    4df0:	0940      	lsreq	r0, r0, #5
    4df2:	2000      	movne	r0, #0
}
    4df4:	4770      	bx	lr

00004df6 <z_impl_k_busy_wait>:
	z_arch_busy_wait(usec_to_wait);
    4df6:	f7fb bf7b 	b.w	cf0 <z_arch_busy_wait>

00004dfa <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    4dfa:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    4dfc:	b510      	push	{r4, lr}
    4dfe:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    4e00:	b103      	cbz	r3, 4e04 <z_thread_single_abort+0xa>
		thread->fn_abort();
    4e02:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
    4e04:	4620      	mov	r0, r4
    4e06:	f7ff ffed 	bl	4de4 <z_is_thread_ready>
    4e0a:	b138      	cbz	r0, 4e1c <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
    4e0c:	4620      	mov	r0, r4
    4e0e:	f7fe fc13 	bl	3638 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
    4e12:	7b63      	ldrb	r3, [r4, #13]
    4e14:	f043 0308 	orr.w	r3, r3, #8
    4e18:	7363      	strb	r3, [r4, #13]
}
    4e1a:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
    4e1c:	7b63      	ldrb	r3, [r4, #13]
    4e1e:	079b      	lsls	r3, r3, #30
    4e20:	d502      	bpl.n	4e28 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
    4e22:	4620      	mov	r0, r4
    4e24:	f7ff ff3a 	bl	4c9c <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
    4e28:	69a3      	ldr	r3, [r4, #24]
    4e2a:	2b00      	cmp	r3, #0
    4e2c:	d0f1      	beq.n	4e12 <z_thread_single_abort+0x18>
    4e2e:	f104 0018 	add.w	r0, r4, #24
    4e32:	f000 f809 	bl	4e48 <z_abort_timeout>
    4e36:	e7ec      	b.n	4e12 <z_thread_single_abort+0x18>

00004e38 <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    4e38:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    4e3a:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    4e3c:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    4e3e:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0;
    4e40:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
    4e42:	e9c0 3306 	strd	r3, r3, [r0, #24]

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    4e46:	4770      	bx	lr

00004e48 <z_abort_timeout>:
{
    4e48:	b510      	push	{r4, lr}
	__asm__ volatile(
    4e4a:	f04f 0220 	mov.w	r2, #32
    4e4e:	f3ef 8411 	mrs	r4, BASEPRI
    4e52:	f382 8811 	msr	BASEPRI, r2
    4e56:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    4e5a:	6803      	ldr	r3, [r0, #0]
    4e5c:	b13b      	cbz	r3, 4e6e <z_abort_timeout+0x26>
			remove_timeout(to);
    4e5e:	f7fe fe65 	bl	3b2c <remove_timeout>
			ret = 0;
    4e62:	2000      	movs	r0, #0
	__asm__ volatile(
    4e64:	f384 8811 	msr	BASEPRI, r4
    4e68:	f3bf 8f6f 	isb	sy
}
    4e6c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    4e6e:	f06f 0015 	mvn.w	r0, #21
    4e72:	e7f7      	b.n	4e64 <z_abort_timeout+0x1c>

00004e74 <z_get_next_timeout_expiry>:
{
    4e74:	b510      	push	{r4, lr}
	__asm__ volatile(
    4e76:	f04f 0320 	mov.w	r3, #32
    4e7a:	f3ef 8411 	mrs	r4, BASEPRI
    4e7e:	f383 8811 	msr	BASEPRI, r3
    4e82:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    4e86:	f7fe fe67 	bl	3b58 <next_timeout>
	__asm__ volatile(
    4e8a:	f384 8811 	msr	BASEPRI, r4
    4e8e:	f3bf 8f6f 	isb	sy
}
    4e92:	bd10      	pop	{r4, pc}

00004e94 <z_set_timeout_expiry>:
{
    4e94:	b570      	push	{r4, r5, r6, lr}
    4e96:	4604      	mov	r4, r0
    4e98:	460e      	mov	r6, r1
	__asm__ volatile(
    4e9a:	f04f 0320 	mov.w	r3, #32
    4e9e:	f3ef 8511 	mrs	r5, BASEPRI
    4ea2:	f383 8811 	msr	BASEPRI, r3
    4ea6:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    4eaa:	f7fe fe55 	bl	3b58 <next_timeout>
		if (sooner && !imminent) {
    4eae:	42a0      	cmp	r0, r4
    4eb0:	dd05      	ble.n	4ebe <z_set_timeout_expiry+0x2a>
    4eb2:	2801      	cmp	r0, #1
    4eb4:	dd03      	ble.n	4ebe <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    4eb6:	4631      	mov	r1, r6
    4eb8:	4620      	mov	r0, r4
    4eba:	f7fc fc93 	bl	17e4 <z_clock_set_timeout>
	__asm__ volatile(
    4ebe:	f385 8811 	msr	BASEPRI, r5
    4ec2:	f3bf 8f6f 	isb	sy
}
    4ec6:	bd70      	pop	{r4, r5, r6, pc}

00004ec8 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    4ec8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    4eca:	f7fe ff07 	bl	3cdc <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    4ece:	bd08      	pop	{r3, pc}

00004ed0 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    4ed0:	4770      	bx	lr
